<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第4章-标签亲和性污点容忍度</title>
      <link href="/2023/02/14/k8s-bi-ji/di-4-zhang-biao-qian-qin-he-xing-wu-dian-rong-ren-du/"/>
      <url>/2023/02/14/k8s-bi-ji/di-4-zhang-biao-qian-qin-he-xing-wu-dian-rong-ren-du/</url>
      
        <content type="html"><![CDATA[<h3 id="一、标签"><a href="#一、标签" class="headerlink" title="一、标签"></a>一、标签</h3><h4 id="1-1-什么是标签"><a href="#1-1-什么是标签" class="headerlink" title="1.1 什么是标签"></a>1.1 什么是标签</h4><p>标签其实就一对key&#x2F;value，被关联到对象上，比如Pod,标签的使用我们倾向于能够表示对象的特殊特点，就是一眼就看出了这个Pod是干什么的，标签可以用来划分特定的对象（比如版本，服务类型等），标签可以在创建一个对象的时候直接定义，也可以在后期随时修改，每一个对象可以拥有多个标签，但是，key值必须是唯一的。创建标签之后也可以方便我们对资源进行分组管理。如果对pod打标签，之后就可以使用标签来查看、删除指定的pod。</p><p>在k8s中，大部分资源都可以打标签；标签实际上是从Pod的角度，约束了Pod只能调度到那些满足条件的节点上。</p><h4 id="1-2-给pod资源打标签"><a href="#1-2-给pod资源打标签" class="headerlink" title="1.2 给pod资源打标签"></a>1.2 给pod资源打标签</h4><p>标签是打在 Node 上，可以理解为 Node 的属性，或者说你为 Node 分的组名</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f pod-first.yaml </span>pod/tomcat-test-1 created<span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods</span>NAME            READY   STATUS    RESTARTS   AGEtomcat-test-1   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          32s<span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods --show-labels</span>NAME            READY   STATUS    RESTARTS   AGE   LABELStomcat-test-1   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          36s   <span class="token assign-left variable">app</span><span class="token operator">=</span>tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对已经存在的pod打标签</p><p>[root@master1~]# <code>kubectl label pods tomcat-test-1  release=v1</code></p><p>查看标签是否打成功：</p><p>[root@master1~]# <code>kubectl get pods tomcat-test --show-labels</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods tomcat-test-1 --show-labels</span>NAME            READY   STATUS    RESTARTS   AGE    LABELStomcat-test-1   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          2m7s   <span class="token assign-left variable">app</span><span class="token operator">=</span>tomcat,release<span class="token operator">=</span>v1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-3-查看资源标签"><a href="#1-3-查看资源标签" class="headerlink" title="1.3  查看资源标签"></a>1.3  查看资源标签</h4><p>查看默认名称空间下所有pod资源的标签</p><p>[root@master1~]# <code>kubectl get pods --show-labels </code></p><p>查看默认名称空间下指定pod具有的所有标签</p><p>[root@master1~]# <code>kubectl get pods tomcat-test --show-labels</code></p><p>列出默认名称空间下标签key是release的pod，不显示标签</p><p>[root@master1~]# <code>kubectl get pods -l release</code></p><p>列出默认名称空间下标签key是release、值是v1的pod，不显示标签</p><p>[root@master1~]# <code>kubectl get pods -l release=v1</code></p><p>当标签较多时，也可以使用<code>-L</code> 来指定显示那些标签。列出默认名称空间下标签key是release的所有pod，并打印对应的标签值</p><p>[root@master1~]# <code>kubectl get pods -L release</code></p><p>除此之外，也使用 in 和 notin 来判断标签的集合关系</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master01 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get pod -l "app in (web,nginx)" --show-labels</span>NAME         READY   STATUS    RESTARTS   AGE    LABELSnginx-test   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          5d8h   <span class="token assign-left variable">app</span><span class="token operator">=</span>nginx,env<span class="token operator">=</span>test<span class="token punctuation">[</span>root@master01 ~<span class="token punctuation">]</span><span class="token comment">#</span><span class="token punctuation">[</span>root@master01 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get pod -l "env notin (product,dev)" --show-labels</span>NAME                               READY   STATUS    RESTARTS   AGE    LABELSnginx-test                         <span class="token number">1</span>/1     Running   <span class="token number">0</span>          5d8h   <span class="token assign-left variable">app</span><span class="token operator">=</span>nginx,env<span class="token operator">=</span>test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看所有名称空间下的所有pod的标签</p><p>[root@master1 ~]# <code>kubectl get pods --all-namespaces --show-labels</code></p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">NAMESPACE     NAME                                       READY   STATUS             RESTARTS   AGE     LABELSdefault       tomcat-test-1                              <span class="token number">1</span>/1     Running            <span class="token number">0</span>          8m10s   <span class="token assign-left variable">app</span><span class="token operator">=</span>tomcat,release<span class="token operator">=</span>v1kube-system   calico-kube-controllers-6744f6b6d5-nnblc   <span class="token number">1</span>/1     Running            <span class="token number">0</span>          6d21h   k8s-app<span class="token operator">=</span>calico-kube-controllers,pod-template-hash<span class="token operator">=</span>6744f6b6d5kube-system   calico-node-22g7q                          <span class="token number">1</span>/1     Running            <span class="token number">0</span>          6d21h   controller-revision-hash<span class="token operator">=</span>f646f8d97,k8s-app<span class="token operator">=</span>calico-node,pod-template-generation<span class="token operator">=</span><span class="token number">1</span>kube-system   calico-node-fvp5g                          <span class="token number">1</span>/1     Running            <span class="token number">0</span>          6d21h   controller-revision-hash<span class="token operator">=</span>f646f8d97,k8s-app<span class="token operator">=</span>calico-node,pod-template-generation<span class="token operator">=</span><span class="token number">1</span>kube-system   calico-node-wqwwg                          <span class="token number">1</span>/1     Running            <span class="token number">0</span>          6d21h   controller-revision-hash<span class="token operator">=</span>f646f8d97,k8s-app<span class="token operator">=</span>calico-node,pod-template-generation<span class="token operator">=</span><span class="token number">1</span>kube-system   coredns-7f8cbcb969-2r662                   <span class="token number">1</span>/1     Running            <span class="token number">0</span>          6d22h   k8s-app<span class="token operator">=</span>kube-dns,pod-template-hash<span class="token operator">=</span>7f8cbcb969kube-system   coredns-7f8cbcb969-kpgsv                   <span class="token number">1</span>/1     Running            <span class="token number">0</span>          6d22h   k8s-app<span class="token operator">=</span>kube-dns,pod-template-hash<span class="token operator">=</span>7f8cbcb969kube-system   etcd-master1                               <span class="token number">1</span>/1     Running            <span class="token number">0</span>          6d22h   <span class="token assign-left variable">component</span><span class="token operator">=</span>etcd,tier<span class="token operator">=</span>control-planekube-system   kube-apiserver-master1                     <span class="token number">1</span>/1     Running            <span class="token number">0</span>          6d22h   <span class="token assign-left variable">component</span><span class="token operator">=</span>kube-apiserver,tier<span class="token operator">=</span>control-planekube-system   kube-controller-manager-master1            <span class="token number">1</span>/1     Running            <span class="token number">0</span>          6d22h   <span class="token assign-left variable">component</span><span class="token operator">=</span>kube-controller-manager,tier<span class="token operator">=</span>control-planekube-system   kube-proxy-7vjk5                           <span class="token number">1</span>/1     Running            <span class="token number">0</span>          6d22h   controller-revision-hash<span class="token operator">=</span>5cc4b8856c,k8s-app<span class="token operator">=</span>kube-proxy,pod-template-generation<span class="token operator">=</span><span class="token number">1</span>kube-system   kube-proxy-mfpcg                           <span class="token number">1</span>/1     Running            <span class="token number">0</span>          6d22h   controller-revision-hash<span class="token operator">=</span>5cc4b8856c,k8s-app<span class="token operator">=</span>kube-proxy,pod-template-generation<span class="token operator">=</span><span class="token number">1</span>kube-system   kube-proxy-pv87q                           <span class="token number">1</span>/1     Running            <span class="token number">0</span>          6d22h   controller-revision-hash<span class="token operator">=</span>5cc4b8856c,k8s-app<span class="token operator">=</span>kube-proxy,pod-template-generation<span class="token operator">=</span><span class="token number">1</span>kube-system   kube-scheduler-master1                     <span class="token number">1</span>/1     Running            <span class="token number">0</span>          6d22h   <span class="token assign-left variable">component</span><span class="token operator">=</span>kube-scheduler,tier<span class="token operator">=</span>control-plane<span class="token builtin class-name">test</span>          tomcat-miao                                <span class="token number">0</span>/1     InvalidImageName   <span class="token number">0</span>          3d10h   <span class="token assign-left variable">app</span><span class="token operator">=</span>tomcat-miao<span class="token builtin class-name">test</span>          tomcat-test1                               <span class="token number">1</span>/1     Running            <span class="token number">0</span>          3d10h   <span class="token assign-left variable">app</span><span class="token operator">=</span>tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、node节点选择器"><a href="#二、node节点选择器" class="headerlink" title="二、node节点选择器"></a>二、node节点选择器</h3><p>我们在创建pod资源的时候，pod会根据schduler进行调度，那么默认会调度到随机的一个工作节点，如果我们想要pod调度到指定节点或者调度到一些具有相同特点的node节点，怎么办呢？</p><p>可以使用pod中的nodeName或者nodeSelector字段指定要调度到的node节点</p><p>1、nodeName：</p><p>指定pod节点运行在哪个具体node上</p><p>把tomcat.tar.gz上传到node1和node2，手动解压：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># ctr -n=k8s.io images import  tomcat.tar.gz </span>Loaded image: tomcat:8.5-jre8-alpine<span class="token punctuation">[</span>root@node2 ~<span class="token punctuation">]</span><span class="token comment"># ctr -n=k8s.io images import  tomcat.tar.gz </span>Loaded image: tomcat:8.5-jre8-alpine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>把busybox.tar.gz上传到node1和node2，手动解压：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># ctr -n=k8s.io images import  busybox.tar.gz</span><span class="token punctuation">[</span>root@node2 ~<span class="token punctuation">]</span><span class="token comment"># ctr -n=k8s.io images import  busybox.tar.gz </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[root@master1 ~]# cat pod-node.yaml </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> damo<span class="token punctuation">-</span>pod  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp    <span class="token key atrule">env</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">nodeName</span><span class="token punctuation">:</span> node1  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">-</span>pod<span class="token punctuation">-</span>java    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/xianchao/tomcat<span class="token punctuation">-</span>8.5<span class="token punctuation">-</span>jre8<span class="token punctuation">:</span>v1    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/library/busybox<span class="token punctuation">:</span><span class="token number">1.28</span>    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">]</span>    <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"sleep 3600"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[root@master1 ~]# <code>kubectl apply -f pod-node.yaml</code></p><p>查看pod调度到哪个节点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -owide</span>NAME       READY   STATUS    RESTARTS   AGE    IP               NODE    NOMINATED NODE   READINESS GATESdamo-pod   <span class="token number">2</span>/2     Running   <span class="token number">0</span>          2m3s   <span class="token number">10.224</span>.166.138   node1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 登录node1节点，可以看到有两个容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># crictl ps|grep damo</span>334c2ebe5016e       8c811b4aec35f       <span class="token number">4</span> minutes ago       Running             busybox             <span class="token number">0</span>                   3f12fd106f567       damo-pod91a65f42c9ba8       4ac473a3dd922       <span class="token number">4</span> minutes ago       Running             tomcat-pod-java     <span class="token number">0</span>                   3f12fd106f567       damo-pod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-1-nodeSelector"><a href="#2-1-nodeSelector" class="headerlink" title="2.1 nodeSelector"></a>2.1 nodeSelector</h4><p>在Pod的spec中可以指定一个nodeSelector对象，它是一个map字典，字典里的每个key-value，分别对应node上的label。</p><p>指定pod调度到具有哪些标签的node节点上：</p><p>给node节点打标签，打个具有disk&#x3D;ceph的标签</p><p>[root@master1 ~]# <code>kubectl label nodes node2 disk=ceph</code></p><p>定义pod的时候指定要调度到具有disk&#x3D;ceph标签的node上</p><p>[root@master1 ~]# cat pod-1.yaml </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> damo<span class="token punctuation">-</span>pod<span class="token punctuation">-</span><span class="token number">1</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp    <span class="token key atrule">env</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">nodeSelector</span><span class="token punctuation">:</span>    <span class="token key atrule">disk</span><span class="token punctuation">:</span> ceph  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">-</span>pod<span class="token punctuation">-</span>java    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/xianchao/tomcat<span class="token punctuation">-</span>8.5<span class="token punctuation">-</span>jre8<span class="token punctuation">:</span>v1    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[root@master1 ~]# kubectl apply -f pod-1.yaml</p><p>查看pod调度到哪个节点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -owide</span>NAME         READY   STATUS    RESTARTS   AGE    IP              NODE    NOMINATED NODE   READINESS GATESdamo-pod-1   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          113s   <span class="token number">10.224</span>.104.11   node2   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>做完上面实验，需要把default名称空间下的pod全都删除：kubectl delete pods pod名字</p><p>删除node节点打的标签：</p><p>[root@master1 ~]# <code>kubectl label nodes node2 disk-</code></p><p>假如yaml文件改成如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> damo<span class="token punctuation">-</span>pod<span class="token punctuation">-</span><span class="token number">1</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp    <span class="token key atrule">env</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">nodeName</span><span class="token punctuation">:</span> node2  <span class="token comment"># 添加节点选择</span>  <span class="token key atrule">nodeSelector</span><span class="token punctuation">:</span>    <span class="token key atrule">disk</span><span class="token punctuation">:</span> ceph  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">-</span>pod<span class="token punctuation">-</span>java    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/xianchao/tomcat<span class="token punctuation">-</span>8.5<span class="token punctuation">-</span>jre8<span class="token punctuation">:</span>v1    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么创建pod，会报错，报什么错呢？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f pod-1.yaml </span>pod/damo-pod-1 created<span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -w</span>NAME         READY   STATUS         RESTARTS   AGEdamo-pod-1   <span class="token number">0</span>/1     NodeAffinity   <span class="token number">0</span>          19s<span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl describe pods damo-pod-1</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Events:  Type     Reason        Age   From     Message  ----     ------        ----  ----     -------  Warning  NodeAffinity  10m   kubelet  Predicate NodeAffinity failed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同一个yaml文件里定义pod资源，如果同时定义了<strong>nodeName和NodeSelector</strong>，那么条件必须都满足才可以，有一个不满足都会调度失败</p><p>假如给node2继续打上标签</p><p>[root@master1 ~]# <code>kubectl label nodes node2 disk=ceph</code></p><p>如果这个时候直接查看demo-pod-1，状态还是不正常的，需要删除后，再重新apply就可以如下pod状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl delete -f pod-1.yaml </span>pod <span class="token string">"damo-pod-1"</span> deleted<span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f pod-1.yaml </span>pod/damo-pod-1 created<span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -owide</span>NAME         READY   STATUS    RESTARTS   AGE   IP              NODE    NOMINATED NODE   READINESS GATESdamo-pod-1   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          9s    <span class="token number">10.224</span>.104.12   node2   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面可以看到pod能正常调度到node2上</p><p>[root@master1 ~]# <code>kubectl label nodes node2 disk-</code></p><p>[root@master1]# <code>kubectl delete -f pod-1.yaml</code></p><h3 id="三、污点、容忍度、亲和性"><a href="#三、污点、容忍度、亲和性" class="headerlink" title="三、污点、容忍度、亲和性"></a>三、污点、容忍度、亲和性</h3><h4 id="3-1-通俗理解亲和性"><a href="#3-1-通俗理解亲和性" class="headerlink" title="3.1 通俗理解亲和性"></a>3.1 通俗理解亲和性</h4><p>按照惯例，解释一个新名词前，我会拿生活中的例子做类比，方便大家轻松上手。</p><p>公司组织员工出去团建，带头人策划了一个小游戏，这个小游戏会将成员分成几个不同的小组进行 PK，最终以团队的比分做为排名依据。</p><p>员工可以自由选择队友，这时候就有两种选择的标准：</p><ul><li>第一种：我有社交恐惧症，只选自己熟悉的同事，自己容易融入。这种就是亲和性原则</li><li>第二种：我有社交牛逼症，只选自己陌生的同事，能交到新朋友。这种就是反亲和原则</li></ul><p>这里的员工就是 K8S 中的 Pod，而“熟悉” 和 “陌生” 就是 Pod 上的标签。</p><blockquote><p>要注意的是在这里有一点点不一样，因为对于每个人来说这里的标签值是不一样的，而在 Pod 上标签是固定值</p></blockquote><h4 id="3-2-亲和性调度与-nodeSelector"><a href="#3-2-亲和性调度与-nodeSelector" class="headerlink" title="3.2 亲和性调度与 nodeSelector"></a>3.2 亲和性调度与 nodeSelector</h4><p>以你目前的知识储备来看，应该会认为上面的亲和性做法，和之前学习过的 nodeSelector 很像吧？</p><p>仅以上面的例子来看，确实亲和性做法，就是 nodeSelector。</p><p>但实际上亲和性调度，远比 nodeSelector 强大许多，还是以上面的亲和性做法来举例</p><p>若以 nodeSelector 来实现上面的亲和性原则来组队，那 nodeSelector 就是脑子一根筋，只选自己熟悉的同事，不熟悉的，一概不选。</p><p>这么一来，就有可能，所有你熟悉的同事已经被别人捷足先登抢先拉拢了，而最后只剩你一个人孤零零的。</p><p>换成亲和性调度，就变得灵活许多，他可以设置两种策略：</p><p>对于亲和性和反亲和性，都可以设置：</p><ul><li>preferredDuringSchedulingIgnoredDuringExecution  &#x3D;&#x3D;&gt; 软策略,表示有节点尽量满足这个位置定义的亲和性，这不是一个必须的条件</li><li>requiredDuringSchedulingIgnoredDuringExecution &#x3D;&#x3D;&gt; 硬策略,表示必须有节点满足这个位置定义的亲和性，这是个硬性条件</li></ul><p>硬策略的做法，就是换个模式的 nodeSelector，它是强制性的，不满足就调度失败。</p><p>软策略的做法，则更灵活，可以选择满足条件的，要是真没有满足条件的，就调度到其他节点上（选择自己陌生的同事）</p><h4 id="3-3-亲和性的三个种类"><a href="#3-3-亲和性的三个种类" class="headerlink" title="3.3 亲和性的三个种类"></a>3.3 亲和性的三个种类</h4><p>对比 nodeSelector 来说，亲和性调度除非了上面可以选择软策略之外，还有更多强大的功能。</p><p>亲和性调度器定义在 <code>.spec.affinity</code> 字段里，通过 explain 命令可以查看其字段</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token constant">KIND</span><span class="token operator">:</span>     <span class="token class-name">Pod</span><span class="token constant">VERSION</span><span class="token operator">:</span>  v1<span class="token constant">RESOURCE</span><span class="token operator">:</span> affinity <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token constant">DESCRIPTION</span><span class="token operator">:</span>     <span class="token class-name">If</span> specified<span class="token punctuation">,</span> the pod's scheduling constraints     <span class="token class-name">Affinity</span> is a group of affinity scheduling rules<span class="token punctuation">.</span><span class="token constant">FIELDS</span><span class="token operator">:</span>   nodeAffinity    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span>     <span class="token class-name">Describes</span> node affinity scheduling rules <span class="token keyword">for</span> the pod<span class="token punctuation">.</span>   podAffinity    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span>     <span class="token class-name">Describes</span> pod affinity scheduling rules <span class="token punctuation">(</span>e<span class="token punctuation">.</span>g<span class="token punctuation">.</span> co<span class="token operator">-</span>locate <span class="token keyword">this</span> pod in the     same node<span class="token punctuation">,</span> zone<span class="token punctuation">,</span> etc<span class="token punctuation">.</span> as some other <span class="token function">pod</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>   podAntiAffinity    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span>     <span class="token class-name">Describes</span> pod anti<span class="token operator">-</span>affinity scheduling rules <span class="token punctuation">(</span>e<span class="token punctuation">.</span>g<span class="token punctuation">.</span> avoid putting <span class="token keyword">this</span> pod     in the same node<span class="token punctuation">,</span> zone<span class="token punctuation">,</span> etc<span class="token punctuation">.</span> as some other <span class="token function">pod</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到亲和性调度器，有如下三种：</p><ul><li>nodeAffinity(node亲和性)：该Pod喜欢调度到什么样的Node上</li><li>podAffinity(pod亲和性) ：该Pod喜欢和某些Pod调度在一起</li><li>podAntiAffinity(pod反亲和性)：该Pod不喜欢和某些Pod调度在一起</li></ul><p>上面三种亲和性调度，无论是哪一种，都要依赖标签才能起作用，只是不同的亲和性调度方法，亲和性调度器匹配标签的对象不同</p><ul><li>node亲和性：检查的是亲和性调度器与node标签的匹配</li><li>pod(反)亲和性：检查的是亲和性调度器与pod标签的匹配</li></ul><h4 id="3-4-node节点亲和性"><a href="#3-4-node节点亲和性" class="headerlink" title="3.4 node节点亲和性"></a>3.4 node节点亲和性</h4><p>node节点亲和性调度：nodeAffinity</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl explain pods.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms|grep "&lt;"</span>RESOURCE: nodeSelectorTerms <span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Object<span class="token operator">></span>   matchExpressions     <span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Object<span class="token operator">></span>  <span class="token comment"># 匹配表达式的</span>   matchFields  <span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Object<span class="token operator">></span> <span class="token comment"># 匹配字段的</span>   <span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl explain pods.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions|grep "&lt;"</span>RESOURCE: matchExpressions <span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Object<span class="token operator">></span>   key  <span class="token operator">&lt;</span>string<span class="token operator">></span> -required-   <span class="token comment"># 检查label</span>   operator     <span class="token operator">&lt;</span>string<span class="token operator">></span> -required-  <span class="token comment"># 做等值选则还是不等值选则</span>   values       <span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>string<span class="token operator">></span>  <span class="token comment"># 给定值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-4-1-使用node亲和性-硬策略"><a href="#3-4-1-使用node亲和性-硬策略" class="headerlink" title="3.4.1 使用node亲和性+硬策略"></a>3.4.1 使用node亲和性+硬策略</h5><p>把myapp-v1.tar.gz上传到node2和node1上，手动解压：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># ctr -n=k8s.io images import myapp-v1.tar.gz </span>unpacking docker.io/ikubernetes/myapp:v1 <span class="token punctuation">(</span>sha256:943e72fda89669b10a29723a10f261836dca71aa9b181d362020bb3b715bc9a1<span class="token punctuation">)</span><span class="token punctuation">..</span>.done<span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># ssh node2 "ctr -n=k8s.io images import myapp-v1.tar.gz"</span>unpacking docker.io/ikubernetes/myapp:v1 <span class="token punctuation">(</span>sha256:943e72fda89669b10a29723a10f261836dca71aa9b181d362020bb3b715bc9a1<span class="token punctuation">)</span><span class="token punctuation">..</span>.done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编写yaml文件</p><p>[root@master1 ~]# cat pod-nodeaffinity-demo.yaml </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>node<span class="token punctuation">-</span>affinity<span class="token punctuation">-</span>demo  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp    <span class="token key atrule">tier</span><span class="token punctuation">:</span> frontend  <span class="token comment"># 层+前端</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">affinity</span><span class="token punctuation">:</span>    <span class="token key atrule">nodeAffinity</span><span class="token punctuation">:</span>      <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>        <span class="token key atrule">nodeSelectorTerms</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> zone            <span class="token key atrule">operator</span><span class="token punctuation">:</span> In            <span class="token key atrule">values</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> foo            <span class="token punctuation">-</span> bar  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/ikubernetes/myapp<span class="token punctuation">:</span>v1    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们检查当前节点中有任意一个节点拥有zone标签的值是foo或者bar，就可以把pod调度到这个node节点的foo或者bar标签上的节点上</p><p>[root@master1 ~]# <code>kubectl apply -f pod-nodeaffinity-demo.yaml </code></p><p>[root@master1 pod]# <code>kubectl get pods -owide</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">NAME                     READY   STATUS    RESTARTS   AGE   IP       NODE     NOMINATED NODE   READINESS GATESpod-node-affinity-demo   <span class="token number">0</span>/1     Pending   <span class="token number">0</span>          38s   <span class="token operator">&lt;</span>none<span class="token operator">></span>   <span class="token operator">&lt;</span>none<span class="token operator">></span>   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>status的状态是pending，上面说明没有完成调度，因为没有一个拥有zone的标签的值是foo或者bar，而且使用的是硬亲和性，必须满足条件才能完成调度</p><p>我们现在给节点1添加一个标签</p><p>[root@master1 ~]# kubectl label nodes node1 zone&#x3D;foo</p><p>给这个node1节点打上标签zone&#x3D;foo，在查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get nodes -l zone</span>NAME    STATUS   ROLES   AGE     VERSIONnode1   Ready    work1   6d23h   v1.25.0<span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -owide</span>NAME                     READY   STATUS    RESTARTS   AGE    IP               NODE    NOMINATED NODE   READINESS GATESpod-node-affinity-demo   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          2m3s   <span class="token number">10.224</span>.166.139   node1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-4-2-使用node亲和性-软策略"><a href="#3-4-2-使用node亲和性-软策略" class="headerlink" title="3.4.2 使用node亲和性+软策略"></a>3.4.2 使用node亲和性+软策略</h5><p>新建pod-nodeaffinity-demo-2文件</p><p>[root@master1]# cat pod-nodeaffinity-demo-2.yaml </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>node<span class="token punctuation">-</span>affinity<span class="token punctuation">-</span>demo  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp    <span class="token key atrule">tier</span><span class="token punctuation">:</span> frontend  <span class="token comment"># 层+前端</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">affinity</span><span class="token punctuation">:</span>    <span class="token key atrule">nodeAffinity</span><span class="token punctuation">:</span>      <span class="token key atrule">preferredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">10</span>        <span class="token key atrule">preference</span><span class="token punctuation">:</span>          <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> zone1            <span class="token key atrule">operator</span><span class="token punctuation">:</span> In            <span class="token key atrule">values</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> foo1            <span class="token punctuation">-</span> bar1      <span class="token punctuation">-</span> <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">20</span>        <span class="token key atrule">preference</span><span class="token punctuation">:</span>          <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> zone2            <span class="token key atrule">operator</span><span class="token punctuation">:</span> In            <span class="token key atrule">values</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> foo2            <span class="token punctuation">-</span> bar2  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/ikubernetes/myapp<span class="token punctuation">:</span>v1    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[root@master1 ~]# kubectl apply -f pod-nodeaffinity-demo-2.yaml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -owide</span>NAME                     READY   STATUS    RESTARTS   AGE   IP              NODE    NOMINATED NODE   READINESS GATESpod-node-affinity-demo   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          53s   <span class="token number">10.224</span>.104.13   node2   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面说明软亲和性是可以运行这个pod的，尽管没有运行这个pod的节点定义的zone1标签</p><p>Node节点亲和性针对的是pod和node的关系，Pod调度到node节点的时候匹配的条件</p><h5 id="3-4-3-测试weight权重"><a href="#3-4-3-测试weight权重" class="headerlink" title="3.4.3 测试weight权重"></a>3.4.3 测试weight权重</h5><p>weight是相对权重，权重越高，pod调度的几率越大</p><p>假如给node1和node2都打上标签</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -owide</span>NAME                     READY   STATUS    RESTARTS   AGE   IP              NODE    NOMINATED NODE   READINESS GATESpod-node-affinity-demo   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          53s   <span class="token number">10.224</span>.104.13   node2   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl label nodes node1 zone1=foo1</span>node/node1 labeled<span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl label nodes node2 zone2=foo2</span>node/node2 labeled<span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -owide</span>NAME                     READY   STATUS    RESTARTS   AGE     IP              NODE    NOMINATED NODE   READINESS GATESpod-node-affinity-demo   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          2m55s   <span class="token number">10.224</span>.104.13   node2   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pod在定义node节点亲和性的时候，node1和node2都满足条件，都可以调度pod，但是node2具有的标签是zone2&#x3D;foo2，pod在匹配zone2&#x3D;foo2的权重高，那么pod就会优先调度到node2上。</p><p>删除创建的标签和Pod,为下次实验做准备</p><p>[root@master1 ~]# <code>kubectl label nodes node1 zone1-</code></p><p>[root@master1 ~]# <code>kubectl label nodes node2 zone2-</code></p><p>[root@master1 ~]# <code>kubectl label nodes node1 zone-</code></p><p>[root@master1]# <code>kubectl delete -f pod-nodeaffinity-demo.yaml</code></p><p>[root@master1]# <code>kubectl delete -f pod-nodeaffinity-demo-2.yaml</code></p><p>删除默认名称空间的所有pod资源</p><p>[root@master1 pod-2]# <code>kubectl get pods -owide </code></p><p>No resources found in default namespace.</p><h4 id="3-5-Pod节点亲和性"><a href="#3-5-Pod节点亲和性" class="headerlink" title="3.5 Pod节点亲和性"></a>3.5 Pod节点亲和性</h4><p>pod自身的亲和性调度有两种表示形式</p><p>podaffinity：pod和pod更倾向腻在一起，把相近的pod结合到相近的位置，如同一区域，同一机架，这样的话pod和pod之间更好通信，比方说有两个机房，这两个机房部署的集群有1000台主机，那么我们希望把nginx和tomcat都部署同一个地方的node节点上，可以提高通信效率；</p><p>podunaffinity：pod和pod更倾向不腻在一起，如果部署两套程序，那么这两套程序更倾向于反亲和性，这样相互之间不会有影响。</p><p>第一个pod随机选则一个节点，做为评判后续的pod能否到达这个pod所在的节点上的运行方式，这就称为pod亲和性；</p><p>我们怎么判定哪些节点是相同位置的，哪些节点是不同位置的?</p><p>我们在定义pod亲和性时需要有一个前提:</p><ul><li>哪些pod在同一个位置，哪些pod不在同一个位置，</li></ul><p>这个位置是怎么定义的，标准是什么？</p><ul><li>以节点名称为标准，这个节点名称相同的表示是同一个位置</li><li>节点名称不相同的表示不是一个位置</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl explain pods.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution |grep '&lt;'</span>RESOURCE: requiredDuringSchedulingIgnoredDuringExecution <span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Object<span class="token operator">></span>     on a <span class="token function">node</span> whose value of the label with key <span class="token operator">&lt;</span>topologyKey<span class="token operator">></span> matches that of   labelSelector        <span class="token operator">&lt;</span>Object<span class="token operator">></span>  <span class="token comment"># 我们要判断pod跟别的pod亲和，跟哪个pod亲和，需要靠labelSelector，通过labelSelector选则一组能作为亲和对象的pod资源</span>   namespaceSelector    <span class="token operator">&lt;</span>Object<span class="token operator">></span>   namespaces   <span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>string<span class="token operator">></span>   topologyKey  <span class="token operator">&lt;</span>string<span class="token operator">></span> -required-   <span class="token comment"># 位置拓扑的键，这个是必须字段</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>怎么判断是不是同一个位置：</p><p>rack&#x3D;rack1   使用rack的键是同一个位置</p><p>row&#x3D;row1     使用row的键是同一个位置</p><p>labelSelector需要选则一组资源，那么这组资源是在哪个名称空间中呢，通过namespace指定，如果不指定namespaces，那么就是当前创建pod的名称空间 </p><p><img src="/./photo/wps1-1667910193800-1.jpg" alt="wps1-1667910193800-1"> </p><h5 id="3-5-1-pod亲和性-硬策略"><a href="#3-5-1-pod亲和性-硬策略" class="headerlink" title="3.5.1 pod亲和性+硬策略"></a>3.5.1 pod亲和性+硬策略</h5><p>定义两个pod，第一个pod做为基准，第二个pod跟着它走</p><p>查看默认名称空间有哪些pod，把看到的pod删除，让默认名称空间没有pod</p><p>[root@master1 pod-2]# kubectl get pods</p><p>[root@master1 ~]# cat pod-required-affinity-demo-1.yaml </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>first  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app2</span><span class="token punctuation">:</span> myapp2    <span class="token key atrule">titer</span><span class="token punctuation">:</span> frontend<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/ikubernetes/myapp<span class="token punctuation">:</span>v1    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[root@master1 ]# kubectl apply -f pod-required-affinity-demo-1.yaml</p><p>现在开始创建第二个damo文件</p><p>[root@master1 ~]# cat pod-required-affinity-demo-2.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>second  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app2</span><span class="token punctuation">:</span> backup    <span class="token key atrule">titer</span><span class="token punctuation">:</span> db<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/library/busybox<span class="token punctuation">:</span><span class="token number">1.28</span>    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"sleep 3600"</span><span class="token punctuation">]</span>  <span class="token key atrule">affinity</span><span class="token punctuation">:</span>    <span class="token key atrule">podAffinity</span><span class="token punctuation">:</span>      <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">labelSelector</span><span class="token punctuation">:</span>          <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span><span class="token key atrule">key</span><span class="token punctuation">:</span> app2<span class="token punctuation">,</span><span class="token key atrule">operator</span><span class="token punctuation">:</span> In<span class="token punctuation">,</span><span class="token key atrule">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"myapp2"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>          <span class="token comment">#- key: app2</span>          <span class="token comment">#  operator: In</span>          <span class="token comment">#  values: </span>          <span class="token comment">#  - myapp2</span>        <span class="token key atrule">topologyKey</span><span class="token punctuation">:</span> kubernetes.io/hostname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面表示创建的pod必须与拥有app&#x3D;myapp标签的pod在一个节点上</p><p>[root@master1 ~]# kubectl apply -f pod-required-affinity-demo-2.yaml </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -owide</span>NAME         READY   STATUS    RESTARTS   AGE     IP              NODE    NOMINATED NODE   READINESS GATESpod-first    <span class="token number">1</span>/1     Running   <span class="token number">0</span>          9m38s   <span class="token number">10.224</span>.104.14   node2   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>pod-second   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          44s     <span class="token number">10.224</span>.104.15   node2   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面说明第一个pod调度到哪，第二个pod也调度到哪，这就是pod节点亲和性</p><p>[root@master1 ~]# kubectl delete -f pod-required-affinity-demo-1.yaml</p><p>[root@master1 ~]# kubectl delete -f pod-required-affinity-demo-2.yaml</p><h5 id="3-5-2-pod反亲和性-硬策略"><a href="#3-5-2-pod反亲和性-硬策略" class="headerlink" title="3.5.2 pod反亲和性+硬策略"></a>3.5.2 pod反亲和性+硬策略</h5><p>定义两个pod，第一个pod做为基准，第二个pod跟它调度节点相反</p><p>[root@master1 ~]# cat pod-required-anti-affinity-demo-1.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>first  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app1</span><span class="token punctuation">:</span> myapp1    <span class="token key atrule">titer</span><span class="token punctuation">:</span> frontend<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/ikubernetes/myapp<span class="token punctuation">:</span>v1    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[root@master1 ~]# kubectl apply -f  pod-required-anti-affinity-demo-1.yaml</p><p>开始创建第二个Pod文件 </p><p>[root@master1 ~]# cat pod-required-anti-affinity-demo-2.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>second  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app2</span><span class="token punctuation">:</span> backup    <span class="token key atrule">titer</span><span class="token punctuation">:</span> db<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/library/busybox<span class="token punctuation">:</span><span class="token number">1.28</span>    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"sleep 3600"</span><span class="token punctuation">]</span>  <span class="token key atrule">affinity</span><span class="token punctuation">:</span>    <span class="token key atrule">podAntiAffinity</span><span class="token punctuation">:</span>      <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">labelSelector</span><span class="token punctuation">:</span>          <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span><span class="token key atrule">key</span><span class="token punctuation">:</span> app1<span class="token punctuation">,</span><span class="token key atrule">operator</span><span class="token punctuation">:</span> In<span class="token punctuation">,</span><span class="token key atrule">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"myapp1"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">topologyKey</span><span class="token punctuation">:</span> kubernetes.io/hostname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[root@master1 ~]# kubectl apply -f pod-required-anti-affinity-demo-2.yaml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -owide # 显示两个pod不在一个node节点上，这就是pod节点反亲和性</span>NAME         READY   STATUS    RESTARTS   AGE   IP               NODE    NOMINATED NODE   READINESS GATESpod-first    <span class="token number">1</span>/1     Running   <span class="token number">0</span>          7m    <span class="token number">10.224</span>.104.17    node2   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>pod-second   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3s    <span class="token number">10.224</span>.166.140   node1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[root@master1 ~]# kubectl delete -f pod-required-anti-affinity-demo-1.yaml</p><p>[root@master1 ~]# kubectl delete -f pod-required-anti-affinity-demo-2.yaml</p><h5 id="3-5-3-域和匹配方式"><a href="#3-5-3-域和匹配方式" class="headerlink" title="3.5.3 域和匹配方式"></a>3.5.3 域和匹配方式</h5><p>在上面的诸多示例中，为了方便：</p><ul><li>域都是使用的是 kubernetes.io&#x2F;hostname</li><li>并且都是使用的 matchExpressions</li></ul><p>关于第一个问题，实际上K8S 有内置三种域的 key，分别是 <code>kubernetes.io/hostname</code>和 <code>topology.kubernetes.io/region</code> 和 <code>topology.kubernetes.io/zone</code>，最常用的就是 <code>kubernetes.io/hostname</code> ，大家可根据自身需求进行选择。</p><p>通常在节点初始化的时候，controller-manager 就会为节点打上许多 label，比如 <code>kubernetes.io/hostname</code> 表示节点的 hostname 来区分节点；另外，在云厂商提供的 k8s 服务，或者使用 cloud-controller-manager 的自建集群，通常还会给节点打上 <code>failure-domain.beta.kubernetes.io/zone</code> 和 <code>failure-domain.beta.kubernetes.io/region</code> 以区分节点所在可用区和所在地域，但自 v1.17 开始将会改名成 <code>topology.kubernetes.io/zone</code> 和 <code>topology.kubernetes.io/region</code>,叫拓扑感知服务路由</p><p>关于第二个问题，上面使用 matchExpressions 是更通用、更灵活的方式，因为 matchExpressions 可以利用操作符（operator）做更多复杂的判断</p><p>下面是操作的可选项及其含义：</p><ul><li>In：label的值在某个列表中</li><li>NotIn：label的值不在某个列表中</li><li>Gt：label的值大于某个值</li><li>Lt：label的值小于某个值</li><li>Exists：某个label存在</li><li>DoesNotExist：某个label 存在</li></ul><p>不同调度器支持的操作符不太一样，可参考下面表格</p><p>若只是单纯的 security&#x3D;S1，可以直接使用 matchLabels ，书写更加快捷，也更容易理解</p><p>因此下面两种方法在效果上是等价的</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 第一种写法：使用 matchExpressions</span>      <span class="token key atrule">affinity</span><span class="token punctuation">:</span>        <span class="token key atrule">podAffinity</span><span class="token punctuation">:</span>          <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>  <span class="token comment"># 硬策略</span>            <span class="token key atrule">labelSelector</span><span class="token punctuation">:</span>              <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> security                <span class="token key atrule">operator</span><span class="token punctuation">:</span> In                <span class="token key atrule">values</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> S1          <span class="token key atrule">topologyKey</span><span class="token punctuation">:</span> <span class="token string">"kubernetes.io/hostname"</span><span class="token comment"># 第二种写法：使用 matchLabels</span>      <span class="token key atrule">affinity</span><span class="token punctuation">:</span>        <span class="token key atrule">podAffinity</span><span class="token punctuation">:</span>          <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>  <span class="token comment"># 硬策略</span>            <span class="token key atrule">labelSelector</span><span class="token punctuation">:</span>              <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>                <span class="token key atrule">security</span><span class="token punctuation">:</span> S1          <span class="token key atrule">topologyKey</span><span class="token punctuation">:</span> <span class="token string">"kubernetes.io/hostname"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>换一个topologykey</p><p>[root@master1 ~]# kubectl label nodes  node2  zone&#x3D;foo</p><p>[root@master1 ~]# kubectl label nodes  node1  zone&#x3D;foo </p><p>[root@master1]# cat pod-first-required-anti-affinity-demo-1.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>first  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app3</span><span class="token punctuation">:</span> myapp3    <span class="token key atrule">tier</span><span class="token punctuation">:</span> frontend<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/ikubernetes/myapp<span class="token punctuation">:</span>v1    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[root@master1 affinity]# kubectl apply -f pod-first-required-anti-affinity-demo-1.yaml</p><p>[root@master1]# cat pod-second-required-anti-affinity-demo-1.yaml </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>second  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> backend    <span class="token key atrule">tier</span><span class="token punctuation">:</span> db<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span>latest    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"sleep 3600"</span><span class="token punctuation">]</span>  <span class="token key atrule">affinity</span><span class="token punctuation">:</span>    <span class="token key atrule">podAntiAffinity</span><span class="token punctuation">:</span>      <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">labelSelector</span><span class="token punctuation">:</span>          <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span><span class="token key atrule">key</span><span class="token punctuation">:</span> app3 <span class="token punctuation">,</span><span class="token key atrule">operator</span><span class="token punctuation">:</span> In<span class="token punctuation">,</span> <span class="token key atrule">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"myapp3"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">topologyKey</span><span class="token punctuation">:</span>  zone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[root@master1 ~]# kubectl apply -f pod-second-required-anti-affinity-demo-1.yaml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -owide</span>NAME         READY   STATUS    RESTARTS   AGE     IP              NODE     NOMINATED NODE   READINESS GATESpod-first    <span class="token number">1</span>/1     Running   <span class="token number">0</span>          6m12s   <span class="token number">10.224</span>.104.19   node2    <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>pod-second   <span class="token number">0</span>/1     Pending   <span class="token number">0</span>          60s     <span class="token operator">&lt;</span>none<span class="token operator">></span>          <span class="token operator">&lt;</span>none<span class="token operator">></span>   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[root@master1]# kubectl delete -f pod-first-required-anti-affinity-demo-1.yaml </p><p>[root@master1]# kubectl delete -f pod-second-required-anti-affinity-demo-1.yaml</p><p>[root@master1 ~]#  kubectl label nodes  node1  zone-</p><p>[root@master1 ~]#  kubectl label nodes  node2  zone-</p><p>第二个pod是pending，因为两个节点是同一个位置，现在没有不是同一个位置的了，而且我们要求反亲和性，所以就会处于pending状态，如果在反亲和性这个位置把required改成preferred，那么也会运行。</p><p>podaffinity：pod节点亲和性，pod倾向于哪个pod</p><p>poduntiaffinity:pod反亲和性</p><p>nodeaffinity：node节点亲和性，pod倾向于哪个node</p><h3 id="四、污点、容忍度"><a href="#四、污点、容忍度" class="headerlink" title="四、污点、容忍度"></a>四、污点、容忍度</h3><h4 id="4-1-污点与标签区别"><a href="#4-1-污点与标签区别" class="headerlink" title="4.1 污点与标签区别"></a>4.1 污点与标签区别</h4><p>污点与标签有什么不同呢？这是我们在学习污点时首先要搞清楚的问题。</p><p>由于标签和污点工作原理的不同，他们的适用场景也不一样。</p><p><strong>标签</strong>通常用于为Pod指定分组，规定了Pod只能调度到这些分组里的node中，这是一种强制的做法。</p><p><strong>污点</strong>通常用于将Node设置为专用节点，默认情况下普通Pod是无法调度过来，仅当你在Pod中指定了对应的容忍度才能调度。</p><p>给了节点选择的主动权，我们给节点打一个污点，不容忍的pod就运行不上来，污点就是定义在节点上的键值属性数据，可以定决定拒绝那些pod；</p><p><strong>taints</strong>是键值数据，用在节点上，定义污点；</p><p><strong>tolerations</strong>是键值数据，用在pod上，定义容忍度，能容忍哪些污点</p><p>pod亲和性是pod属性；但是污点是节点的属性，污点定义在k8s集群的节点上的一个字段</p><h4 id="4-2-容忍度与污点"><a href="#4-2-容忍度与污点" class="headerlink" title="4.2 容忍度与污点"></a>4.2 容忍度与污点</h4><p>污点也是打在Node上，可以理解为对外公开自己的“缺点”（并非真的缺点），想调度到我这边的，请明示说出你可以容忍我的缺点的，不然是调度不过来的。</p><p>使用如下命令为 worker02 打上污点，而worker01却没有任何污点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl taint nodes worker02 <span class="token assign-left variable">gpu</span><span class="token operator">=</span>true:NoSchedule<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正常你创建的Pod，没有进行特殊的配置，是无法调度到worker02的，只能调度到worker01，即使你使用了nodeSelector</p><p><img src="/./photo/640.png"></p><p>只有你在Po 上加上了如下的容忍度（在 <code>.spec</code> 下），才能<strong>有可能地</strong>创建到worker02上</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tolerations</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"gpu"</span>  <span class="token key atrule">operator</span><span class="token punctuation">:</span> <span class="token string">"Equal"</span>  <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"true"</span>  <span class="token key atrule">effect</span><span class="token punctuation">:</span> <span class="token string">"NoSchedule"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>千万要注意的是，上面说的是有可能，而不是一定。</p><p>如果要标准地调度到 gpu 的机器上，还要配合前面的–如何打标签？-</p><ul><li>标签：实现精度地调度的需求</li><li>污点：避免产生不必要地浪费</li></ul><p><img src="/./photo/640-1668001890512-1.png" alt="图片"></p><p>上面节点上的污点的，我再翻译一下，意思是该机器上有 GPU，没有指定需要 GPU 的容忍度 的 Pod ，不能调度过来。</p><p>如果不使用 GPU 的 Pod 也创建到有 GPU 的节点上，那就是浪费资源，这是不能理解也不能允许的。</p><p>而后面的容忍度，意思是，我可以调度到有 gpu 的机器上，如果没有指定这个配置，就无法调度到 GPU 的机器上。</p><p>如果要删除原有的污点，可以在上面添加污点的命令最后加个减号 <code>-</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl taint nodes worker02 <span class="token assign-left variable">gpu</span><span class="token operator">=</span>true:NoSchedule-<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-3-容忍度的配置"><a href="#4-3-容忍度的配置" class="headerlink" title="4.3 容忍度的配置"></a>4.3 容忍度的配置</h4><p>容忍度，由几个关键字段组成：</p><ul><li>key：键（必填）</li><li>value：值，当operator为Equal，value必填，当operator为 Exists，value就不用填写</li><li>operator：操作，可以为 Exists （存在即可匹配）或者Equal（value必须与相等才算匹配）</li><li>effect：影响，有三个选项：NoSchedule、PreferNoSchedule、NoExecute</li></ul><p>其中 effect 比较难理解，这边挑出来专门说一下，要理解effect，就要理解容忍度与污点的过滤原理。</p><p>简单来说，一个Node上可以设置多个污点，一个Pod也可以设置多个容忍度。</p><p>Kubernetes处理多个污点和容忍度的过程就像一个过滤器：从一个节点的所有污点开始遍历，过滤掉那些Pod中存在与之相匹配的容忍度的污点。余下未被过滤的污点的effect值决定了Pod是否会被分配到该节点，特别是以下情况：</p><ul><li>如果未被过滤的污点中存在至少一个 effect 值为 NoSchedule 的污点， 则 Kubernetes 不会将 Pod 分配到该节点。</li><li>如果未被过滤的污点中不存在 effect 值为 NoSchedule 的污点， 但是存在 effect 值为 PreferNoSchedule 的污点， 则 Kubernetes 会尝试不将Pod分配到该节点。</li><li>如果未被过滤的污点中存在至少一个 effect 值为 NoExecute 的污点， 则 Kubernetes 不会将 Pod 分配到该节点（如果 Pod 还未在节点上运行）， 或者将 Pod 从该节点驱逐（如果 Pod 已经在节点上运行）。</li></ul><p>taints的effect用来定义对pod对象的排斥等级（效果）：</p><ul><li>NoSchedule：表示k8s将不会将Pod调度到具有该污点的Node上</li></ul><p>仅影响pod调度过程，当pod能容忍这个节点污点，就可以调度到当前节点，后来这个节点的污点改了，加了一个新的污点，使得之前调度的pod不能容忍了，那这个pod会怎么处理，对现存的pod对象不产生影响</p><ul><li>NoExecute：表示k8s将不会将Pod调度到具有该污点的Node上，同时会将Node上已经存在的Pod驱逐出去</li></ul><p>既影响调度过程，又影响现存的pod对象，如果现存的pod不能容忍节点后来加的污点，这个pod就会被驱逐</p><ul><li>PreferNoSchedule：表示k8s将尽量避免将Pod调度到具有该污点的Node上</li></ul><p>最好不，也可以，是NoSchedule的柔性版本</p><h4 id="4-4-污点的原生用途"><a href="#4-4-污点的原生用途" class="headerlink" title="4.4 污点的原生用途"></a>4.4 污点的原生用途</h4><p>在原生的kubernetes中是如何使用污点的呢？</p><p>在kubernetes的每个集群节点上，都有一个kubelet服务，它会监控集群节点的CPU、内存、磁盘空间和文件系统的inode等资源。</p><p>当这些资源中的一个或者多个达到特定的消耗水平， kubelet会主动给节点打上一个或者多个污点标记，这些标记的effect为 <strong>NoExecute</strong></p><p>比如内存比较紧张的话，会打上 node.kubernetes.io&#x2F;memory-pressure</p><p>比如磁盘比较紧张的话，会打上 node.kubernetes.io&#x2F;disk-pressure</p><p>比如 pid 比较紧张的话，会打上 node.kubernetes.io&#x2F;pid-pressure</p><p>而如果该节点上，已有一些 Pod 在运行，并且这些 Pod 没有配置以上三种对应的容忍度，则kubelet会开始驱逐的流程，一个一个的驱逐，直到节点不再有存在资源压力为止，才会清除污点，结束驱逐。</p><p>通常还会带上一个<code>tolerationSeconds</code>，它意思是在污点出现后，Pod还可以正常工作多少时间，也就是延迟多久再进行驱逐。</p><p>除了以上污点之外，还有其他常见的</p><ul><li>node.kubernetes.io&#x2F;not-ready：节点未准备好。这相当于节点状态 Ready 的值为 “False”</li><li>node.kubernetes.io&#x2F;unreachable：节点控制器访问不到节点. 这相当于节点状态 Ready 的值为 “Unknown”。</li><li>node.kubernetes.io&#x2F;network-unavailable：节点网络不可用。</li><li>node.kubernetes.io&#x2F;unschedulable: 节点不可调度。</li></ul><p>而这些污点的 effect 通常为<strong>NoSchedule</strong>，以防新的Pod调度过来，却无法正常工作。</p><h4 id="4-5-实验操作"><a href="#4-5-实验操作" class="headerlink" title="4.5 实验操作"></a>4.5 实验操作</h4><p>查看kube-system名称空间上运行哪些pod</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -n kube-system -owide</span>NAME                                       READY   STATUS    RESTARTS   AGE     IP              NODE      NOMINATED NODE   READINESS GATEScalico-kube-controllers-6744f6b6d5-nnblc   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          7d23h   <span class="token number">10.224</span>.104.1    node2     <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>calico-node-22g7q                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          7d23h   <span class="token number">10.10</span>.30.182    node2     <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>calico-node-fvp5g                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          7d23h   <span class="token number">10.10</span>.30.181    node1     <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>calico-node-wqwwg                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          7d23h   <span class="token number">10.10</span>.30.180    master1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>coredns-7f8cbcb969-2r662                   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          8d      <span class="token number">10.224</span>.137.65   master1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>coredns-7f8cbcb969-kpgsv                   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          8d      <span class="token number">10.224</span>.137.66   master1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>etcd-master1                               <span class="token number">1</span>/1     Running   <span class="token number">0</span>          8d      <span class="token number">10.10</span>.30.180    master1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-apiserver-master1                     <span class="token number">1</span>/1     Running   <span class="token number">0</span>          8d      <span class="token number">10.10</span>.30.180    master1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-controller-manager-master1            <span class="token number">1</span>/1     Running   <span class="token number">0</span>          8d      <span class="token number">10.10</span>.30.180    master1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-proxy-7vjk5                           <span class="token number">1</span>/1     Running   <span class="token number">0</span>          7d23h   <span class="token number">10.10</span>.30.182    node2     <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-proxy-mfpcg                           <span class="token number">1</span>/1     Running   <span class="token number">0</span>          8d      <span class="token number">10.10</span>.30.180    master1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-proxy-pv87q                           <span class="token number">1</span>/1     Running   <span class="token number">0</span>          7d23h   <span class="token number">10.10</span>.30.181    node1     <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-scheduler-master1                     <span class="token number">1</span>/1     Running   <span class="token number">0</span>          8d      <span class="token number">10.10</span>.30.180    master1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们现在查看一下master节点的污点容忍度</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl describe nodes master1|grep Taint</span>Taints:             node-role.kubernetes.io/control-plane:NoSchedule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面可以看到master这个节点的污点是Noschedule，所以我们创建的pod都不会调度到master上，因为我们创建的pod没有容忍度</p><p>我们在来看apiserver这个pod,可以看到这个pod的容忍度是NoExecute，则可以调度到master1上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl describe pods kube-apiserver-master1 -n kube-system | grep -i tolerations</span>Tolerations:       :NoExecute <span class="token assign-left variable">op</span><span class="token operator">=</span>Exists<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>一个容忍度和一个污点相“匹配”是指它们有一样的键名和效果，并且：</p><ul><li>如果 <code>operator</code> 是 <code>Exists</code> （此时容忍度不能指定 <code>value</code>）</li><li>如果 <code>operator</code> 是 <code>Equal</code> ，则它们的 <code>value</code> 应该相等</li><li>如果 <code>operator</code> 不指定，则默认为Equal</li></ul><blockquote><p><strong>注意：</strong></p><ul><li>如果一个容忍度的 <code>key</code> 为空且operator为 <code>Exists</code>， 表示这个容忍度与任意的key 、value 和 effect 都匹配，即这个容忍度能容忍任意 taint。</li><li>如果 <code>effect</code> 为空，则可以与所有键名 <code>key1</code> 的效果相匹配。</li></ul></blockquote></blockquote><p>管理节点污点</p><p>[root@master1]# kubectl taint –help</p><p>例1：把node2当成是生产环境专用的，其他node是测试的</p><p>[root@master1 ~]# <code>kubectl taint node node2 node-type=production:NoSchedule</code></p><p>给node2打污点，pod如果不能容忍就不会调度过来</p><p>编写一个taint文件，内容如下：</p><p>[root@master1 ~]# cat pod-taint.yaml </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>taint  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">tomcat</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">-</span>pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> taint<span class="token punctuation">-</span>pod    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/xianchao/tomcat<span class="token punctuation">-</span>8.5<span class="token punctuation">-</span>jre8<span class="token punctuation">:</span>v1    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[root@master1 ~]# kubectl apply -f pod-taint.yaml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl taint node node2 node-type=production:NoSchedule</span>node/node2 tainted<span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -owide</span>NAME        READY   STATUS    RESTARTS   AGE   IP               NODE    NOMINATED NODE   READINESS GATESpod-taint   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          34s   <span class="token number">10.224</span>.166.141   node1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到都被调度到node1上了，因为node2这个节点打了污点，而我们在创建pod的时候没有容忍度，所以node2上不会有pod调度上去的</p><p>例2：给node1也打上污点</p><p>[root@master1 ~]#kubectl taint node node1 node-type&#x3D;dev:NoExecute</p><p>[root@master1 ~]#kubectl get pods -o wide </p><p>显示如下：因为我们没有给taint-pod定义任何容忍度，另外我们给node1打的污点是NoExecute，所以它会把原节点上运行的pod给驱逐出去</p><p><img src="/./photo/image-20221109225952606.png" alt="image-20221109225952606"></p><p>上面可以看到已经存在的pod节点都被撵走了</p><p>我们现在再创建一个pod，来定义一个容忍度</p><p>[root@master1 ~]# cat pod-demo-1.yaml </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp<span class="token punctuation">-</span>deploy  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp    <span class="token key atrule">release</span><span class="token punctuation">:</span> canary<span class="token key atrule">spec</span><span class="token punctuation">:</span>   <span class="token key atrule">containers</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp     <span class="token key atrule">image</span><span class="token punctuation">:</span> ikubernetes/myapp<span class="token punctuation">:</span>v1     <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent     <span class="token key atrule">ports</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http       <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>   <span class="token key atrule">tolerations</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"node-type"</span>     <span class="token key atrule">operator</span><span class="token punctuation">:</span> <span class="token string">"Equal"</span>  <span class="token comment"># 类似=，需要完全匹配</span>     <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"production"</span>     <span class="token key atrule">effect</span><span class="token punctuation">:</span> <span class="token string">"NoExecute"</span>     <span class="token key atrule">tolerationSeconds</span><span class="token punctuation">:</span> <span class="token number">3600</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[root@master1 ~]# kubectl apply -f pod-demo-1.yaml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -owide</span>NAME           READY   STATUS    RESTARTS   AGE   IP       NODE     NOMINATED NODE   READINESS GATESmyapp-deploy   <span class="token number">0</span>/1     Pending   <span class="token number">0</span>          44s   <span class="token operator">&lt;</span>none<span class="token operator">></span>   <span class="token operator">&lt;</span>none<span class="token operator">></span>   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>还是显示pending，因为我们使用的是equal（等值匹配），所以key和value，effect必须和node节点定义的污点完全匹配才可以，把上面配置effect: “NoExecute”变成effect: “NoSchedule”成；tolerationSeconds: 3600这行去掉</p><p>删除这个pod，修改后重新生成</p><p>[root@master1 ~]# kubectl delete -f pod-demo-1.yaml</p><p>[root@master1 ~]# kubectl apply -f pod-demo-1.yaml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -owide</span>NAME           READY   STATUS    RESTARTS   AGE   IP              NODE    NOMINATED NODE   READINESS GATESmyapp-deploy   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          4s    <span class="token number">10.224</span>.104.21   node2   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面就可以调度到node2上了，因为在pod中定义的容忍度能容忍node节点上的污点</p><p>例3：再次修改</p><p>修改如下部分：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tolerations</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"node-type"</span>  <span class="token key atrule">operator</span><span class="token punctuation">:</span> <span class="token string">"Exists"</span>  <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">""</span>  <span class="token comment"># 可以不写</span>  <span class="token key atrule">effect</span><span class="token punctuation">:</span> <span class="token string">"NoSchedule"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只要对应的键是存在的，exists，其值被自动定义成通配符</p><p>[root@master1 ~]# kubectl delete -f pod-demo-1.yaml</p><p>[root@master1 ~]# kubectl apply -f pod-demo-1.yaml</p><p>发现还是调度到node2上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -owide</span>NAME           READY   STATUS    RESTARTS   AGE   IP              NODE    NOMINATED NODE   READINESS GATESmyapp-deploy   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3s    <span class="token number">10.224</span>.104.22   node2   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再次修改：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tolerations</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"node-type"</span>  <span class="token key atrule">operator</span><span class="token punctuation">:</span> <span class="token string">"Exists"</span>  <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">""</span>   <span class="token comment"># 可以不写</span>  <span class="token key atrule">effect</span><span class="token punctuation">:</span> <span class="token string">""</span>  <span class="token comment"># 可以不写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有一个node-type的键，不管值是什么，不管是什么效果，都能容忍</p><p>[root@master1 ~]# kubectl delete -f pod-demo-1.yaml</p><p>[root@master1 ~]# kubectl apply -f pod-demo-1.yaml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -owide</span>NAME           READY   STATUS    RESTARTS   AGE   IP               NODE    NOMINATED NODE   READINESS GATESmyapp-deploy   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          4s    <span class="token number">10.224</span>.166.142   node1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到node2和node1节点上都有可能有pod被调度</p><p>删除污点：</p><p>[root@master1 taint]# <code>kubectl taint nodes node1 node-type:NoExecute-</code></p><p>[root@master1 taint]# <code>kubectl taint nodes node2 node-type-</code></p><h3 id="五、Pod常见的状态和重启策略"><a href="#五、Pod常见的状态和重启策略" class="headerlink" title="五、Pod常见的状态和重启策略"></a>五、Pod常见的状态和重启策略</h3><h4 id="5-1-常见的pod状态"><a href="#5-1-常见的pod状态" class="headerlink" title="5.1 常见的pod状态"></a>5.1 常见的pod状态</h4><p><img src="/./photo/wps2-1667910193800-2.jpg" alt="img"> </p><p>pod常见的状态：</p><p><strong>第一阶段：</strong></p><p>挂起（Pending）：</p><p>​1、正在创建Pod但是Pod中的容器还没有全部被创建完成，处于此状态的Pod应该检查Pod依赖的存储是否有权限挂载、镜像是否可以下载、调度是否正常等</p><p>​2、我们在请求创建pod时，条件不满足，调度没有完成，没有任何一个节点能满足调度条件，已经创建了pod但是没有适合它运行的节点叫做挂起，调度没有完成。 </p><p>失败（Failed）：Pod 中的所有容器都已终止了，并且至少有一个容器是因为失败终止。也就是说，容器以非0状态退出或者被系统终止。</p><p>未知（Unknown）：未知状态，所谓pod是什么状态是apiserver和运行在pod节点的kubelet进行通信获取状态信息的，如果节点之上的kubelet本身出故障，那么apiserver就连不上kubelet，得不到信息了，就会看Unknown，通常是由于与pod所在的node节点通信错误。</p><p>Error 状态：Pod 启动过程中发生了错误</p><p>成功（Succeeded）：Pod中的所有容器都被成功终止，即pod里所有的containers均已terminated。 </p><p><strong>第二阶段：</strong></p><p>Unschedulable：Pod不能被调度， scheduler没有匹配到合适的node节点</p><p>PodScheduled：pod正处于调度中，在scheduler刚开始调度的时候，还没有将pod分配到指定的node，在筛选出合适的节点后就会更新etcd数据，将pod分配到指定的node</p><p>Initialized：所有pod中的初始化容器已经完成了</p><p>ImagePullBackOff：Pod所在的node节点下载镜像失败</p><p>Running：Pod内部的容器已经被创建并且启动。</p><p>扩展：还有其他状态，如下：</p><p>Evicted状态：出现这种情况，多见于系统内存或硬盘资源不足，可df-h查看docker存储所在目录的资源使用情况，如果百分比大于85%，就要及时清理下资源，尤其是一些大文件、docker镜像。</p><p>CrashLoopBackOff：容器曾经启动了，但可能又异常退出了</p><h4 id="5-2-pod重启策略"><a href="#5-2-pod重启策略" class="headerlink" title="5.2 pod重启策略"></a>5.2 pod重启策略</h4><p>Pod的重启策略（RestartPolicy）应用于Pod内的所有容器，当某个容器异常退出或者健康检查失败时，kubelet将根据重启策略来进行相应的操作。</p><p>Pod的spec中包含一个restartPolicy字段，其可能取值包括Always、OnFailure 和Never。默认值是Always。</p><ul><li><p>Always：只要容器异常退出，kubelet就会自动重启该容器。（这个是默认的重启策略）</p></li><li><p>OnFailure：当容器终止运行且退出码不为0时，由kubelet自动重启该容器。</p></li><li><p>Never：不论容器运行状态如何，kubelet都不会重启该容器。</p></li></ul><h4 id="5-3-测试Always重启策略"><a href="#5-3-测试Always重启策略" class="headerlink" title="5.3 测试Always重启策略"></a>5.3 测试Always重启策略</h4><p>[root@master1]# cat pod.yaml </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>pod  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Always  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span>  tomcat<span class="token punctuation">-</span>pod<span class="token punctuation">-</span>java    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> xianchao/tomcat<span class="token punctuation">-</span>8.5<span class="token punctuation">-</span>jre8<span class="token punctuation">:</span>v1    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[root@master1]# kubectl apply -f pod.yaml</p><p>1）正常停止容器里的tomcat服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl exec -it demo-pod -- /bin/bash</span>bash-4.4<span class="token comment"># /usr/local/tomcat/bin/shutdown.sh</span>Using CATALINA_BASE:   /usr/local/tomcatUsing CATALINA_HOME:   /usr/local/tomcatUsing CATALINA_TMPDIR: /usr/local/tomcat/tempUsing JRE_HOME:        /usr/lib/jvm/java-1.8-openjdk/jreUsing CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jarbash-4.4<span class="token comment"># command terminated with exit code 137</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看pod状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -w</span>NAME       READY   STATUS    RESTARTS     AGEdemo-pod   <span class="token number">1</span>/1     Running   <span class="token number">1</span> <span class="token punctuation">(</span>4s ago<span class="token punctuation">)</span>   79sdemo-pod   <span class="token number">0</span>/1     Completed   <span class="token number">1</span> <span class="token punctuation">(</span>35s ago<span class="token punctuation">)</span>   110sdemo-pod   <span class="token number">0</span>/1     CrashLoopBackOff   <span class="token number">1</span> <span class="token punctuation">(</span>15s ago<span class="token punctuation">)</span>   2m5sdemo-pod   <span class="token number">1</span>/1     Running            <span class="token number">2</span> <span class="token punctuation">(</span>16s ago<span class="token punctuation">)</span>   2m6s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现正常停止容器里的tomcat服务，容器重启了一次，pod又恢复正常了</p><p>2）非正常停止容器里的tomcat服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl exec -it demo-pod -- /bin/bash</span>bash-4.4<span class="token comment"># kill 1</span>bash-4.4<span class="token comment"># command terminated with exit code 137</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个时候查看pod运行状态</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -w</span>NAME       READY   STATUS    RESTARTS        AGEdemo-pod   <span class="token number">1</span>/1     Running   <span class="token number">2</span> <span class="token punctuation">(</span>2m25s ago<span class="token punctuation">)</span>   4m15sdemo-pod   <span class="token number">0</span>/1     Error     <span class="token number">2</span> <span class="token punctuation">(</span>2m37s ago<span class="token punctuation">)</span>   4m27sdemo-pod   <span class="token number">0</span>/1     CrashLoopBackOff   <span class="token number">2</span> <span class="token punctuation">(</span>15s ago<span class="token punctuation">)</span>     4m42sdemo-pod   <span class="token number">1</span>/1     Running            <span class="token number">3</span> <span class="token punctuation">(</span>29s ago<span class="token punctuation">)</span>     4m56s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面可以看到容器终止了，并且又重启一次，重启次数增加了一次</p><h4 id="5-4-测试never重启策略"><a href="#5-4-测试never重启策略" class="headerlink" title="5.4 测试never重启策略"></a>5.4 测试never重启策略</h4><p>[root@master1 ~]# vim pod.yaml </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>pod  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Never  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span>  tomcat<span class="token punctuation">-</span>pod<span class="token punctuation">-</span>java    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> xianchao/tomcat<span class="token punctuation">-</span>8.5<span class="token punctuation">-</span>jre8<span class="token punctuation">:</span>v1    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[root@master1]# kubectl apply -f pod.yaml</p><p>1）正常停止容器里的tomcat服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl exec -it demo-pod -- /bin/bash</span>bash-4.4<span class="token comment"># /usr/local/tomcat/bin/shutdown.sh</span>Using CATALINA_BASE:   /usr/local/tomcatUsing CATALINA_HOME:   /usr/local/tomcatUsing CATALINA_TMPDIR: /usr/local/tomcat/tempUsing JRE_HOME:        /usr/lib/jvm/java-1.8-openjdk/jreUsing CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jarbash-4.4<span class="token comment"># command terminated with exit code 137</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看pod状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -w</span>NAME       READY   STATUS    RESTARTS   AGEdemo-pod   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          16sdemo-pod   <span class="token number">0</span>/1     Completed   <span class="token number">0</span>          20sdemo-pod   <span class="token number">0</span>/1     Completed   <span class="token number">0</span>          21sdemo-pod   <span class="token number">0</span>/1     Completed   <span class="token number">0</span>          22s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现正常停止容器里的tomcat服务，pod正常运行，容器没有重启</p><p>2）非正常停止容器里的tomcat服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl exec -it demo-pod -- /bin/bash</span>bash-4.4<span class="token comment"># kill 1</span>bash-4.4<span class="token comment"># command terminated with exit code 137</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再次查看pod状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -w</span>NAME       READY   STATUS    RESTARTS   AGEdemo-pod   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          4sdemo-pod   <span class="token number">0</span>/1     Error     <span class="token number">0</span>          15sdemo-pod   <span class="token number">0</span>/1     Error     <span class="token number">0</span>          16sdemo-pod   <span class="token number">0</span>/1     Error     <span class="token number">0</span>          17s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面可以看到容器状态是error，并且没有重启，这说明重启策略是never，那么pod里容器服务无论如何终止，都不会重启</p><h4 id="5-5-测试OnFailure重启策略"><a href="#5-5-测试OnFailure重启策略" class="headerlink" title="5.5 测试OnFailure重启策略"></a>5.5 测试OnFailure重启策略</h4><p>[root@master1 ~]# vim pod.yaml </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>pod  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> OnFailure  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span>  tomcat<span class="token punctuation">-</span>pod<span class="token punctuation">-</span>java    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> xianchao/tomcat<span class="token punctuation">-</span>8.5<span class="token punctuation">-</span>jre8<span class="token punctuation">:</span>v1    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[root@master1]# kubectl apply -f pod.yaml</p><p>1）正常停止容器里的tomcat服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl exec -it demo-pod -- /bin/bash</span>bash-4.4<span class="token comment"># /usr/local/tomcat/bin/shutdown.sh</span>Using CATALINA_BASE:   /usr/local/tomcatUsing CATALINA_HOME:   /usr/local/tomcatUsing CATALINA_TMPDIR: /usr/local/tomcat/tempUsing JRE_HOME:        /usr/lib/jvm/java-1.8-openjdk/jreUsing CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jarbash-4.4<span class="token comment"># command terminated with exit code 137</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看pod状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -w</span>NAME       READY   STATUS    RESTARTS   AGEdemo-pod   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          4sdemo-pod   <span class="token number">0</span>/1     Completed   <span class="token number">0</span>          12sdemo-pod   <span class="token number">0</span>/1     Completed   <span class="token number">0</span>          14s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现正常停止容器里的tomcat服务，退出码是0，pod里的容器不会重启</p><p>2）非正常停止容器里的tomcat服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl exec -it demo-pod -- /bin/bash</span>bash-4.4<span class="token comment"># kill 1</span>bash-4.4<span class="token comment"># command terminated with exit code 137</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看pod状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -w</span>NAME       READY   STATUS    RESTARTS   AGEdemo-pod   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          2sdemo-pod   <span class="token number">0</span>/1     Error     <span class="token number">0</span>          9sdemo-pod   <span class="token number">1</span>/1     Running   <span class="token number">1</span> <span class="token punctuation">(</span>2s ago<span class="token punctuation">)</span>   10sdemo-pod   <span class="token number">1</span>/1     Running   <span class="token number">1</span> <span class="token punctuation">(</span>25s ago<span class="token punctuation">)</span>   33s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面可以看到非正常停止pod里的容器，容器退出码不是0，那就会重启容器</p>]]></content>
      
      
      <categories>
          
          <category> K8S笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s标签 </tag>
            
            <tag> k8s亲和性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第2章-pod概述.md</title>
      <link href="/2023/02/12/k8s-bi-ji/di-2-zhang-pod-gai-shu-md/"/>
      <url>/2023/02/12/k8s-bi-ji/di-2-zhang-pod-gai-shu-md/</url>
      
        <content type="html"><![CDATA[<h3 id="一、k8s核心资源Pod介绍"><a href="#一、k8s核心资源Pod介绍" class="headerlink" title="一、k8s核心资源Pod介绍"></a>一、k8s核心资源Pod介绍</h3><blockquote><p>K8s官方文档：<a href="https://kubernetes.io/">https://kubernetes.io/</a></p><p>K8s中文官方文档： <a href="https://kubernetes.io/zh/">https://kubernetes.io/zh/</a></p><p>K8s Github地址：<a href="https://github.com/kubernetes/kubernetes">https://github.com/kubernetes/kubernetes</a></p><p>Pod资源对应的官方文档：<a href="https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/">https://kubernetes.io/zh-cn/docs/concepts/workloads/pods/</a></p></blockquote><h4 id="1-1-Pod是什么？"><a href="#1-1-Pod是什么？" class="headerlink" title="1.1 Pod是什么？"></a>1.1 Pod是什么？</h4><p> 官方文档：<a href="https://kubernetes.io/docs/concepts/workloads/pods/">https://kubernetes.io/docs/concepts/workloads/pods/</a></p><p> Pod是Kubernetes中的最小调度单元，k8s是通过定义一个Pod的资源，然后在Pod里面运行容器，容器需要指定一个镜像，这样就可以用来运行具体的服务。一个Pod封装一个容器（也可以封装多个容器），Pod里的容器共享存储、网络等。也就是说，应该把整个pod看作虚拟机，然后每个容器相当于运行在虚拟机的进程。</p><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/image-20221104210432157.png"></p><p>Pod是需要调度到k8s集群的工作节点来运行的，具体调度到哪个节点，是根据scheduler调度器实现的。</p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/image-20221104210627248.png" alt="image-20221104210627248" style="zoom: 80%;" /><p> 白话解释： </p><p>可以把pod看成是一个“豌豆荚”，里面有很多“豆子”（容器）。一个豌豆荚里可以有很多豆子（容器）</p><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/image-20221104210544527.png"></p><p>pod相当于一个逻辑主机–比方说我们想要部署一个tomcat应用，如果不用容器，我们可能会部署到物理机、虚拟机或者云主机上，那么出现k8s之后，我们就可以定义一个pod资源，在pod里定义一个把tomcat容器，所以pod充当的是一个逻辑主机的角色。</p><p>使用 <code>kubectl get po -o wide</code>可以查看 pod 的列表，其中 READY 列代表该 Pod 总共有 1 个容器，并且该容器已经成功启动，可以对外提供服务了</p><p><img src="/./../../../../%E7%AC%94%E8%AE%B0/Typora/K8S/photo/image-20221104210727974.png" alt="image-20221104210727974"></p><h4 id="1-2-Pod如何管理多个容器？"><a href="#1-2-Pod如何管理多个容器？" class="headerlink" title="1.2 Pod如何管理多个容器？"></a>1.2 Pod如何管理多个容器？</h4><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/image-20221104210905909.png"></p><p>Pod中可以同时运行多个容器。同一个Pod中的容器会自动的分配到同一个 node 上。同一个Pod中的容器共享资源、网络环境，它们总是被同时调度，在一个Pod中同时运行多个容器是一种比较高级的用法，只有当你的容器需要紧密配合协作的时候才考虑用这种模式。例如，你有一个容器作为web服务器运行，需要用到共享的volume，有另一个“sidecar”容器来从远端获取资源更新这些文件。 </p><p> 一些Pod有init容器和应用容器。 在应用程序容器启动之前，运行初始化容器。</p><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/image-20221104211138506.png"></p><h4 id="1-3-Pod网络"><a href="#1-3-Pod网络" class="headerlink" title="1.3 Pod网络"></a>1.3 Pod网络</h4><p>Pod是有IP地址的，假如pod不是共享物理机ip，由网络插件（calico、flannel、weave）划分的ip，每个pod都被分配唯一的IP地址</p><p>Docker容器互联的方式：</p><p>​    我们在创建新容器的时候，通过–net container参数，指定其和已经存在的某个容器共享一个Network Namespace。如下图所示，右上方黄色新创建的container，其网卡共享左边容器。因此就不会拥有自己独立的 IP，而是共享左边容器的IP 172.17.0.2,端口范围等网络资源</p><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/image-20221104211750340.png"></p><p><strong>和已经存在的none容器共享网络</strong></p><p>[root@master1 ~]#<code>docker run --name container2 --net=container:none -it --privileged=true centos</code></p><p><strong>Kubernetes中容器共享的方式</strong></p><p>在k8s中，启动Pod时，会先启动⼀个pause 的容器，然后将后续的所有容器都 “link 到这个pause 的容器，以实现⽹络共享。</p><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/image-20221104220044469.png"></p><p>实际上，这个 pause 容器，是一个很特殊的容器，它又叫 infra 容器，是每个 Pod 都会自动创建的容器，它不属于用户自定义的容器。</p><p><strong>那么这个 pause 容器有什么用呢？</strong></p><h5 id="1-3-1-pause容器作用"><a href="#1-3-1-pause容器作用" class="headerlink" title="1.3.1 pause容器作用"></a>1.3.1 pause容器作用</h5><p>一个 Pod 是由一组容器组成的，这些容器之间共享存储和网络资源，那么网络资源是如何共享的呢？</p><p>假设现在有一个 Pod，它包含两个容器（A 和 B），K8S 是通过让他们加入（join）另一个第三方容器的 network namespace 实现的共享，而这个第三方容器就是 pause 容器。</p><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/image-20221104215547061.png"></p><p>这么做的目的，其实很简单，想象一下，如果没有这样的第三方容器，会发生怎样的结果？</p><p>没有pause容器，那么 A 和 B 要共享网络，要不就是 A 加入 B 的network namespace，要嘛就是 B 加入 A 的network namespace，而无论是谁加入谁，只要network的owner退出了，该Pod里的所有其他容器网络都会立马异常，这显然是不合理的。</p><p>反过来，由于pause里只有是挂起一个容器，里面没有任何复杂的逻辑，只要不主动杀掉 Pod，pause 都会一直存活，这样一来就能保证在Pod运行期间同一 Pod 里的容器网络的稳定。</p><p>我们在同一 Pod 里所有容器里看到的网络视图，都是完全一样的，包括网络设备、IP 地址、Mac 地址等等，因为他们其实全是同一份，而这一份都来自于 Pod 第一次创建的这个 Infra container。</p><p>由于所有的业务容器都要依赖于 pause 容器，因此在Pod启动时，它总是创建的第一个容器，可以说 Pod 的生命周期就是 pause 容器的生命周期。</p><h5 id="1-3-2-init容器与应用容器"><a href="#1-3-2-init容器与应用容器" class="headerlink" title="1.3.2 init容器与应用容器"></a>1.3.2 init容器与应用容器</h5><p>init 容器和 pause 容器有相同点，也有不同点</p><ul><li>相同点在于：它们都有固定用途，是专用的特殊容器</li><li>不同点在于：init容器是用户级的容器，它是由用户来定义的，可以有多个，而 pause 容器是系统级容器，它不是由用户定义的，最多只有一个。</li></ul><p>init 容器会在应用（业务）容器启动之前运行，用来包含一些应用镜像中不存在的实用工具或安装脚本。</p><p>init 容器，从名字上来看，也能看出是的用途就是运行一些初始化任务，来保证应用容器运行环境。</p><p>这就决定了：</p><ul><li>init 容器必须先于 应用容器启动</li><li>仅当 init 容器完成后，才能运行应用容器</li><li>一个 Pod 允许有多个 init 容器，做不同的初始化任务</li></ul><p>当一个 Pod 有多个 init 容器时，这些 init 容器是顺序运行的，一个 init 容器完成之后，才会运行一个 init 容器。</p><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/640.png"></p><p>因此如果你在 kubectl get po 时加一个 <code>-w</code> 参数，就能看到 Pod 状态的变化过程</p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/640-1667567679583-3.png" alt="图片" style="zoom:80%;" /><p>在正常情况下（默认 Pod 的 <code>restartPolicy</code> 为 Never），只要有一个 init 容器运行失败，整个 Pod 便会不停地重启，直到 init 容器全部运行完成为止。</p><p>而只要一个 Pod 重启，不管init 容器之前有没有执行过，所有的 init 容器都要重新执行一遍。</p><p>init 容器与应用容器，除个别配置之外，基本一致，不用付出太多额外的学习成本。</p><p>不一样的地方有哪些呢？</p><p><strong>第一点不同</strong></p><p>定义位置不同。</p><p>应用容器定义在 Pod.Spec.Containers，是必填字段，而 init 是定义在 Pod.Spec.initContainers 中，是可选字段。</p><p><strong>第二点不同</strong></p><p>部分配置不同。</p><p>init容器没有Lifecycle actions, Readiness probes, Liveness probes 和 Startup probes，而这些应用容器都有。</p><p>另外，虽然 init 容器与应用容器是两个类别的容器，但由于属于同一个 Pod ，因此容器的名字，是不能重复的。</p><h4 id="1-4-Pod存储"><a href="#1-4-Pod存储" class="headerlink" title="1.4 Pod存储"></a>1.4 Pod存储</h4><p>创建Pod的时候可以指定挂载的存储卷。 POD中的所有容器都可以访问共享卷，允许这些容器共享数据。 Pod只要挂载持久化数据卷，Pod重启之后数据还是会存在的。</p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/wps1.jpg" alt="img" style="zoom:80%;" /><h4 id="1-5-之前学习过容器，为什么还需要Pod？"><a href="#1-5-之前学习过容器，为什么还需要Pod？" class="headerlink" title="1.5 之前学习过容器，为什么还需要Pod？"></a>1.5 之前学习过容器，为什么还需要Pod？</h4><ul><li><p>Pod是由一组紧耦合的容器组成的容器组，当然目前最流行的就是Docker、containerd、podman容器，Pod就可以作为1或者多个容器的载体。</p></li><li><p>Pod中的所用容器会被一致调度、同节点部署，并且在一个“共享环境”中运行。把Pod想成一个车：车里面好多座位，每个座位都坐不同的人，每个座位想成是一个容器，这里的“共享环境”包括以下几点：</p></li></ul><p>​1）所有容器共享一个IP地址和端口空间，意味着容器之间可以通过localhost高效访问，不能有端口冲突</p><p>​2）允许容器之间共享存储卷，通过文件系统交互信息</p><ul><li>有些容器需要紧密联系，需要一起工作。Pod提供了比容器更高层次的抽象， Pod中的所有容器使用同一个网络的namespace，即相同的IP地址和Port空间。它们可以直接用localhost通信。同样的，这些容器可以共享存储，当K8s挂载Volume到Pod上，本质上是将volume挂载到Pod中的每一个容器里。</li></ul><h4 id="1-6-代码自动发版更新"><a href="#1-6-代码自动发版更新" class="headerlink" title="1.6 代码自动发版更新"></a>1.6 代码自动发版更新</h4><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/image-20221104220754717.png" alt="image-20221104220754717"></p><p>假如生产环境部署了一个go的应用，而且部署了几百个节点，希望这个应用可以定时的同步最新的代码，以便自动升级线上环境。这时，我们不希望改动原来的go应用，可以开发一个Git代码仓库的自动同步服务，然后通过Pod的方式进行编排，并共享代码目录，就可以达到更新java应用代码的效果。</p><h4 id="1-7-收集业务日志"><a href="#1-7-收集业务日志" class="headerlink" title="1.7 收集业务日志"></a>1.7 收集业务日志</h4><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/image-20221104220834323.png" alt="image-20221104220834323" style="zoom:80%;" /><p>​某服务模块已经实现了一些核心的业务逻辑，并且稳定运行了一段时间，日志记录在了某个目录下，按照不同级别分别为 error.log、access.log、warning.log、info.log，现在希望收集这些日志并发送到统一的日志处理服务器上。</p><p>​这时我们可以修改原来的服务模块，在其中添加日志收集、发送的服务，但这样可能会影响原来服务的配置、部署方式，从而带来不必要的问题和成本，也会增加业务逻辑和基础服务的藕合度。</p><p>​如果使用Pod的方式，通过简单的编排，既可以保持原有服务逻辑、部署方式不变，又可以增加新的日志收集服务。</p><p>​而且如果我们对所有服务的日志生成有一个统一的标准，或者仅对日志收集服务稍加修改，就可以将日志收集服务和其他服务进行Pod编排，提供统一、标准的日志收集方式。</p><p>​这里的“核心业务服务”、“日志收集服务”分别是一个镜像，运行在隔离的容器环境中。</p><h4 id="1-8-Pod工作方式"><a href="#1-8-Pod工作方式" class="headerlink" title="1.8 Pod工作方式"></a>1.8 Pod工作方式</h4><p>在K8s中，所有的资源都可以使用一个yaml文件来创建，创建Pod也可以使用yaml配置文件。或者使用kubectl run在命令行创建Pod（不常用）。</p><h5 id="1-8-1-自主式pod"><a href="#1-8-1-自主式pod" class="headerlink" title="1.8.1 自主式pod"></a>1.8.1 自主式pod</h5><p>所谓的自主式Pod，就是直接定义一个Pod资源，如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># vim pod-tomcat.yaml</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">-</span>test  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> tomcat<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">-</span>java    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/xianchao/tomcat<span class="token punctuation">-</span>8.5<span class="token punctuation">-</span>jre8<span class="token punctuation">:</span>v1    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导入镜像</p><p>把xianchao-tomcat.tar.gz上传到node1和node2节点，手动解压</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># ctr -n=k8s.io images import  xianchao-tomcat.tar.gz</span><span class="token punctuation">[</span>root@node2 ~<span class="token punctuation">]</span><span class="token comment"># ctr -n=k8s.io images import  xianchao-tomcat.tar.gz</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>更新资源清单文件</p><p>[root@master1 ~]# <code>kubectl apply -f pod-tomcat.yaml</code></p><p>查看pod是否创建成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -owide -l app=tomcat</span>NAME          READY   STATUS    RESTARTS   AGE    IP               NODE    NOMINATED NODE   READINESS GATEStomcat-test   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          169m   <span class="token number">10.224</span>.166.131   node1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是自主式Pod是存在一个问题的，假如我们不小心删除了pod：</p><p>[root@master1 ~]# <code>kubectl delete pods tomcat-test</code></p><p>查看pod是否还在</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -owide -l app=tomcat</span>No resources found <span class="token keyword">in</span> default namespace.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果是空，说明pod已经被删除了</p><p>通过上面可以看到，如果直接定义一个Pod资源，那Pod被删除，就彻底被删除了，不会再创建一个新的Pod，这在生产环境还是具有非常大风险的，所以今后我们接触的Pod，都是控制器管理的。</p><p>通过上面可以看到，如果直接定义一个Pod资源，那Pod被删除，就彻底被删除了，不会再创建一个新的Pod，这在生产环境还是具有非常大风险的，所以今后我们接触的Pod，都是控制器管理的。</p><h4 id="1-9-控制器管理的Pod"><a href="#1-9-控制器管理的Pod" class="headerlink" title="1.9 控制器管理的Pod"></a>1.9 控制器管理的Pod</h4><p>常见的管理Pod的控制器：Replicaset、Deployment、Job、CronJob、Daemonset、Statefulset。</p><p>控制器管理的Pod可以确保Pod始终维持在指定的副本数运行,如通过Deployment管理Pod</p><p>解压镜像：</p><p>把xianchao-nginx.tar.gz上传到node1和node2节点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># ctr -n=k8s.io images import  xianchao-nginx.tar.gz</span><span class="token punctuation">[</span>root@node2 ~<span class="token punctuation">]</span><span class="token comment"># ctr -n=k8s.io images import  xianchao-nginx.tar.gz</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建一个资源清单文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># vim nginx-deploy.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>test  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deploy<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/xianchao/nginx<span class="token punctuation">:</span>v1        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更新资源清单文件</p><p>[root@master1 ~]#<code>kubectl apply -f nginx-deploy.yaml</code></p><p>查看Deployment</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment">#kubectl get deploy -l app=nginx-deploy</span>NAME     READY  UP-TO-DATE  AVAILABLE  AGEnginx-test    <span class="token number">2</span>/2     <span class="token number">2</span>       <span class="token number">2</span>      16s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看Replicaset</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get rs -l app=nginx</span>NAME           DESIRED  CURRENT  READY  AGEnginx-test-75c685fdb7  <span class="token number">2</span>     <span class="token number">2</span>     <span class="token number">2</span>    71s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看pod</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -owide -l app=nginx</span>NAME                         READY   STATUS    RESTARTS   AGE     IP               NODE    NOMINATED NODE   READINESS GATESnginx-test-d5cc658c5-9zhkq   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          2m39s   <span class="token number">10.224</span>.166.133   node1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>nginx-test-d5cc658c5-t2rmv   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          2m39s   <span class="token number">10.224</span>.104.3     node2   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>删除nginx-test-75c685fdb7-9s95h这个pod</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl delete pods nginx-test-75c685fdb7-9s95h</span><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -o wide -l app=nginx</span>NAME              READY  STATUS        IP             nginx-test-75c685fdb7-6d4lx   <span class="token number">1</span>/1    Running       <span class="token number">10.244</span>.102.69  nginx-test-75c685fdb7-pr8gh  <span class="token number">1</span>/1    Running       <span class="token number">10.244</span>.102.70  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现重新创建一个新的pod是nginx-test-75c685fdb7-pr8gh</p><p>通过上面可以发现通过deployment管理的pod，可以确保pod始终维持在指定副本数量</p><h3 id="二、如何基于pod运行应用"><a href="#二、如何基于pod运行应用" class="headerlink" title="二、如何基于pod运行应用"></a>二、如何基于pod运行应用</h3><h4 id="2-1-创建Pod的流程"><a href="#2-1-创建Pod的流程" class="headerlink" title="2.1 创建Pod的流程"></a>2.1 创建Pod的流程</h4><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/image-20221104225921752.png" alt="image-20221104225921752" style="zoom:80%;" /><p><code>kubectl apply -f nginx-deploy.yaml</code>-&gt;找到config文件，基于config文件指定的用户访问指定的集群，这样就找到了apiserver</p><ol><li>通过 kubectl 命令向 apiserver 提交创建pod的请求，apiserver接收到pod创建请求后，会将pod的属性信息(metadata)写入etcd。</li></ol><ol start="2"><li><p>apiserver触发watch机制准备创建pod，信息转发给调度器scheduler，调度器使用调度算法选择node，调度器将node信息给apiserver，apiserver将绑定的node信息写入etcd</p></li><li><p>apiserver又通过watch机制，调用kubelet，指定pod信息，调用容器运行时创建并启动pod内的容器。</p></li><li><p>创建完成之后反馈给kubelet, kubelet又将pod的状态信息给apiserver,apiserver又将pod的状态信息写入etcd。</p></li></ol><h4 id="2-2-通过资源清单文件创建第一个Pod"><a href="#2-2-通过资源清单文件创建第一个Pod" class="headerlink" title="2.2 通过资源清单文件创建第一个Pod"></a>2.2 通过资源清单文件创建第一个Pod</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># cat pod-first.yaml</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">-</span>test  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> tomcat<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">-</span>java    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> xianchao/tomcat<span class="token punctuation">-</span>8.5<span class="token punctuation">-</span>jre8<span class="token punctuation">:</span>v1    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更新资源清单文件,将pod-first文件中的Pod名改为tomcat-test-1<br>[root@xianchaomaster1 ~]# <code>kubectl apply -f pod-first.yaml</code></p><p>查看pod是否创建成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -l app=tomcat</span>NAME            READY   STATUS    RESTARTS   AGEtomcat-test     <span class="token number">1</span>/1     Running   <span class="token number">0</span>          9htomcat-test-1   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看pod的ip和pod调度到哪个节点上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -owide</span>NAME                         READY   STATUS    RESTARTS      AGE   IP               NODE    NOMINATED NODE   READINESS GATESnginx-test-d5cc658c5-9zhkq   <span class="token number">1</span>/1     Running   <span class="token number">0</span>             9h    <span class="token number">10.224</span>.166.133   node1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>nginx-test-d5cc658c5-9zrtt   <span class="token number">1</span>/1     Running   <span class="token number">0</span>             9h    <span class="token number">10.224</span>.104.4     node2   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>testbusybox                  <span class="token number">1</span>/1     Running   <span class="token number">6</span> <span class="token punctuation">(</span>13m ago<span class="token punctuation">)</span>   11h   <span class="token number">10.224</span>.104.2     node2   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>tomcat-test                  <span class="token number">1</span>/1     Running   <span class="token number">0</span>             9h    <span class="token number">10.224</span>.166.134   node1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>tomcat-test-1                <span class="token number">1</span>/1     Running   <span class="token number">0</span>             13s   <span class="token number">10.224</span>.166.135   node1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看pod日志<br><code>kubectl logs tomcat-test</code></p><p>进入到刚才创建的pod，刚才创建的pod名字是web<br><code>kubectl exec -it tomcat-test -- /bin/bash</code></p><p>假如pod里有多个容器，进入到pod里的指定容器，按如下命令：<br><code>kubectl exec -it tomcat-test -c tomcat-java -- /bin/bash</code></p><p>查看pod详细信息<br><code>kubectl describe pods tomcat-test</code></p><p><img src="/./../../../../%E7%AC%94%E8%AE%B0/Typora/K8S/photo/image-20221105085843184.png" alt="image-20221105085843184"></p><p>查看pod具有哪些标签：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get pods --show-labels</span>NAME                         READY   STATUS    RESTARTS      AGE     LABELSnginx-test-d5cc658c5-9zhkq   <span class="token number">1</span>/1     Running   <span class="token number">0</span>             10h     <span class="token assign-left variable">app</span><span class="token operator">=</span>nginx,pod-template-hash<span class="token operator">=</span>d5cc658c5nginx-test-d5cc658c5-9zrtt   <span class="token number">1</span>/1     Running   <span class="token number">0</span>             10h     <span class="token assign-left variable">app</span><span class="token operator">=</span>nginx,pod-template-hash<span class="token operator">=</span>d5cc658c5testbusybox                  <span class="token number">1</span>/1     Running   <span class="token number">7</span> <span class="token punctuation">(</span>75s ago<span class="token punctuation">)</span>   11h     <span class="token assign-left variable">app</span><span class="token operator">=</span>busyboxtomcat-test                  <span class="token number">1</span>/1     Running   <span class="token number">0</span>             9h      <span class="token assign-left variable">app</span><span class="token operator">=</span>tomcattomcat-test-1                <span class="token number">1</span>/1     Running   <span class="token number">0</span>             4m32s   <span class="token assign-left variable">app</span><span class="token operator">=</span>tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除pod<br><code>kubectl delete pods tomcat-test</code></p><p>或者<br><code>kubectl delete -f pod-first.yaml</code></p><p>我们上面创建的pod是一个自主式pod，也就是通过pod创建一个应用程序，如果pod出现故障停掉，那么我们通过pod部署的应用也就会停掉，不安全， 还有一种控制器管理的pod，通过控制器创建pod，可以对pod的生命周期做管理，可以定义pod的副本数，如果有一个pod意外停掉，那么会自动起来一个pod替代之前的pod，之后会讲解pod的控制器</p><h4 id="2-3-Pod资源清单字段解读"><a href="#2-3-Pod资源清单字段解读" class="headerlink" title="2.3 Pod资源清单字段解读"></a>2.3 Pod资源清单字段解读</h4><p>Yaml文件内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xianchaomaster1 ~<span class="token punctuation">]</span><span class="token comment"># vim pod-tomcat.yaml</span>apiVersion: v1  <span class="token comment">#api版本</span>kind: Pod       <span class="token comment">#创建的资源</span>metadata:      name: tomcat-test  <span class="token comment">#Pod的名字</span>  namespace: default   <span class="token comment">#Pod所在的名称空间</span>  labels:    app:  tomcat     <span class="token comment">#Pod具有的标签</span>spec:  containers:  - name:  tomcat-java   <span class="token comment">#Pod里容器的名字</span>    ports:    - containerPort: <span class="token number">8080</span>  <span class="token comment">#容器暴露的端口</span>    image: xianchao/tomcat-8.5-jre8:v1  <span class="token comment">#容器使用的镜像</span>  imagePullPolicy: IfNotPresent    <span class="token comment">#镜像拉取策略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更新资源清单文件</p><p>[root@xianchaomaster1 ~]# <code>kubectl apply -f pod-tomcat.yaml </code></p><p>Pod资源清单编写技巧</p><p>[root@xianchaomaster1 ~]# <code>kubectl explain pod</code></p><p>可以看到 Pod 的一级字段，主要分成 5 个部分：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">KIND:   PodVERSION:  v1DESCRIPTION:   Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.<span class="token comment"># [Pod是可以在主机上运行的容器的集合。此资源是由客户端创建并安排到主机上。]</span>FIELDS:  apiVersion<span class="token operator">&lt;</span>string<span class="token operator">></span>  APIVersion defines the versioned schema of this representation of an    object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info:   https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md<span class="token comment">#resources</span><span class="token comment"># [APIVersion定义了对象,代表了一个版本。]</span>  kind<span class="token operator">&lt;</span>string<span class="token operator">></span>   Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:   https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md<span class="token comment">#types-kinds</span><span class="token comment"># [Kind是字符串类型的值，代表了要创建的资源。服务器可以从客户端提交的请求推断出这个资源。]</span>  metadata<span class="token operator">&lt;</span>Object<span class="token operator">></span>   Standard object's metadata. More info:   https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md<span class="token comment">#metadata</span><span class="token comment"># [metadata是对象，定义元数据属性信息的]</span>  spec<span class="token operator">&lt;</span>Object<span class="token operator">></span>   Specification of the desired behavior of the pod. More info:   https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md<span class="token comment">#spec-and-status</span><span class="token comment"># [spec制定了定义Pod的规格，里面包含容器的信息]</span>  status<span class="token operator">&lt;</span>Object<span class="token operator">></span>   Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info:   <span class="token punctuation">[</span>https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md<span class="token comment">#spec-and-status](#spec-and-status)</span><span class="token comment"># [status表示状态，这个不可以修改，定义pod的时候也不需要定义这个字段]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看pod.metadata字段如何定义</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xianchaomaster1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl explain pod.metadata</span>KIND:   PodVERSION:  v1RESOURCE: metadata <span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token comment"># metadata是对象&lt;Object>，下面可以有多个字段</span>----------------------------------------------<span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl explain pod.metadata|grep '&lt;'</span>RESOURCE: metadata <span class="token operator">&lt;</span>Object<span class="token operator">></span>   annotations  <span class="token operator">&lt;</span>map<span class="token punctuation">[</span>string<span class="token punctuation">]</span>string<span class="token operator">></span> <span class="token comment"># annotations是注解，map类型表示对应的值是key-value键值对，&lt;string,string>表示 key和value都是String类型的,格式如下：</span><span class="token comment">#################################</span>   <span class="token string">"metadata"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>  <span class="token string">"annotations"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"key1"</span> <span class="token builtin class-name">:</span> <span class="token string">"value1"</span>,    <span class="token string">"key2"</span> <span class="token builtin class-name">:</span> <span class="token string">"value2"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">#################################</span><span class="token comment">#用Annotation来记录的信息包括：build信息、release信息、Docker镜像信息等，例如时间戳、release id号、镜像hash值、docker registry地址等；日志库、监控库、分析库等资源库的地址信息；程序调试工具信息，例如工具名称、版本号等；团队的联系信息，例如电话号码、负责人名称、网址等</span>   labels       <span class="token operator">&lt;</span>map<span class="token punctuation">[</span>string<span class="token punctuation">]</span>string<span class="token operator">></span>  <span class="token comment">#创建的资源具有的标签</span>   name <span class="token operator">&lt;</span>string<span class="token operator">></span>  <span class="token comment">#创建的资源的名字</span>   namespace    <span class="token operator">&lt;</span>string<span class="token operator">></span>  <span class="token comment">#创建的资源所属的名称空间，namespaces划分了一个空间，在同一个namesace下的资源名字是唯一的，默认的名称空间是default</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看pod.spec字段如何定义</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xianchaomaster1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl explain pod.spec</span>KIND:     PodVERSION:  v1RESOURCE: spec <span class="token operator">&lt;</span>Object<span class="token operator">></span>DESCRIPTION:     Specification of the desired behavior of the pod. More info:     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md<span class="token comment">#spec-and-status </span>     PodSpec is a description of a pod.<span class="token comment"># Pod的spec字段是用来描述Pod的</span>---------------------------------------------------------------------<span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl explain pod.spec|grep '&lt;'</span>RESOURCE: spec <span class="token operator">&lt;</span>Object<span class="token operator">></span>   containers   <span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Object<span class="token operator">></span> -required-  <span class="token comment">#container是定义在pod里面的，一个pod至少要有一个容器,后面有required表示是必选项</span>   <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看pod.spec.containers字段如何定义</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl explain pod.spec.containers|grep '&lt;'</span>RESOURCE: containers <span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Object<span class="token operator">></span>   image        <span class="token operator">&lt;</span>string<span class="token operator">></span>   <span class="token comment">#image是用来指定容器需要的镜像的</span>   imagePullPolicy      <span class="token operator">&lt;</span>string<span class="token operator">></span>  <span class="token comment">#镜像拉取策略，pod是要调度到node节点的，那pod启动需要镜像，可以根据这个字段设置镜像拉取策略，支持如下三种：1）Always：不管本地是否存在镜像，都要重新拉取镜像 2）Never： 从不拉取镜像 3）IfNotPresent：如果本地存在，使用本地的镜像，本地不存在，从官方拉取镜像</span>   name <span class="token operator">&lt;</span>string<span class="token operator">></span> -required-   <span class="token comment">#name是必须字段，用来指定容器名字的</span>   ports        <span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Object<span class="token operator">></span>  <span class="token comment">#port是端口，属于对象列表</span>   <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看pod.spec.container.ports字段如何定义</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl explain pod.spec.containers.ports|grep '&lt;'</span>RESOURCE: ports <span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Object<span class="token operator">></span>   containerPort        <span class="token operator">&lt;</span>integer<span class="token operator">></span> -required-  <span class="token comment">#containerPort是必须字段， pod中的容器需要暴露的端口</span>     number, <span class="token number">0</span> <span class="token operator">&lt;</span> x <span class="token operator">&lt;</span> <span class="token number">65536</span>.   hostIP       <span class="token operator">&lt;</span>string<span class="token operator">></span>  <span class="token comment">#将容器中的服务暴露到宿主机的端口上时，可以指定绑定的宿主机 IP</span>   hostPort     <span class="token operator">&lt;</span>integer<span class="token operator">></span>  <span class="token comment">#容器中的服务在宿主机上映射的端口</span>  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-通过kubectl-run创建一个pod"><a href="#2-4-通过kubectl-run创建一个pod" class="headerlink" title="2.4 通过kubectl run创建一个pod"></a>2.4 通过kubectl run创建一个pod</h4><p><code>kubectl run tomcat --image=xianchao/tomcat-8.5-jre8:v1  --image-pull-policy=&#39;IfNotPresent&#39;  --port=8080</code></p><p> 查看kubectl的帮助命令：<code>kubectl --help</code></p><h4 id="2-5-输出pod中容器的日志"><a href="#2-5-输出pod中容器的日志" class="headerlink" title="2.5 输出pod中容器的日志"></a>2.5 输出pod中容器的日志</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 返回仅包含一个容器的pod nginx的日志快照</span>$ kubectl logs nginx<span class="token comment"># 返回pod ruby中已经停止的容器web-1的日志快照</span>$ kubectl logs <span class="token parameter variable">-p</span> <span class="token parameter variable">-c</span> ruby web-1<span class="token comment"># 持续输出pod ruby中的容器web-1的日志</span>$ kubectl logs <span class="token parameter variable">-f</span> <span class="token parameter variable">-c</span> ruby web-1<span class="token comment"># 仅输出pod nginx中最近的20条日志</span>$ kubectl logs <span class="token parameter variable">--tail</span><span class="token operator">=</span><span class="token number">20</span> nginx<span class="token comment"># 输出pod nginx中最近一小时内产生的所有日志</span>$ kubectl logs <span class="token parameter variable">--since</span><span class="token operator">=</span>1h nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选项说明：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-c, <span class="token parameter variable">--container</span><span class="token operator">=</span><span class="token string">""</span><span class="token builtin class-name">:</span> 容器名。-f, --follow<span class="token punctuation">[</span><span class="token operator">=</span>false<span class="token punctuation">]</span>: 指定是否持续输出日志。    --interactive<span class="token punctuation">[</span><span class="token operator">=</span>true<span class="token punctuation">]</span>: 如果为true，当需要时提示用户进行输入。默认为true。    --limit-bytes<span class="token operator">=</span><span class="token number">0</span>: 输出日志的最大字节数。默认无限制。-p, --previous<span class="token punctuation">[</span><span class="token operator">=</span>false<span class="token punctuation">]</span>: 如果为true，输出pod中曾经运行过，但目前已终止的容器的日志。    <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token number">0</span>: 仅返回相对时间范围，如5s、2m或3h，之内的日志。默认返回所有日志。只能同时使用since和since-time中的一种。    --since-time<span class="token operator">=</span><span class="token string">""</span><span class="token builtin class-name">:</span> 仅返回指定时间（RFC3339格式）之后的日志。默认返回所有日志。只能同时使用since和since-time中的一种。    <span class="token parameter variable">--tail</span><span class="token operator">=</span>-1: 要显示的最新的日志条数。默认为-1，显示所有的日志。    --timestamps<span class="token punctuation">[</span><span class="token operator">=</span>false<span class="token punctuation">]</span>: 在日志中包含时间戳。      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继承自父命令的选项</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">    --alsologtostderr<span class="token punctuation">[</span><span class="token operator">=</span>false<span class="token punctuation">]</span>: 同时输出日志到标准错误控制台和文件。    --api-version<span class="token operator">=</span><span class="token string">""</span><span class="token builtin class-name">:</span> 和服务端交互使用的API版本。    --certificate-authority<span class="token operator">=</span><span class="token string">""</span><span class="token builtin class-name">:</span> 用以进行认证授权的.cert文件路径。    --client-certificate<span class="token operator">=</span><span class="token string">""</span><span class="token builtin class-name">:</span> TLS使用的客户端证书路径。    --client-key<span class="token operator">=</span><span class="token string">""</span><span class="token builtin class-name">:</span> TLS使用的客户端密钥路径。    <span class="token parameter variable">--cluster</span><span class="token operator">=</span><span class="token string">""</span><span class="token builtin class-name">:</span> 指定使用的kubeconfig配置文件中的集群名。    <span class="token parameter variable">--context</span><span class="token operator">=</span><span class="token string">""</span><span class="token builtin class-name">:</span> 指定使用的kubeconfig配置文件中的环境名。    --insecure-skip-tls-verify<span class="token punctuation">[</span><span class="token operator">=</span>false<span class="token punctuation">]</span>: 如果为true，将不会检查服务器凭证的有效性，这会导致你的HTTPS链接变得不安全。    <span class="token parameter variable">--kubeconfig</span><span class="token operator">=</span><span class="token string">""</span><span class="token builtin class-name">:</span> 命令行请求使用的配置文件路径。    --log-backtrace-at<span class="token operator">=</span>:0: 当日志长度超过定义的行数时，忽略堆栈信息。    --log-dir<span class="token operator">=</span><span class="token string">""</span><span class="token builtin class-name">:</span> 如果不为空，将日志文件写入此目录。    --log-flush-frequency<span class="token operator">=</span>5s: 刷新日志的最大时间间隔。    --logtostderr<span class="token punctuation">[</span><span class="token operator">=</span>true<span class="token punctuation">]</span>: 输出日志到标准错误控制台，不输出到文件。    --match-server-version<span class="token punctuation">[</span><span class="token operator">=</span>false<span class="token punctuation">]</span>: 要求服务端和客户端版本匹配。    <span class="token parameter variable">--namespace</span><span class="token operator">=</span><span class="token string">""</span><span class="token builtin class-name">:</span> 如果不为空，命令将使用此namespace。    <span class="token parameter variable">--password</span><span class="token operator">=</span><span class="token string">""</span><span class="token builtin class-name">:</span> API Server进行简单认证使用的密码。-s, <span class="token parameter variable">--server</span><span class="token operator">=</span><span class="token string">""</span><span class="token builtin class-name">:</span> Kubernetes API Server的地址和端口号。    <span class="token parameter variable">--stderrthreshold</span><span class="token operator">=</span><span class="token number">2</span>: 高于此级别的日志将被输出到错误控制台。    <span class="token parameter variable">--token</span><span class="token operator">=</span><span class="token string">""</span><span class="token builtin class-name">:</span> 认证到API Server使用的令牌。    <span class="token parameter variable">--user</span><span class="token operator">=</span><span class="token string">""</span><span class="token builtin class-name">:</span> 指定使用的kubeconfig配置文件中的用户名。    <span class="token parameter variable">--username</span><span class="token operator">=</span><span class="token string">""</span><span class="token builtin class-name">:</span> API Server进行简单认证使用的用户名。    <span class="token parameter variable">--v</span><span class="token operator">=</span><span class="token number">0</span>: 指定输出日志的级别。    <span class="token parameter variable">--vmodule</span><span class="token operator">=</span>: 指定输出日志的模块，格式如下：pattern<span class="token operator">=</span>N，使用逗号分隔。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、查看容器和Pod的ID"><a href="#三、查看容器和Pod的ID" class="headerlink" title="三、查看容器和Pod的ID"></a>三、查看容器和Pod的ID</h3><h4 id="3-1-容器ID"><a href="#3-1-容器ID" class="headerlink" title="3.1 容器ID"></a>3.1 容器ID</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@node1:~<span class="token comment"># kubectl get pods --all-namespaces -o jsonpath='&#123;range .items[*]&#125;&#123;range .status.containerStatuses[*]&#125;&#123;.containerID&#125;&#123;"\n"&#125;&#123;end&#125;'|awk -F/ '&#123;print substr($NF,1,12)&#125;'|head -2</span>b8e4b6cde268ac23be45806aroot@node1:~<span class="token comment"># kubectl get pods --all-namespaces -o jsonpath='&#123;range .items[*]&#125;&#123;"pod: "&#125;&#123;.metadata.name&#125;&#123;"\n"&#125;&#123;range .status.containerStatuses[*]&#125;&#123;"\tname: "&#125;&#123;.containerID&#125;&#123;"\n\timage: "&#125;&#123;.image&#125;&#123;"\n"&#125;&#123;end&#125;'|head -6</span>pod: hello-apparmor        name: docker://b8e4b6cde268fd6d3554dd7f5298a87928bfe08727b3a71cfcc75f5a4ae0a03e        image: busybox:latestpod: calico-kube-controllers-677cd97c8d-pg85g        name: docker://ac23be45806add466aff00298b64ba31f5746f0f2a29bd87b773dba191893e4d        image: calico/kube-controllers:v3.18.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-PodID"><a href="#3-2-PodID" class="headerlink" title="3.2 PodID"></a>3.2 PodID</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubectl get pods -n kube-system -o custom-columns=PodName:.metadata.name,PodUID:.metadata.uid</span>PodName                                    PodUIDcalico-kube-controllers-677cd97c8d-pg85g   b2a84c89-7e46-44d3-9c68-71fafe52aa7bcalico-node-2rfsn                          6d9734df-6ef0-47fe-abd6-addc7281acf7calico-node-qn4h5                          88b23df4-b6f9-46cc-8ff5-eb578fe06995coredns-65c54cc984-hdrrj                   dbc0784b-75f0-443d-a859-334f5a7c4776coredns-65c54cc984-hf4td                   a797ad31-7410-4f14-ac54-a4ce2470bbcaetcd-master1                               d0193044-1ab2-47eb-be81-7cc52e716fcfkube-apiserver-master1                     772d1a94-63a8-4f92-8ba5-2eac30752d9dkube-controller-manager-master1            c3afc196-6d53-40a6-86d3-994a291d0780kube-proxy-q7zsx                           b0dcac81-932b-472c-92d3-653e17e9bd49kube-proxy-t96gf                           e95ebe3d-9612-482b-930d-45448c3ef0f1kube-scheduler-master1                     a02b2148-0887-4c04-9111-0679f3a37b06metrics-server-875fcb674-dlwlh             f4d0f273-2155-4ed8-94b6-ae229817d112-----------------------------------------------------------------------------------------------root@master1:~<span class="token comment"># kubectl get pod -n kube-system etcd-master1 -o jsonpath='&#123;.metadata.uid&#125;&#123;"\n"&#125;'</span>d0193044-1ab2-47eb-be81-7cc52e716fcf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-结合"><a href="#3-3-结合" class="headerlink" title="3.3 结合"></a>3.3 结合</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubectl get pods --all-namespaces -o=jsonpath='&#123;range .items[*]&#125;[&#123;.status.containerStatuses[0].containerID&#125;, &#123;.status.podIP&#125;]&#123;"\n"&#125;&#123;end&#125;'   </span><span class="token punctuation">[</span>docker://e85da75ac64047cc58b12446129d533640cce76d8e512d3d5201fc70b485673b, <span class="token number">10.244</span>.166.140<span class="token punctuation">]</span><span class="token punctuation">[</span>docker://ac23be45806add466aff00298b64ba31f5746f0f2a29bd87b773dba191893e4d, <span class="token number">10.244</span>.166.129<span class="token punctuation">]</span><span class="token punctuation">[</span>docker://0ae18f6ea0e8892d3391b526ffef409a09f96d92f74a31849c4d8b59577f7863, <span class="token number">10.10</span>.30.140<span class="token punctuation">]</span><span class="token punctuation">[</span>docker://868f4d686fc229351fd63bfd285ea2236b97719bbdb84ec19d40def3b7388f11, <span class="token number">10.10</span>.30.141<span class="token punctuation">]</span><span class="token punctuation">[</span>docker://8734aa903584d6a1934115fb144c5b2495c88101eb55413cb8d91fc6b630e3d7, <span class="token number">10.244</span>.137.65<span class="token punctuation">]</span><span class="token punctuation">[</span>docker://5dd1e534fcdbf44fcfe327582c5cd968c641b9c04dd7203e55af0e337d66a4cc, <span class="token number">10.244</span>.137.66<span class="token punctuation">]</span><span class="token punctuation">[</span>docker://12482701961fc4bb3dac8806fe73412c65055c4ef6959b6439d1aa3211c97fe5, <span class="token number">10.10</span>.30.140<span class="token punctuation">]</span><span class="token punctuation">[</span>docker://1c6e378c4942b046589340e3314074b55449875e753726cff9b59ade122cbff8, <span class="token number">10.10</span>.30.140<span class="token punctuation">]</span><span class="token punctuation">[</span>docker://65de74120f19f72f958b3851347b4e2e9160d03c0818f46e81ce4c3eb1ca471b, <span class="token number">10.10</span>.30.140<span class="token punctuation">]</span><span class="token punctuation">[</span>docker://10fde6ee4a98cb83160e7adf384d6c4381b31f270161ebeff22cd2c96c03e695, <span class="token number">10.10</span>.30.140<span class="token punctuation">]</span><span class="token punctuation">[</span>docker://5ec1a0637506197f354f8a656c832f97240b8d086902ef15eed271f887a5e174, <span class="token number">10.10</span>.30.141<span class="token punctuation">]</span><span class="token punctuation">[</span>docker://c26bd09a47b454986b3c2b7327efc7e66ebede3d605141ccd6e0dac6d4b5baa7, <span class="token number">10.10</span>.30.140<span class="token punctuation">]</span><span class="token punctuation">[</span>docker://353afb1a14ed9d16a5618b2002efbe50b64b6ffd1a19e01c00270991d2f19606, <span class="token number">10.244</span>.166.131<span class="token punctuation">]</span><span class="token punctuation">[</span>docker://de7dd09ddbab761c20ae44aa30af79f245ccf2da8b26fdc691e148448fcf1e31, <span class="token number">10.244</span>.166.138<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> K8S笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第1章-安装K8S1.25高可用集群.md</title>
      <link href="/2023/02/12/k8s-bi-ji/di-1-zhang-an-zhuang-k8s1-25-gao-ke-yong-ji-qun-md/"/>
      <url>/2023/02/12/k8s-bi-ji/di-1-zhang-an-zhuang-k8s1-25-gao-ke-yong-ji-qun-md/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>kuberadm安装k8s1.25高可用集群</strong></p></blockquote><p>k8s环境规划：</p><p> podSubnet（pod网段） 10.244.0.0&#x2F;16</p><p> serviceSubnet（service网段）: 10.96.0.0&#x2F;12</p><table><thead><tr><th>K8S集群角色</th><th>IP</th><th>主机名</th><th>安装的组件</th></tr></thead><tbody><tr><td>控制节点</td><td>10.10.30.180</td><td>master1</td><td>apiserver、controller-manager、schedule、kubelet、etcd、kube-proxy、容器运行时、calico、keepalived、nginx</td></tr><tr><td>工作节点</td><td>10.10.30.181</td><td>node1</td><td>Kube-proxy、calico、coredns、容器运行时、kubelet</td></tr><tr><td>工作节点</td><td>10.10.30.182</td><td>node2</td><td>Kube-proxy、calico、coredns、容器运行时、kubelet</td></tr></tbody></table><h3 id="一、初始化安装k8s集群环境"><a href="#一、初始化安装k8s集群环境" class="headerlink" title="一、初始化安装k8s集群环境"></a>一、初始化安装k8s集群环境</h3><h4 id="1-1-修改机器IP为静态IP"><a href="#1-1-修改机器IP为静态IP" class="headerlink" title="1.1 修改机器IP为静态IP"></a>1.1 修改机器IP为静态IP</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/sysconfig/network-scripts/ifcfg-ens33文件<span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">PROXY_METHOD</span><span class="token operator">=</span>none<span class="token assign-left variable">BROWSER_ONLY</span><span class="token operator">=</span>no<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>static<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">10.10</span>.30.180<span class="token assign-left variable">NETMASK</span><span class="token operator">=</span><span class="token number">255.255</span>.255.0<span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">10.10</span>.30.2<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">10.10</span>.30.2<span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span>yes<span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span>no<span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span>stable-privacy<span class="token assign-left variable">NAME</span><span class="token operator">=</span>ens33<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#修改配置文件之后需要重启网络服务才能使配置生效，重启网络服务命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-关闭selinux，所有k8s机器均操作"><a href="#1-2-关闭selinux，所有k8s机器均操作" class="headerlink" title="1.2 关闭selinux，所有k8s机器均操作"></a>1.2 关闭selinux，所有k8s机器均操作</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/SELINUX=enforcing/SELINUX=disabled/g'</span> /etc/selinux/config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改selinux配置文件之后，重启机器，selinux配置才能永久生效，重启之后，登录到机器，执行如下命令：</p><p>getenforce  # 如果显示Disabled说明selinux已经关闭</p><h4 id="1-3-配置机器主机名"><a href="#1-3-配置机器主机名" class="headerlink" title="1.3 配置机器主机名"></a>1.3 配置机器主机名</h4><p>在10.10.30.180上执行如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hostnamectl set-hostname master1 <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在10.10.30.181上执行如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hostnamectl set-hostname node1 <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在10.10.30.182上执行如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hostnamectl set-hostname node2 <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-4-配置host文件，配置互信"><a href="#1-4-配置host文件，配置互信" class="headerlink" title="1.4 配置host文件，配置互信"></a>1.4 配置host文件，配置互信</h4><p>修改三台机器的&#x2F;etc&#x2F;&#x2F;hosts 文件，增加如下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/hosts</span><span class="token number">127.0</span>.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<span class="token number">10.10</span>.30.180  master1<span class="token number">10.10</span>.30.181  node1<span class="token number">10.10</span>.30.182  node2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>互信配置如下：<br>配置master1到其他机器免密登录<br>[root@master1 ~]# ssh-keygen       # 一路回车，不输入密码<br>把本地生成的密钥文件和私钥文件拷贝到远程主机</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># ssh-copy-id master1</span><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># ssh-copy-id node1</span><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># ssh-copy-id node2 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置node1到其他机器免密登录<br>[root@node1~]# ssh-keygen  # 一路回车，不输入密码<br>把本地生成的密钥文件和私钥文件拷贝到远程主机</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># ssh-copy-id master1</span><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># ssh-copy-id node1</span><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># ssh-copy-id node2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置node2到其他机器免密登录<br>[root@ node2~]# ssh-keygen  # 一路回车，不输入密码<br>把本地生成的密钥文件和私钥文件拷贝到远程主机</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ node2~<span class="token punctuation">]</span><span class="token comment"># ssh-copy-id master1</span><span class="token punctuation">[</span>root@ node2~<span class="token punctuation">]</span><span class="token comment"># ssh-copy-id node1</span><span class="token punctuation">[</span>root@ node2~<span class="token punctuation">]</span><span class="token comment"># ssh-copy-id node2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-5-关闭交换分区swap-提升性能"><a href="#1-5-关闭交换分区swap-提升性能" class="headerlink" title="1.5 关闭交换分区swap,提升性能"></a>1.5 关闭交换分区swap,提升性能</h4><p>临时关闭</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># swapoff -a</span><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># swapoff -a</span><span class="token punctuation">[</span>root@node2 ~<span class="token punctuation">]</span><span class="token comment"># swapoff -a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>永久关闭：注释swap挂载，给swap这行开头加一下注释</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/fstab  </span><span class="token comment">#/dev/mapper/centos-swap swap    swap   defaults     0 0</span><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/fstab</span><span class="token comment">#/dev/mapper/centos-swap swap    swap   defaults     0 0</span><span class="token punctuation">[</span>root@node2~<span class="token punctuation">]</span><span class="token comment"># vim /etc/fstab</span><span class="token comment">#/dev/mapper/centos-swap swap    swap   defaults     0 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题1</strong>：为什么要关闭swap交换分区？<br>Swap是交换分区，如果机器内存不够，会使用swap分区，但是swap分区的性能较低，k8s设计的时候为了能提升性能，默认是不允许使用交换分区的。Kubeadm初始化的时候会检测swap是否关闭，如果没关闭，那就初始化失败。如果不想要关闭交换分区，安装k8s的时候可以指定–ignore-preflight-errors&#x3D;Swap来解决。</p><h4 id="1-6-修改机器内核参数"><a href="#1-6-修改机器内核参数" class="headerlink" title="1.6 修改机器内核参数"></a>1.6 修改机器内核参数</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># modprobe br_netfilter</span><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># cat > /etc/sysctl.d/k8s.conf &lt;&lt;EOF</span>net.bridge.bridge-nf-call-ip6tables <span class="token operator">=</span> <span class="token number">1</span>net.bridge.bridge-nf-call-iptables <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span>EOF<span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># sysctl -p /etc/sysctl.d/k8s.conf</span><span class="token punctuation">[</span>root@node2 ~<span class="token punctuation">]</span><span class="token comment"># modprobe br_netfilter</span><span class="token punctuation">[</span>root@node2 ~<span class="token punctuation">]</span><span class="token comment"># cat > /etc/sysctl.d/k8s.conf &lt;&lt;EOF</span>net.bridge.bridge-nf-call-ip6tables <span class="token operator">=</span> <span class="token number">1</span>net.bridge.bridge-nf-call-iptables <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span>EOF<span class="token punctuation">[</span>root@node1~<span class="token punctuation">]</span><span class="token comment"># sysctl -p /etc/sysctl.d/k8s.conf</span><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># modprobe br_netfilter</span><span class="token punctuation">[</span>root@node1~<span class="token punctuation">]</span><span class="token comment"># cat > /etc/sysctl.d/k8s.conf &lt;&lt;EOF</span>net.bridge.bridge-nf-call-ip6tables <span class="token operator">=</span> <span class="token number">1</span>net.bridge.bridge-nf-call-iptables <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span>EOF<span class="token punctuation">[</span>root@ node1~<span class="token punctuation">]</span><span class="token comment"># sysctl -p /etc/sysctl.d/k8s.conf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题1</strong>：sysctl是做什么的？</p><p>在运行时配置内核参数<br> -p  从指定的文件加载系统参数，如不指定即从&#x2F;etc&#x2F;sysctl.conf中加载</p><p><strong>sysctl -p &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf出现报错：</strong></p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sysctl: cannot <span class="token function">stat</span> /proc/sys/net/bridge/bridge-nf-call-ip6tables: No such <span class="token function">file</span> or directorysysctl: cannot <span class="token function">stat</span> /proc/sys/net/bridge/bridge-nf-call-iptables: No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决方法：<br>modprobe br_netfilter</p><p><strong>问题2</strong>：为什么开启net.bridge.bridge-nf-call-iptables内核参数？</p><p>在centos下安装docker，执行docker info出现如下警告：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">WARNING: bridge-nf-call-iptables is disabledWARNING: bridge-nf-call-ip6tables is disabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决办法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/sysctl.d/k8s.confnet.bridge.bridge-nf-call-ip6tables <span class="token operator">=</span> <span class="token number">1</span>net.bridge.bridge-nf-call-iptables <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>问题3：为什么要开启net.ipv4.ip_forward &#x3D; 1参数？</p><p>kubeadm初始化k8s如果报错,就表示没有开启ip_forward，需要开启。</p><blockquote><p>net.ipv4.ip_forward是数据包转发：</p><p>出于安全考虑，Linux系统默认是禁止数据包转发的。所谓转发即当主机拥有多于一块的网卡时，其中一块收到数据包，根据数据包的目的ip地址将数据包发往本机另一块网卡，该网卡根据路由表继续发送数据包。这通常是路由器所要实现的功能。</p><p>要让Linux系统具有路由转发功能，需要配置一个Linux的内核参数net.ipv4.ip_forward。这个参数指定了Linux系统当前对路由转发功能的支持情况；其值为0时表示禁止进行IP转发；如果是1,则说明IP转发功能已经打开。</p></blockquote><h4 id="1-7-关闭防火墙"><a href="#1-7-关闭防火墙" class="headerlink" title="1.7 关闭防火墙"></a>1.7 关闭防火墙</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># systemctl stop firewalld ; systemctl disable firewalld</span><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># systemctl stop firewalld ; systemctl disable firewalld</span><span class="token punctuation">[</span>root@node2 ~<span class="token punctuation">]</span><span class="token comment"># systemctl stop firewalld ; systemctl disable firewalld</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-9-配置阿里云的repo源"><a href="#1-9-配置阿里云的repo源" class="headerlink" title="1.9 配置阿里云的repo源"></a>1.9 配置阿里云的repo源</h4><p>配置国内安装docker和containerd的阿里云的repo源，<strong>三台</strong>机器都执行如下两条命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> yum-utils <span class="token parameter variable">-y</span>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-10-配置安装K8S组件需要的阿里云repo源"><a href="#1-10-配置安装K8S组件需要的阿里云repo源" class="headerlink" title="1.10 配置安装K8S组件需要的阿里云repo源"></a>1.10 配置安装K8S组件需要的阿里云repo源</h4><p>三台机器都要执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /etc/yum.repos.d/kubernetes.repo <span class="token operator">&lt;&lt;</span><span class="token string">EOF[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=0EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-11-配置时间同步"><a href="#1-11-配置时间同步" class="headerlink" title="1.11 配置时间同步"></a>1.11 配置时间同步</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">在master1上执行如下：<span class="token comment">#安装ntpdate命令</span><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># yum install ntpdate -y</span><span class="token comment">#跟网络时间做同步</span><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># ntpdate cn.pool.ntp.org</span><span class="token comment">#把时间同步做成计划任务</span><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># crontab -e</span>* */1 * * * /usr/sbin/ntpdate   cn.pool.ntp.org<span class="token comment">#重启crond服务</span><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment">#service crond restart</span>其它两台机器node1 node2参考master执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-12-安装基础软件包"><a href="#1-12-安装基础软件包" class="headerlink" title="1.12 安装基础软件包"></a>1.12 安装基础软件包</h4><p>三台服务器都要执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># yum install -y device-mapper-persistent-data lvm2 wget net-tools nfs-utils lrzsz gcc gcc-c++ make cmake libxml2-devel openssl-devel curl curl-devel unzip sudo ntp libaio-devel wget vim ncurses-devel autoconf automake zlib-devel? python-devel epel-release openssh-server socat? ipvsadm conntrack telnet ipvsadm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-13-安装containerd服务"><a href="#1-13-安装containerd服务" class="headerlink" title="1.13 安装containerd服务"></a>1.13 安装containerd服务</h4><h5 id="1-13-1-安装containerd"><a href="#1-13-1-安装containerd" class="headerlink" title="1.13.1 安装containerd"></a>1.13.1 安装containerd</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment">#yum install containerd.io-1.6.6 -y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来生成 containerd 的配置文件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment">#mkdir -p /etc/containerd</span><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment">#containerd config default > /etc/containerd/config.toml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1-13-2-修改配置文件"><a href="#1-13-2-修改配置文件" class="headerlink" title="1.13.2 修改配置文件"></a>1.13.2 修改配置文件</h5><p>打开&#x2F;etc&#x2F;containerd&#x2F;config.toml<br>把SystemdCgroup &#x3D; <strong>false</strong>修改成SystemdCgroup &#x3D; <strong>true</strong></p><p>把sandbox_image &#x3D; <strong>“k8s.gcr.io&#x2F;pause:3.6”<strong>修改成sandbox_image&#x3D;</strong>“registry.aliyuncs.com&#x2F;google_containers&#x2F;pause:3.7”</strong></p><p>修改完成可以检查一下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># egrep -i "systemdc|sandbox"  /etc/containerd/config.toml </span>    sandbox_image <span class="token operator">=</span> <span class="token string">"registry.aliyuncs.com/google_containers/pause:3.7"</span>            SystemdCgroup <span class="token operator">=</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 配置 containerd 开机启动，并启动 containerd</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment">#systemctl enable containerd  --now</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面1.13.1和1.13.2在剩下两台机器node1  node2上面也同步执行</p><h5 id="1-13-3-修改crictl文件"><a href="#1-13-3-修改crictl文件" class="headerlink" title="1.13.3 修改crictl文件"></a>1.13.3 修改crictl文件</h5><p>crictl命令用来查看k8s中的一些镜像，所以需要修改一下&#x2F;etc&#x2F;crictl.yaml文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment">#cat > /etc/crictl.yaml &lt;&lt;EOF</span>runtime-endpoint: unix:///run/containerd/containerd.sockimage-endpoint: unix:///run/containerd/containerd.socktimeout: <span class="token number">10</span>debug: <span class="token boolean">false</span>EOF<span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment">#systemctl restart containerd</span><span class="token comment"># 其它机器同步执行以上操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>备注：docker也要安装，docker跟containerd不冲突，安装docker是为了能基于dockerfile构建镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment">#yum install  docker-ce  -y</span><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment">#yum install  docker-ce  -y</span><span class="token punctuation">[</span>root@node2 ~<span class="token punctuation">]</span><span class="token comment">#yum install  docker-ce  -y</span><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment">#systemctl enable docker --now</span><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment">#systemctl enable docker --now</span><span class="token punctuation">[</span>root@node2 ~<span class="token punctuation">]</span><span class="token comment">#systemctl enable docker --now</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置containerd镜像加速器，k8s所有节点均按照以下配置：<br>编辑vim &#x2F;etc&#x2F;containerd&#x2F;config.toml文件<br>找到config_path &#x3D; “”，修改成如下目录：<br><code>config_path = &quot;/etc/containerd/certs.d&quot;</code><br>修改完成后，保存退出，然后去创建这个目录<br>mkdir &#x2F;etc&#x2F;containerd&#x2F;certs.d&#x2F;docker.io&#x2F; -p</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/containerd/certs.d/docker.io/hosts.toml<span class="token comment"># 写入如下内容：</span><span class="token punctuation">[</span>host.<span class="token string">"https://vh3bm52y.mirror.aliyuncs.com"</span>,host.<span class="token string">"https://registry.docker-cn.com"</span><span class="token punctuation">]</span>  capabilities <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"pull"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>重启containerd：<br><code>systemctl restart containerd</code></p><p>配置docker镜像加速器，k8s所有节点均按照以下配置:<br>vim &#x2F;etc&#x2F;docker&#x2F;daemon.json<br>写入如下内容：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span> <span class="token property">"registry-mirrors"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"https://vh3bm52y.mirror.aliyuncs.com"</span><span class="token punctuation">,</span><span class="token string">"https://registry.docker-cn.com"</span><span class="token punctuation">,</span><span class="token string">"https://docker.mirrors.ustc.edu.cn"</span><span class="token punctuation">,</span><span class="token string">"https://dockerhub.azk8s.cn"</span><span class="token punctuation">,</span><span class="token string">"http://hub-mirror.c.163.com"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重启docker：<br><code>systemctl restart docker</code></p><h4 id="1-14-安装初始化k8s需要的软件"><a href="#1-14-安装初始化k8s需要的软件" class="headerlink" title="1.14 安装初始化k8s需要的软件"></a>1.14 安装初始化k8s需要的软件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># yum install -y kubelet-1.25.0 kubeadm-1.25.0 kubectl-1.25.0</span><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable kubelet</span><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># yum install -y kubelet-1.25.0 kubeadm-1.25.0 kubectl-1.25.0</span><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable kubelet</span><span class="token punctuation">[</span>root@node2 ~<span class="token punctuation">]</span><span class="token comment"># yum install -y kubelet-1.25.0 kubeadm-1.25.0 kubectl-1.25.0</span><span class="token punctuation">[</span>root@node2 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable kubelet</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：每个软件包的作用</p><blockquote><p>Kubeadm: kubeadm是一个工具，用来初始化k8s集群的<br>kubelet: 安装在集群所有节点上，用于启动Pod的，kubeadm安装k8s，k8s控制节点和工作节点的组件，都是基于pod运行的，只要pod启动，就需要 kubelet<br>kubectl: 通过kubectl可以部署和管理应用，查看各种资源，创建、删除和更新各种组件</p></blockquote><h4 id="1-15-设置容器进行时"><a href="#1-15-设置容器进行时" class="headerlink" title="1.15 设置容器进行时"></a>1.15 设置容器进行时</h4><p>在三台节点都执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1~<span class="token punctuation">]</span><span class="token comment"># crictl config runtime-endpoint /run/containerd/containerd.sock</span><span class="token punctuation">[</span>root@node1~<span class="token punctuation">]</span><span class="token comment"># crictl config runtime-endpoint /run/containerd/containerd.sock</span><span class="token punctuation">[</span>root@node2~<span class="token punctuation">]</span><span class="token comment"># crictl config runtime-endpoint /run/containerd/containerd.sock</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-16-生成kubeadm初始化文件"><a href="#1-16-生成kubeadm初始化文件" class="headerlink" title="1.16 生成kubeadm初始化文件"></a>1.16 生成kubeadm初始化文件</h4><p>生成kube初始化安装yaml文件，只在master1节点执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubeadm config print init-defaults > kubeadm.yaml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成后，根据我们自己的需求修改配置，比如修改 imageRepository 的值，kube-proxy 的模式为 ipvs，需要注意的是由于我们使用的containerd作为运行时，所以在初始化节点的时候需要指定cgroupDriver为systemd</p><p>kubeadm.yaml配置文件如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kubeadm.k8s.io/v1beta3<span class="token key atrule">bootstrapTokens</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">groups</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> system<span class="token punctuation">:</span>bootstrappers<span class="token punctuation">:</span>kubeadm<span class="token punctuation">:</span>default<span class="token punctuation">-</span>node<span class="token punctuation">-</span>token  <span class="token key atrule">token</span><span class="token punctuation">:</span> abcdef.0123456789abcdef  <span class="token key atrule">ttl</span><span class="token punctuation">:</span> 24h0m0s  <span class="token key atrule">usages</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> signing  <span class="token punctuation">-</span> authentication<span class="token key atrule">kind</span><span class="token punctuation">:</span> InitConfiguration<span class="token key atrule">localAPIEndpoint</span><span class="token punctuation">:</span>  <span class="token key atrule">advertiseAddress</span><span class="token punctuation">:</span> 10.10.30.180  <span class="token comment"># 控制节点的IP</span>  <span class="token key atrule">bindPort</span><span class="token punctuation">:</span> <span class="token number">6443</span><span class="token key atrule">nodeRegistration</span><span class="token punctuation">:</span>  <span class="token key atrule">criSocket</span><span class="token punctuation">:</span> unix<span class="token punctuation">:</span>///run/containerd/containerd.sock  <span class="token comment"># 指定容器运行时</span>  <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent  <span class="token key atrule">name</span><span class="token punctuation">:</span> master1  <span class="token comment"># 控制节点主机名</span>  <span class="token key atrule">taints</span><span class="token punctuation">:</span> <span class="token null important">null</span><span class="token punctuation">---</span><span class="token key atrule">apiServer</span><span class="token punctuation">:</span>  <span class="token key atrule">timeoutForControlPlane</span><span class="token punctuation">:</span> 4m0s<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kubeadm.k8s.io/v1beta3<span class="token key atrule">certificatesDir</span><span class="token punctuation">:</span> /etc/kubernetes/pki<span class="token key atrule">clusterName</span><span class="token punctuation">:</span> kubernetes<span class="token key atrule">controllerManager</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token key atrule">dns</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token key atrule">etcd</span><span class="token punctuation">:</span>  <span class="token key atrule">local</span><span class="token punctuation">:</span>    <span class="token key atrule">dataDir</span><span class="token punctuation">:</span> /var/lib/etcd<span class="token key atrule">imageRepository</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/google_containers<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterConfiguration  <span class="token comment"># 指定阿里云镜像仓库地址</span><span class="token key atrule">kubernetesVersion</span><span class="token punctuation">:</span> 1.25.0  <span class="token comment"># k8s版本号</span><span class="token key atrule">networking</span><span class="token punctuation">:</span>  <span class="token key atrule">dnsDomain</span><span class="token punctuation">:</span> cluster.local  <span class="token key atrule">serviceSubnet</span><span class="token punctuation">:</span> 10.96.0.0/12  <span class="token comment"># 指定service网段</span>  <span class="token key atrule">podSubnet</span><span class="token punctuation">:</span> 10.224.0.0/16  <span class="token comment"># 增加行，指定pod网段</span><span class="token key atrule">scheduler</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment"># 在文件最后，插入以下内容，复制时注意要带---</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kubeproxy.config.k8s.io/v1alpha1<span class="token key atrule">kind</span><span class="token punctuation">:</span> KubeProxyConfiguration<span class="token key atrule">mode</span><span class="token punctuation">:</span> ipvs<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> kubelet.config.k8s.io/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> KubeletConfiguration<span class="token key atrule">cgroupDriver</span><span class="token punctuation">:</span> systemd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>特别提醒：–image-repository  registry.aliyuncs.com&#x2F;google_containers为保证拉取镜像不到国外站点拉取，手动指定仓库地址为registry.aliyuncs.com&#x2F;google_containers。kubeadm默认从k8s.gcr.io拉取镜像  我们本地有导入到的离线镜像，所以会优先使用本地的镜像。</p><p>mode: ipvs 表示kube-proxy代理模式是ipvs，如果不指定ipvs，会默认使用iptables，但是iptables效率低，所以我们生产环境建议开启ipvs，阿里云和华为云托管的K8s，也提供ipvs模式</p></blockquote><h4 id="1-17-导入k8s镜像"><a href="#1-17-导入k8s镜像" class="headerlink" title="1.17 导入k8s镜像"></a>1.17 导入k8s镜像</h4><p>使用ctr命令指定命名空间导入镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># ctr -n=k8s.io images import k8s_1.25.0.tar.gz</span><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># ctr -n=k8s.io images import k8s_1.25.0.tar.gz</span><span class="token punctuation">[</span>root@node2 ~<span class="token punctuation">]</span><span class="token comment"># ctr -n=k8s.io images import k8s_1.25.0.tar.gz</span><span class="token comment"># 查看镜像：crictl images</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>备注！这个k8s_1.25.0.tar.gz文件如何来的？<br>这个文件把安装k8s需要的镜像都集成好了，这个是我第一次安装1.25.0这个版本，获取到对应的镜像，通过ctr images export 这个命令把镜像输出到k8s_1.25.0.tar.gz文件，如果大家安装其他版本，那就不需要实现解压镜像，可以默认从网络拉取镜像即可。</p><blockquote><p>ctr是containerd自带的工具，有<strong>命名空间</strong>的概念，若是k8s相关的镜像，都默认在k8s.io这个命名空间，所以导入镜像时需要指定命令空间为k8s.io</p></blockquote></blockquote><h4 id="1-18-基于kubeadm-yaml初始化k8s集群"><a href="#1-18-基于kubeadm-yaml初始化k8s集群" class="headerlink" title="1.18 基于kubeadm.yaml初始化k8s集群"></a>1.18 基于kubeadm.yaml初始化k8s集群</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubeadm init --config=kubeadm.yaml --ignore-preflight-errors=SystemVerification</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示如下结果，说明安装成功<br>![[Pasted image 20221101223158.png]]</p><p>配置kubectl的配置文件config，相当于对kubectl进行授权，这样kubectl命令可以使用这个证书对k8s集群进行管理</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># mkdir -p $HOME/.kube</span><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get nodes</span>NAME      STATUS   ROLES           AGE   VERSIONmaster1   Ready    control-plane   24m   v1.25.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、扩容k8s集群"><a href="#二、扩容k8s集群" class="headerlink" title="二、扩容k8s集群"></a>二、扩容k8s集群</h3><h4 id="2-1-添加第一个工作节点"><a href="#2-1-添加第一个工作节点" class="headerlink" title="2.1 添加第一个工作节点"></a>2.1 添加第一个工作节点</h4><p>在master1上查看加入节点的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubeadm token create --print-join-command</span>kubeadm <span class="token function">join</span> <span class="token number">10.10</span>.30.180:6443 <span class="token parameter variable">--token</span> dgjher.cvk7i2lgn0gs323y --discovery-token-ca-cert-hash sha256:886a1cf6a95b4aa24ecb50e7b841664038fcd2c1fa956970b60d339039e83e62<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将上面输出结果，得到到Node1节点执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># kubeadm join 10.10.30.180:6443 --token dgjher.cvk7i2lgn0gs323y --discovery-token-ca-cert-hash sha256:886a1cf6a95b4aa24ecb50e7b841664038fcd2c1fa956970b60d339039e83e62</span><span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Running pre-flight checks<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Reading configuration from the cluster<span class="token punctuation">..</span>.<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> FYI: You can <span class="token function">look</span> at this config <span class="token function">file</span> with <span class="token string">'kubectl -n kube-system get cm kubeadm-config -o yaml'</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet configuration to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/config.yaml"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet environment <span class="token function">file</span> with flags to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/kubeadm-flags.env"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Starting the kubelet<span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> the kubelet to perform the TLS Bootstrap<span class="token punctuation">..</span>.This <span class="token function">node</span> has joined the cluster:* Certificate signing request was sent to apiserver and a response was received.* The Kubelet was informed of the new secure connection details.Run <span class="token string">'kubectl get nodes'</span> on the control-plane to see this <span class="token function">node</span> <span class="token function">join</span> the cluster.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加完成后，可以通过以下命令查看当前集群节点状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get nodes</span>NAME      STATUS   ROLES           AGE   VERSIONmaster1   Ready    control-plane   27m   v1.25.0node1     Ready    <span class="token operator">&lt;</span>none<span class="token operator">></span>          59s   v1.25.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-添加第二个工作节点"><a href="#2-2-添加第二个工作节点" class="headerlink" title="2.2 添加第二个工作节点"></a>2.2 添加第二个工作节点</h4><p>使用同样的方法添加node2节点到集群当中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubeadm token create --print-join-command</span>kubeadm <span class="token function">join</span> <span class="token number">10.10</span>.30.180:6443 <span class="token parameter variable">--token</span> ggnzvw.ov2niivc9kepx9ff --discovery-token-ca-cert-hash sha256:886a1cf6a95b4aa24ecb50e7b841664038fcd2c1fa956970b60d339039e83e62 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将上面输出结果，得到到Node2节点执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node2 ~<span class="token punctuation">]</span><span class="token comment"># kubeadm join 10.10.30.180:6443 --token ggnzvw.ov2niivc9kepx9ff --discovery-token-ca-cert-hash sha256:886a1cf6a95b4aa24ecb50e7b841664038fcd2c1fa956970b60d339039e83e62 </span><span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Running pre-flight checks<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> Reading configuration from the cluster<span class="token punctuation">..</span>.<span class="token punctuation">[</span>preflight<span class="token punctuation">]</span> FYI: You can <span class="token function">look</span> at this config <span class="token function">file</span> with <span class="token string">'kubectl -n kube-system get cm kubeadm-config -o yaml'</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet configuration to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/config.yaml"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Writing kubelet environment <span class="token function">file</span> with flags to <span class="token function">file</span> <span class="token string">"/var/lib/kubelet/kubeadm-flags.env"</span><span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Starting the kubelet<span class="token punctuation">[</span>kubelet-start<span class="token punctuation">]</span> Waiting <span class="token keyword">for</span> the kubelet to perform the TLS Bootstrap<span class="token punctuation">..</span>.This <span class="token function">node</span> has joined the cluster:* Certificate signing request was sent to apiserver and a response was received.* The Kubelet was informed of the new secure connection details.Run <span class="token string">'kubectl get nodes'</span> on the control-plane to see this <span class="token function">node</span> <span class="token function">join</span> the cluster.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加完成后，可以通过以下命令查看当前集群节点状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get nodes</span>NAME      STATUS   ROLES           AGE    VERSIONmaster1   Ready    control-plane   29m    v1.25.0node1     Ready    <span class="token operator">&lt;</span>none<span class="token operator">></span>          3m9s   v1.25.0node2     Ready    <span class="token operator">&lt;</span>none<span class="token operator">></span>          81s    v1.25.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-对工作节点打标签，方便识别"><a href="#2-3-对工作节点打标签，方便识别" class="headerlink" title="2.3 对工作节点打标签，方便识别"></a>2.3 对工作节点打标签，方便识别</h4><p>语法：<code>kubectl label nodes &lt;node-name&gt; &lt;label-key&gt;=&lt;label-value&gt; </code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl label nodes node2 node-role.kubernetes.io/work=work</span>node/node2 labeled<span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl label nodes node1 node-role.kubernetes.io/work=work</span>node/node1 labeled<span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get nodes</span>NAME      STATUS   ROLES           AGE     VERSIONmaster1   Ready    control-plane   31m     v1.25.0node1     Ready    work            4m12s   v1.25.0node2     Ready    work            2m24s   v1.25.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除一个Label，只需在命令行最后指定Label的key名并与一个减号相连即可：</p><p>语法：<code>kubectl label nodes kube-node label_name-</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get nodes</span>NAME      STATUS   ROLES           AGE     VERSIONmaster1   Ready    control-plane   3d15h   v1.25.0node1     Ready    work,work1      3d15h   v1.25.0node2     Ready    work,work2      3d15h   v1.25.0<span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl label nodes node2 node-role.kubernetes.io/work2-</span>node/node2 unlabeled<span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl label nodes node1 node-role.kubernetes.io/work1-</span>node/node1 unlabeled<span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get nodes</span>NAME      STATUS   ROLES           AGE     VERSIONmaster1   Ready    control-plane   3d15h   v1.25.0node1     Ready    work            3d15h   v1.25.0node2     Ready    work            3d15h   v1.25.0<span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl label nodes node1 node-role.kubernetes.io/work-</span>node/node1 unlabeled<span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl label nodes node2 node-role.kubernetes.io/work-</span>node/node2 unlabeled<span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get nodes</span>NAME      STATUS   ROLES           AGE     VERSIONmaster1   Ready    control-plane   3d15h   v1.25.0node1     Ready    <span class="token operator">&lt;</span>none<span class="token operator">></span>          3d15h   v1.25.0node2     Ready    <span class="token operator">&lt;</span>none<span class="token operator">></span>          3d15h   v1.25.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改一个label:</p><p>增加方法的基础上使用–overwrite 参数</p><p><code>kubectl label nodes kube-node label_name=label_value --overwrite</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl label nodes node1 worker01=work01</span>error: <span class="token string">'worker01'</span> already has a value <span class="token punctuation">(</span>worker01<span class="token punctuation">)</span>, and <span class="token parameter variable">--overwrite</span> is <span class="token boolean">false</span><span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl label nodes node1 worker01=work01 --overwrite</span>node/node1 labeled<span class="token punctuation">[</span>root@master1 pod<span class="token punctuation">]</span><span class="token comment"># kubectl get nodes --show-labels</span>NAME      STATUS   ROLES           AGE     VERSION   LABELSmaster1   Ready    control-plane   3d16h   v1.25.0   beta.kubernetes.io/arch<span class="token operator">=</span>amd64,beta.kubernetes.io/os<span class="token operator">=</span>linux,kubernetes.io/arch<span class="token operator">=</span>amd64,kubernetes.io/hostname<span class="token operator">=</span>master1,kubernetes.io/os<span class="token operator">=</span>linux,node-role.kubernetes.io/control-plane<span class="token operator">=</span>,node.kubernetes.io/exclude-from-external-load-balancers<span class="token operator">=</span>node1     Ready    work1           3d15h   v1.25.0   beta.kubernetes.io/arch<span class="token operator">=</span>amd64,beta.kubernetes.io/os<span class="token operator">=</span>linux,kubernetes.io/arch<span class="token operator">=</span>amd64,kubernetes.io/hostname<span class="token operator">=</span>node1,kubernetes.io/os<span class="token operator">=</span>linux,node-role.kubernetes.io/work1<span class="token operator">=</span>work1,worker01<span class="token operator">=</span>work01node2     Ready    work2           3d15h   v1.25.0   beta.kubernetes.io/arch<span class="token operator">=</span>amd64,beta.kubernetes.io/os<span class="token operator">=</span>linux,kubernetes.io/arch<span class="token operator">=</span>amd64,kubernetes.io/hostname<span class="token operator">=</span>node2,kubernetes.io/os<span class="token operator">=</span>linux,node-role.kubernetes.io/work2<span class="token operator">=</span>work2,worker02<span class="token operator">=</span>worker02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-安装kubernetes网络插件-Calico"><a href="#2-4-安装kubernetes网络插件-Calico" class="headerlink" title="2.4 安装kubernetes网络插件-Calico"></a>2.4 安装kubernetes网络插件-Calico</h4><p>把安装calico需要的镜像calico.tar.gz传到master1、xianchaomaster2、xianchaomaster3和node1节点，手动解压</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># ctr -n=k8s.io images import calico.tar.gz</span><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># ctr -n=k8s.io images import calico.tar.gz </span><span class="token punctuation">[</span>root@node2 ~<span class="token punctuation">]</span><span class="token comment"># ctr -n=k8s.io images import calico.tar.gz </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上传calico.yaml到master1上，使用yaml文件安装calico 网络插件</p><blockquote><p>注：在线下载配置文件地址是： <a href="https://docs.projectcalico.org/manifests/calico.yaml">https://docs.projectcalico.org/manifests/calico.yaml</a></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl apply -f calico.yaml </span><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get nodes</span>NAME      STATUS   ROLES           AGE     VERSIONmaster1   Ready    control-plane   35m     v1.25.0node1     Ready    work            9m2s    v1.25.0node2     Ready    work            7m14s   v1.25.0<span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get pods -n kube-system</span>NAME                                       READY   STATUS    RESTARTS   AGEcalico-kube-controllers-6744f6b6d5-nnblc   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          106scalico-node-22g7q                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          106scalico-node-fvp5g                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          106scalico-node-wqwwg                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          106scoredns-7f8cbcb969-2r662                   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          37mcoredns-7f8cbcb969-kpgsv                   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          37metcd-master1                               <span class="token number">1</span>/1     Running   <span class="token number">0</span>          37mkube-apiserver-master1                     <span class="token number">1</span>/1     Running   <span class="token number">0</span>          37mkube-controller-manager-master1            <span class="token number">1</span>/1     Running   <span class="token number">0</span>          37mkube-proxy-7vjk5                           <span class="token number">1</span>/1     Running   <span class="token number">0</span>          8m42skube-proxy-mfpcg                           <span class="token number">1</span>/1     Running   <span class="token number">0</span>          37mkube-proxy-pv87q                           <span class="token number">1</span>/1     Running   <span class="token number">0</span>          10mkube-scheduler-master1                     <span class="token number">1</span>/1     Running   <span class="token number">0</span>          37m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-calico网络插件配置文件说明"><a href="#2-5-calico网络插件配置文件说明" class="headerlink" title="2.5 calico网络插件配置文件说明"></a>2.5 calico网络插件配置文件说明</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Cluster type to identify the deployment type</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> CLUSTER_TYPE  <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"k8s,bgp"</span><span class="token comment"># Auto-detect the BGP IP address.</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> IP  <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"autodetect"</span><span class="token comment"># Enable IPIP</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> CALICO_IPV4POOL_IPIP  <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"Always"</span><span class="token comment"># Enable or Disable VXLAN on the default IP pool.</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> CALICO_IPV4POOL_VXLAN  <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"Never"</span><span class="token comment"># Set MTU for tunnel device used if ipip is enabled</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> FELIX_IPINIPMTU  valueFrom<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>calico-node服务的主要参数如下:<br><strong>CALICO_IPV4POOL_IPIP：</strong> 是否启用IPIP模式。启用IPIP模式时，Calico将在Node上创建一个名为tunl0的虚拟隧道。IP Pool可以使用两种模式：BGP或IPIP。使用IPIP模式时，设置CALICO_IPV4POOL_IPIP&#x3D;”Always”，不使用IPIP模式时，设置CALICO_IPV4POOL_IPIP&#x3D;”Off”，此时将使用BGP模式。</p><p><strong>IP_AUTODETECTION_METHOD</strong>：获取Node IP地址的方式，默认使用第1个网络接口的IP地址，对于安装了多块网卡的Node，可以使用正则表达式选择正确的网卡，例如”interface&#x3D;eth.*”  表示选择名称以eth开头的网卡的IP地址。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span>  name<span class="token punctuation">:</span> IP_AUTODETECTION_METHOD  value<span class="token punctuation">:</span> <span class="token string">"interface=ens33"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>扩展：calico的IPIP模式和BGP模式对比分析</p><p><strong>1）IPIP</strong><br>把一个IP数据包又套在一个IP包里，即把IP层封装到IP层的一个 tunnel，它的作用其实基本上就相当于一个基于IP层的网桥，一般来说，普通的网桥是基于mac层的，根本不需要IP，而这个ipip则是通过两端的路由做一个tunnel，把两个本来不通的网络通过点对点连接起来；</p><p>calico以ipip模式部署完毕后，node上会有一个tunl0的网卡设备，这是ipip做隧道封装用的,也是一种overlay模式的网络。当我们把节点下线，calico容器都停止后，这个设备依然还在，执行 rmmodipip命令可以将它删除。</p><p><strong>2）BGP</strong><br>BGP模式直接使用物理机作为虚拟路由路（vRouter），不再创建额外的tunnel</p><p>边界网关协议（BorderGateway Protocol, BGP）是互联网上一个核心的去中心化的自治路由协议。它通过维护IP路由表或‘前缀’表来实现自治系统（AS）之间的可达性，属于矢量路由协议。BGP不使用传统的内部网关协议（IGP）的指标，而是基于路径、网络策略或规则集来决定路由。因此，它更适合被称为矢量性协议，而不是路由协议，通俗的说就是将接入到机房的多条线路（如电信、联通、移动等）融合为一体，实现多线单IP；</p><p>BGP 机房的优点：服务器只需要设置一个IP地址，最佳访问路由是由网络上的骨干路由器根据路由跳数与其它技术指标来确定的，不会占用服务器的任何系统；</p><p>官方提供的calico.yaml模板里，默认打开了ip-ip功能，该功能会在node上创建一个设备tunl0，容器的网络数据会经过该设备被封装一个ip头再转发。这里，calico.yaml中通过修改calico-node的环境变量：CALICO_IPV4POOL_IPIP来实现ipip功能的开关：默认是Always，表示开启；Off表示关闭ipip。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span>  CLUSTER_TYPE              value<span class="token punctuation">:</span> <span class="token string">"k8s,bgp"</span>            <span class="token comment"># Auto-detect the BGP IP address.</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> IP              value<span class="token punctuation">:</span> <span class="token string">"autodetect"</span>            <span class="token comment"># Enable IPIP</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> CALICO_IPV4POOL_IPIP              value<span class="token punctuation">:</span> <span class="token string">"Always"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：<br>calico BGP通信是基于TCP协议的，所以只要节点间三层互通即可完成，即三层互通的环境bird就能生成与邻居有关的路由。但是这些路由和flannel host-gateway模式一样，需要二层互通才能访问的通，因此如果在实际环境中配置了BGP模式生成了路由但是不同节点间pod访问不通，可能需要再确认下节点间是否二层互通。</p><p>为了解决节点间二层不通场景下的跨节点通信问题，calico也有自己的解决方案——IPIP模式</p><h4 id="2-6-测试"><a href="#2-6-测试" class="headerlink" title="2.6 测试"></a>2.6 测试</h4><p>在k8s上创建pod是否可以正常访问网络<br>把busybox-1-28.tar.gz上传到node1和node2节点，手动解压</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># ctr -n k8s.io images import busybox-1-28.tar.gz</span><span class="token punctuation">[</span>root@node2 ~<span class="token punctuation">]</span><span class="token comment"># ctr -n k8s.io images import busybox-1-28.tar.gz</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在master1节点运行，并测试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl run busybox --image docker.io/library/busybox:1.28  --image-pull-policy=IfNotPresent --restart=Never --rm -it busybox -- sh</span>If you don't see a <span class="token builtin class-name">command</span> prompt, try pressing enter./ <span class="token comment"># ping www.baidu.com</span>PING www.baidu.com <span class="token punctuation">(</span><span class="token number">110.242</span>.68.4<span class="token punctuation">)</span>: <span class="token number">56</span> data bytes<span class="token number">64</span> bytes from <span class="token number">110.242</span>.68.4: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">127</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">13.429</span> ms<span class="token number">64</span> bytes from <span class="token number">110.242</span>.68.4: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">127</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">11.507</span> ms^C--- www.baidu.com <span class="token function">ping</span> statistics ---<span class="token number">2</span> packets transmitted, <span class="token number">2</span> packets received, <span class="token number">0</span>% packet lossround-trip min/avg/max <span class="token operator">=</span> <span class="token number">11.507</span>/12.468/13.429 ms<span class="token comment"># 通过上面可以看可以访问网络，说明calico网络插件已经被正常安装了</span>/ <span class="token comment"># nslookup kubernetes.default.svc.cluster.local</span>Server:    <span class="token number">10.96</span>.0.10Address <span class="token number">1</span>: <span class="token number">10.96</span>.0.10 kube-dns.kube-system.svc.cluster.localName:      kubernetes.default.svc.cluster.localAddress <span class="token number">1</span>: <span class="token number">10.96</span>.0.1 kubernetes.default.svc.cluster.local/ <span class="token comment"># exit</span>pod <span class="token string">"busybox"</span> deletedYou have new mail <span class="token keyword">in</span> /var/spool/mail/root<span class="token comment"># 10.96.0.10 就是我们coreDNS的clusterIP，说明coreDNS配置好了。</span>解析内部Service的名称，是通过coreDNS去解析的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、ctr和crictl的区别"><a href="#三、ctr和crictl的区别" class="headerlink" title="三、ctr和crictl的区别"></a>三、ctr和crictl的区别</h3><p>背景：在部署k8s的过程中，经常要对镜像进行操作（拉取、删除、查看等）<br>问题：使用过程中会发现ctr和crictl有很多相同功能，也有些不同，那区别到底在哪里？<br>说明：</p><ol><li>ctr是containerd自带的CLI命令行工具，crictl是k8s中CRI（容器运行时接口）的客户端，k8s使用该客户端和containerd进行交互；</li><li>ctr和crictl命令具体区别如下，也可以–help查看。crictl缺少对具体镜像的管理能力，可能是k8s层面镜像管理可以由用户自行控制，能配置pod里面容器的统一镜像仓库，镜像的管理可以有habor等插件进行处理。</li></ol><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/image-20221103133432356.png"></p>]]></content>
      
      
      <categories>
          
          <category> K8S笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s集群安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装docker</title>
      <link href="/2023/02/12/docker/an-zhuang-docker/"/>
      <url>/2023/02/12/docker/an-zhuang-docker/</url>
      
        <content type="html"><![CDATA[<h4 id="1、配置主机名："><a href="#1、配置主机名：" class="headerlink" title="1、配置主机名："></a>1、配置主机名：</h4><p>[root@mxg-master1 ~]# <code>hostnamectl set-hostname mxg-master1 &amp;&amp; bash</code></p><h4 id="2、关闭防火墙"><a href="#2、关闭防火墙" class="headerlink" title="2、关闭防火墙"></a>2、关闭防火墙</h4><p>[root@mxg-master1 ~]# <code>systemctl stop firewalld &amp;&amp; systemctl disable firewalld</code></p><h4 id="3、关闭selinux"><a href="#3、关闭selinux" class="headerlink" title="3、关闭selinux"></a>3、关闭selinux</h4><p>[root@mxg-master1 ~]# <code>setenforce 0</code><br>[root@mxg-master1 ~]# <code>sed -i &#39;s/SELINUX=enforcing/SELINUX=disabled/g&#39; </code>&#x2F;etc&#x2F;selinux&#x2F;config<br>注意：修改selinux配置文件之后，重启机器，selinux才能永久生效</p><p>[root@mxg-master1 ~]# getenforce<br>显示Disabled表示selinux关闭成功</p><h4 id="4、配置时间同步"><a href="#4、配置时间同步" class="headerlink" title="4、配置时间同步"></a>4、配置时间同步</h4><p>[root@mxg-master1 ~]# yum install -y ntp ntpdate<br>[root@mxg-master1 ~]# ntpdate cn.pool.ntp.org<br>#编写计划任务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@mxg-master1 ~<span class="token punctuation">]</span><span class="token comment"># crontab -e </span>* */1 * * * /usr/sbin/ntpdate cn.pool.ntp.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重启crond服务使配置生效：<br>[root@mxg-master1 ~]# systemctl restart crond</p><h4 id="5、安装基础软件包"><a href="#5、安装基础软件包" class="headerlink" title="5、安装基础软件包"></a>5、安装基础软件包</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@mxg-master1 ~<span class="token punctuation">]</span><span class="token comment"># yum install -y  wget net-tools nfs-utils lrzsz gcc gcc-c++ make cmake libxml2-devel openssl-devel curl curl-devel unzip sudo ntp libaio-devel wget vim ncurses-devel autoconf automake zlib-devel python-devel epel-release openssh-server socat ipvsadm conntrack </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6、安装docker-ce"><a href="#6、安装docker-ce" class="headerlink" title="6、安装docker-ce"></a>6、安装docker-ce</h4><h5 id="6-1-安装docker依赖包"><a href="#6-1-安装docker依赖包" class="headerlink" title="6.1 安装docker依赖包"></a>6.1 安装docker依赖包</h5><p>[root@mxg-master1 ~]# yum install -y yum-utils device-mapper-persistent-data lvm2</p><h5 id="6-2-配置docker-ce国内yum源（阿里云）"><a href="#6-2-配置docker-ce国内yum源（阿里云）" class="headerlink" title="6.2 配置docker-ce国内yum源（阿里云）"></a>6.2 配置docker-ce国内yum源（阿里云）</h5><p>[root@mxg-master1 ~]# yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p><h5 id="6-3-安装docker-ce"><a href="#6-3-安装docker-ce" class="headerlink" title="6.3 安装docker-ce"></a>6.3 安装docker-ce</h5><p>[root@mxg-master1 ~]# yum install docker-ce -y</p><h5 id="6-4-启动docker服务"><a href="#6-4-启动docker服务" class="headerlink" title="6.4 启动docker服务"></a>6.4 启动docker服务</h5><p>[root@mxg-master1 ~]# systemctl start docker &amp;&amp; systemctl enable docker<br>[root@mxg-master1 ~]# systemctl status docker</p><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/image-20221029171525797.png" alt="image-20221029171525797"></p><h5 id="6-5-查看docker版本信息"><a href="#6-5-查看docker版本信息" class="headerlink" title="6.5 查看docker版本信息"></a>6.5 查看docker版本信息</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@mxg-master1 ~<span class="token punctuation">]</span><span class="token comment"># docker version</span>Client: Docker Engine - Community Version:           <span class="token number">20.10</span>.21 API version:       <span class="token number">1.41</span> Go version:        go1.18.7 Git commit:        baeda1f Built:             Tue Oct <span class="token number">25</span> <span class="token number">18</span>:04:24 <span class="token number">2022</span> OS/Arch:           linux/amd64 Context:           default Experimental:      <span class="token boolean">true</span>Server: Docker Engine - Community Engine:  Version:          <span class="token number">20.10</span>.21  API version:      <span class="token number">1.41</span> <span class="token punctuation">(</span>minimum version <span class="token number">1.12</span><span class="token punctuation">)</span>  Go version:       go1.18.7  Git commit:       <span class="token number">3056208</span>  Built:            Tue Oct <span class="token number">25</span> <span class="token number">18</span>:02:38 <span class="token number">2022</span>  OS/Arch:          linux/amd64  Experimental:     <span class="token boolean">false</span> containerd:  Version:          <span class="token number">1.6</span>.9  GitCommit:        1c90a442489720eec95342e1789ee8a5e1b9536f runc:  Version:          <span class="token number">1.1</span>.4  GitCommit:        v1.1.4-0-g5fd4c4d docker-init:  Version:          <span class="token number">0.19</span>.0  GitCommit:        de40ad0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7、开启包转发功能和修改内核参数"><a href="#7、开启包转发功能和修改内核参数" class="headerlink" title="7、开启包转发功能和修改内核参数"></a>7、开启包转发功能和修改内核参数</h4><p>内核参数修改：br_netfilter模块用于将桥接流量转发至iptables链，br_netfilter内核参数需要开启转发。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@mxg-master1 ~<span class="token punctuation">]</span><span class="token comment"># modprobe br_netfilter</span><span class="token punctuation">[</span>root@mxg-master1 ~<span class="token punctuation">]</span><span class="token comment"># cat > /etc/sysctl.d/docker.conf &lt;&lt;EOF</span>net.bridge.bridge-nf-call-ip6tables <span class="token operator">=</span> <span class="token number">1</span>net.bridge.bridge-nf-call-iptables <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span>EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使参数生效<br>[root@mxg-master1 ~]# sysctl -p &#x2F;etc&#x2F;sysctl.d&#x2F;docker.conf</p><p>重启后模块失效，下面是开机自动加载模块的脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在/etc/新建rc.sysinit 文件</span><span class="token function">cat</span> /etc/rc.sysinit<span class="token comment">#!/bin/bash</span><span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> /etc/sysconfig/modules/*.modules <span class="token punctuation">;</span> <span class="token keyword">do</span><span class="token punctuation">[</span> <span class="token parameter variable">-x</span> <span class="token variable">$file</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span><span class="token keyword">done</span><span class="token comment"># 在/etc/sysconfig/modules/目录下新建文件如下</span><span class="token function">cat</span> /etc/sysconfig/modules/br_netfilter.modulesmodprobe br_netfilter<span class="token comment"># 增加权限</span><span class="token punctuation">[</span>root@mxg-master1 ~<span class="token punctuation">]</span><span class="token comment"># chmod 755 /etc/sysconfig/modules/br_netfilter.modules</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：<br>Docker 安装后出现：WARNING: bridge-nf-call-iptables is disabled 的解决办法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">net.bridge.bridge-nf-call-ip6tables <span class="token operator">=</span> <span class="token number">1</span>net.bridge.bridge-nf-call-iptables <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span>：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将Linux系统作为路由或者VPN服务就必须要开启IP转发功能。当linux主机有多个网卡时一个网卡收到的信息是否能够传递给其他的网卡 ，如果设置成1 的话 可以进行数据包转发，可以实现VxLAN 等功能。不开启会导致docker部署应用无法访问。</p><p>#重启docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@mxg-master1 ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart docker  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8、配置docker镜像加速器"><a href="#8、配置docker镜像加速器" class="headerlink" title="8、配置docker镜像加速器"></a>8、配置docker镜像加速器</h4><p>登陆阿里云镜像仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改/etc/docker/daemon.json，变成如下</span><span class="token punctuation">&#123;</span> <span class="token string">"registry-mirrors"</span>:<span class="token punctuation">[</span><span class="token string">"https://y8y6vosv.mirror.aliyuncs.com"</span>,<span class="token string">"https://registry.docker-cn.com"</span>,<span class="token string">"https://docker.mirrors.ustc.edu.cn"</span>,<span class="token string">"https://dockerhub.azk8s.cn"</span>,<span class="token string">"http://hub-mirror.c.163.com"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment"># 让配置文件生效</span>systemctl daemon-reloadsystemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9、docker的基本用法"><a href="#9、docker的基本用法" class="headerlink" title="9、docker的基本用法"></a>9、docker的基本用法</h4><h5 id="9-1-镜像相关操作"><a href="#9-1-镜像相关操作" class="headerlink" title="9.1 镜像相关操作"></a>9.1 镜像相关操作</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从dockerhub查找镜像</span><span class="token punctuation">[</span>root@mxg-master1 ~<span class="token punctuation">]</span><span class="token comment"># docker search centos</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解释说明：<br>NAME: 镜像仓库源的名称<br>DESCRIPTION: 镜像的描述<br>OFFICIAL: 是否 docker 官方发布<br>STARS: 类似 Github 里面的 star，表示点赞、喜欢的意思。<br>AUTOMATED: 自动构建。</p><h5 id="9-2下载镜像"><a href="#9-2下载镜像" class="headerlink" title="9.2下载镜像"></a>9.2下载镜像</h5><p>[root@mxg-master1 ~]# docker pull centos</p><h5 id="9-3-查看本地镜像"><a href="#9-3-查看本地镜像" class="headerlink" title="9.3 查看本地镜像"></a>9.3 查看本地镜像</h5><p>[root@mxg-master1 ~]# docker images</p><h5 id="9-4-把镜像做成离线压缩包"><a href="#9-4-把镜像做成离线压缩包" class="headerlink" title="9.4 把镜像做成离线压缩包"></a>9.4 把镜像做成离线压缩包</h5><p>[root@mxg-master1 ~]# docker save -o centos.tar.gz centos</p><h5 id="9-5-解压离线镜像包"><a href="#9-5-解压离线镜像包" class="headerlink" title="9.5 解压离线镜像包"></a>9.5 解压离线镜像包</h5><p>[root@mxg-master1 ~]# docker load -i centos.tar.gz </p><h5 id="9-6-删除镜像"><a href="#9-6-删除镜像" class="headerlink" title="9.6 删除镜像"></a>9.6 删除镜像</h5><p>[root@mxg-master1 ~]# docker rmi -f centos:latest</p><h4 id="10、容器相关操作"><a href="#10、容器相关操作" class="headerlink" title="10、容器相关操作"></a>10、容器相关操作</h4><h5 id="10-1-以交互式方式启动并进入容器"><a href="#10-1-以交互式方式启动并进入容器" class="headerlink" title="10.1 以交互式方式启动并进入容器"></a>10.1 以交互式方式启动并进入容器</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@mxg-master1 ~<span class="token punctuation">]</span><span class="token comment"># docker run --name=hello -it centos /bin/bash</span><span class="token punctuation">[</span>root@09c4933b5cd7 /<span class="token punctuation">]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入exit，退出容器，退出之后容器也会停止，不会再前台运行</p><p>参数说明：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">docker run 运行并创建容器--name  容器的名字-i  交互式-t  分配伪终端centos：启动docker需要的镜像/bin/bash：说明你的shell类型为bash，bash shell是最常用的一种shell, 是大多数Linux发行版默认的shell。 此外还有C shell等其它shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="10-2-以守护进程方式启动容器"><a href="#10-2-以守护进程方式启动容器" class="headerlink" title="10.2  以守护进程方式启动容器"></a>10.2  以守护进程方式启动容器</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@mxg-master1 ~<span class="token punctuation">]</span><span class="token comment"># docker run --name=hello1 -td centos </span><span class="token punctuation">[</span>root@mxg-master1 ~<span class="token punctuation">]</span><span class="token comment"># docker ps |grep hello1</span>1a2b73ba0ac2   centos            <span class="token string">"/bin/bash"</span>             hello1<span class="token comment"># -d 在后台运行docker</span><span class="token punctuation">[</span>root@mxg-master1 ~<span class="token punctuation">]</span><span class="token comment"># docker exec -it hello1 /bin/bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="10-3-查看正在运行的容器"><a href="#10-3-查看正在运行的容器" class="headerlink" title="10.3 查看正在运行的容器"></a>10.3 查看正在运行的容器</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看所有容器，包括运行和退出的容器</span><span class="token punctuation">[</span>root@mxg-master1 ~<span class="token punctuation">]</span><span class="token comment"># docker ps -a  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="10-4-停止和启动、进入容器"><a href="#10-4-停止和启动、进入容器" class="headerlink" title="10.4 停止和启动、进入容器"></a>10.4 停止和启动、进入容器</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> stop hello1<span class="token function">docker</span> start hello1<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> hello1 /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="10-5-删除容器"><a href="#10-5-删除容器" class="headerlink" title="10.5 删除容器"></a>10.5 删除容器</h5><p>[root@mxg-master1 ~]# docker rm -f hello1 #删除容器</p><p>[root@mxg-master1 ~]# docker –help</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible入门</title>
      <link href="/2023/02/12/ansible/ansible-ru-men/"/>
      <url>/2023/02/12/ansible/ansible-ru-men/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>万字干货 - 提升十倍运维效率 - Ansible 入门到精通</strong></p></blockquote><ul><li><h4 id="Ansible-命令使用"><a href="#Ansible-命令使用" class="headerlink" title="Ansible 命令使用"></a>Ansible 命令使用</h4></li><li><h4 id="Ansible-常用模块详解"><a href="#Ansible-常用模块详解" class="headerlink" title="Ansible 常用模块详解"></a>Ansible 常用模块详解</h4></li><li><h4 id="YAML-语法简介"><a href="#YAML-语法简介" class="headerlink" title="YAML 语法简介"></a>YAML 语法简介</h4></li><li><h4 id="Ansible-playbook-基础"><a href="#Ansible-playbook-基础" class="headerlink" title="Ansible playbook 基础"></a>Ansible playbook 基础</h4></li><li><h4 id="Playbook-变量、tags、handlers-使用"><a href="#Playbook-变量、tags、handlers-使用" class="headerlink" title="Playbook 变量、tags、handlers 使用"></a>Playbook 变量、tags、handlers 使用</h4></li><li><h4 id="Playbook-模板-templates"><a href="#Playbook-模板-templates" class="headerlink" title="Playbook 模板 templates"></a>Playbook 模板 templates</h4></li><li><h4 id="Playbook-条件判断-when"><a href="#Playbook-条件判断-when" class="headerlink" title="Playbook 条件判断 when"></a>Playbook 条件判断 when</h4></li><li><h4 id="Playbook-字典-with-items"><a href="#Playbook-字典-with-items" class="headerlink" title="Playbook 字典 with_items"></a>Playbook 字典 with_items</h4></li><li><h4 id="Ansible-Roles"><a href="#Ansible-Roles" class="headerlink" title="Ansible Roles"></a>Ansible Roles</h4></li></ul><p><strong>相关工具</strong></p><ul><li>代码管理（SCM）：GitHub、GitLab、BitBucket、SubVersion</li><li>构建工具：maven、Ant、Gradle</li><li>自动部署：Capistrano、CodeDeploy</li><li>持续集成（CI）：Jenkins、Travis</li><li>配置管理：Ansible、SaltStack、Chef、Puppet</li><li>容器：Docker、Podman、LXC、第三方厂商如 AWS</li><li>编排：Kubernetes、Core、Apache Mesos</li><li>服务注册与发现：Zookeeper、etcd、Consul</li><li>脚本语言：python、ruby、shell</li><li>日志管理：ELK、Logentries</li><li>系统监控：Prometheus、Zabbix、Datadog、Graphite、Ganglia、Nagios</li><li>性能监控：AppDynamics、New Relic、Splunk</li><li>压力测试：JMeter、Blaze Meter、loader.io</li><li>应用服务器：Tomcat、JBoss、IIS</li><li>Web 服务器：Apache、Nginx</li><li>数据库：MySQL、Oracle、PostgreSQL 等关系型数据库；mongoDB、redis 等 NoSQL 数据库</li><li>项目管理（PM）：Jira、Asana、Taiga、Trello、Basecamp、Pivotal Tracker</li></ul><hr><h3 id="一、Ansible-介绍和架构"><a href="#一、Ansible-介绍和架构" class="headerlink" title="一、Ansible 介绍和架构"></a>一、Ansible 介绍和架构</h3><p>公司计划在年底做一次大型市场促销活动，全面冲刺下交易额，为明年的上市做准备。公司要求各业务组对年底大促做准备，运维部要求所有业务容量进行三倍的扩容，并搭建出多套环境可以共开发和测试人员做测试，运维老大为了在年底有所表现，要求运维部门同学尽快实现，当你接到这个任务时，有没有更快的解决方案？</p><h4 id="1-1-Ansible-发展史"><a href="#1-1-Ansible-发展史" class="headerlink" title="1.1 Ansible 发展史"></a>1.1 Ansible 发展史</h4><p>作者：Michael DeHaan（ Cobbler 与 Func 作者）</p><p>ansible 的名称来自科幻小说《安德的游戏》中跨越时空的即时通信工具，使用它可以在相距数光年的距离，远程实时控制前线的舰队战斗。</p><p>2012-03-09，发布 0.0.1 版，2015-10-17，Red Hat 宣布 1.5 亿美元收购</p><p>官网：<a href="https://www.ansible.com/">https://www.ansible.com/</a> 官方文档：<a href="https://docs.ansible.com/">https://docs.ansible.com/</a></p><h4 id="1-2-Ansible-特性"><a href="#1-2-Ansible-特性" class="headerlink" title="1.2 Ansible 特性"></a>1.2 Ansible 特性</h4><ul><li>模块化：调用特定的模块完成特定任务，支持自定义模块，可使用任何编程语言写模块</li><li>Paramiko（python 对 ssh 的实现），PyYAML，Jinja2（模板语言）三个关键模块</li><li>基于 Python 语言实现</li><li>部署简单，基于 python 和 SSH(默认已安装)，agentless，无需代理不依赖 PKI（无需 ssl）</li><li>安全，基于 OpenSSH</li><li>幂等性：一个任务执行 1 遍和执行 n 遍效果一样，不因重复执行带来意外情况</li><li>支持 playbook 编排任务，YAML 格式，编排任务，支持丰富的数据结构</li><li>较强大的多层解决方案 role</li></ul><h4 id="1-3-Ansible-架构"><a href="#1-3-Ansible-架构" class="headerlink" title="1.3 Ansible 架构"></a>1.3 Ansible 架构</h4><h5 id="1-3-1-Ansible-组成"><a href="#1-3-1-Ansible-组成" class="headerlink" title="1.3.1 Ansible 组成"></a>1.3.1 Ansible 组成</h5><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/20200609220050772.png"></p><p>组合 INVENTORY、API、MODULES、PLUGINS 的绿框，可以理解为是 ansible 命令工具，其为核心执行工具</p><ul><li>INVENTORY：Ansible 管理主机的清单 &#x2F; etc&#x2F;anaible&#x2F;hosts</li><li>MODULES：Ansible 执行命令的功能模块，多数为内置核心模块，也可自定义</li><li>PLUGINS：模块功能的补充，如连接类型插件、循环插件、变量插件、过滤插件等，该功能不常用</li><li>API：供第三方程序调用的应用程序编程接口</li></ul><h5 id="1-3-2-Ansible-命令执行来源"><a href="#1-3-2-Ansible-命令执行来源" class="headerlink" title="1.3.2 Ansible 命令执行来源"></a>1.3.2 Ansible 命令执行来源</h5><ul><li>USER 普通用户，即 SYSTEM ADMINISTRATOR</li><li>PLAYBOOKS：任务剧本（任务集），编排定义 Ansible 任务集的配置文件，由 Ansible 顺序依次执行，通常是 JSON 格式的 YML 文件</li><li>CMDB（配置管理数据库） API 调用</li><li>PUBLIC&#x2F;PRIVATE CLOUD API 调用</li><li>USER-&gt; Ansible Playbook -&gt; Ansibile</li></ul><h5 id="1-3-3-注意事项"><a href="#1-3-3-注意事项" class="headerlink" title="1.3.3 注意事项"></a>1.3.3 注意事项</h5><ul><li>执行 ansible 的主机一般称为主控端，中控，master 或堡垒机</li><li>主控端 Python 版本需要 2.6 或以上</li><li>被控端 Python 版本小于 2.4，需要安装 python-simplejson</li><li>被控端如开启 SELinux 需要安装 libselinux-python</li><li>windows 不能做为主控端</li></ul><h3 id="二、Ansible-安装和入门"><a href="#二、Ansible-安装和入门" class="headerlink" title="二、Ansible 安装和入门"></a>二、Ansible 安装和入门</h3><h4 id="2-1-Ansible-安装"><a href="#2-1-Ansible-安装" class="headerlink" title="2.1 Ansible 安装"></a>2.1 Ansible 安装</h4><p>ansible 的安装方法有多种</p><h5 id="2-1-1-EPEL-源的-rpm-包安装"><a href="#2-1-1-EPEL-源的-rpm-包安装" class="headerlink" title="2.1.1 EPEL 源的 rpm 包安装"></a>2.1.1 EPEL 源的 rpm 包安装</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment"># yum install ansible</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-1-2-编译安装"><a href="#2-1-2-编译安装" class="headerlink" title="2.1.2 编译安装"></a>2.1.2 编译安装</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> python-jinja2 PyYAML python-paramiko python-babel python-crypto<span class="token function">tar</span> xf ansible-1.5.4.tar.gz<span class="token builtin class-name">cd</span> ansible-1.5.4python setup.py buildpython setup.py <span class="token function">install</span><span class="token function">mkdir</span> /etc/ansible<span class="token function">cp</span> <span class="token parameter variable">-r</span> examples/* /etc/ansible<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-1-3-Git-方式"><a href="#2-1-3-Git-方式" class="headerlink" title="2.1.3 Git 方式"></a>2.1.3 Git 方式</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git://github.com/ansible/ansible.git <span class="token parameter variable">--recursive</span><span class="token builtin class-name">cd</span> ./ansible<span class="token builtin class-name">source</span> ./hacking/env-setup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-1-4-pip-安装"><a href="#2-1-4-pip-安装" class="headerlink" title="2.1.4 pip 安装"></a>2.1.4 pip 安装</h5><p>pip 是安装 Python 包的管理器，类似 yum</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> python-pip python-develyum <span class="token function">install</span> gcc glibc-devel zibl-devel  rpm-bulid openssl-develpip <span class="token function">install</span>  <span class="token parameter variable">--upgrade</span> pippip <span class="token function">install</span> ansible <span class="token parameter variable">--upgrade</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-1-5-确认安装"><a href="#2-1-5-确认安装" class="headerlink" title="2.1.5 确认安装"></a>2.1.5 确认安装</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@RHCE8 ~<span class="token punctuation">]</span><span class="token comment"># ansible --version</span>ansible <span class="token number">2.9</span>.7  config <span class="token function">file</span> <span class="token operator">=</span> /etc/ansible/ansible.cfg  configured module search path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'/root/.ansible/plugins/modules'</span>, <span class="token string">'/usr/share/ansible/plugins/modules'</span><span class="token punctuation">]</span>  ansible python module location <span class="token operator">=</span> /usr/lib/python3.6/site-packages/ansible  executable location <span class="token operator">=</span> /usr/bin/ansible  python version <span class="token operator">=</span> <span class="token number">3.6</span>.8 <span class="token punctuation">(</span>default, Oct <span class="token number">11</span> <span class="token number">2019</span>, <span class="token number">15</span>:04:54<span class="token punctuation">)</span> <span class="token punctuation">[</span>GCC <span class="token number">8.3</span>.1 <span class="token number">20190507</span> <span class="token punctuation">(</span>Red Hat <span class="token number">8.3</span>.1-4<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-Ansible-相关文件"><a href="#2-2-Ansible-相关文件" class="headerlink" title="2.2 Ansible 相关文件"></a>2.2 Ansible 相关文件</h4><h5 id="2-2-1-配置文件"><a href="#2-2-1-配置文件" class="headerlink" title="2.2.1 配置文件"></a>2.2.1 配置文件</h5><ul><li>&#x2F;etc&#x2F;ansible&#x2F;ansible.cfg 主配置文件，配置 ansible 工作特性</li><li>&#x2F;etc&#x2F;ansible&#x2F;hosts 主机清单</li><li>&#x2F;etc&#x2F;ansible&#x2F;roles&#x2F; 存放角色的目录(建议)</li></ul><h5 id="2-2-2-ansible-主配置文件"><a href="#2-2-2-ansible-主配置文件" class="headerlink" title="2.2.2 ansible 主配置文件"></a>2.2.2 ansible 主配置文件</h5><p>Ansible 的配置文件<code>/etc/ansible/ansible.cfg</code>, 其中大部分的配置内容无需进行修改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>defaults<span class="token punctuation">]</span><span class="token comment">#inventory      = /etc/ansible/hosts  # 主机列表配置文件</span><span class="token comment">#library  = /usr/share/my_modules/ # 库文件存放目录</span><span class="token comment">#remote_tmp  = $HOME/.ansible/tmp  #临时py命令文件存放在远程主机目录</span><span class="token comment">#local_tmp      = $HOME/.ansible/tmp # 本机的临时命令执行目录</span><span class="token comment">#forks          = 5       # 默认并发数</span><span class="token comment">#sudo_user      = root      # 默认sudo 用户</span><span class="token comment">#ask_sudo_pass = True  #每次执行ansible命令是否询问ssh密码</span><span class="token comment">#ask_pass      = True</span><span class="token comment">#remote_port    = 22</span><span class="token comment">#host_key_checking = False  # 检查对应服务器的host_key，建议取消注释</span><span class="token comment">#log_path=/var/log/ansible.log  #日志文件，建议启用</span><span class="token comment">#module_name = command   #默认模块，可以修改为shell模块</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2-3-inventory-主机清单"><a href="#2-2-3-inventory-主机清单" class="headerlink" title="2.2.3 inventory 主机清单"></a>2.2.3 inventory 主机清单</h5><p>ansible 的主要功用在于批量主机操作，为了便捷地使用其中的部分主机，可以在 inventory file 中将其分组命名 默认的 inventory file 为<code>/etc/ansible/hosts</code> inventory file 可以有多个，且也可以通过 Dynamic Inventory 来动态生成</p><p><strong>主机清单文件格式</strong></p><p>inventory 文件遵循 INI 文件风格，中括号中的字符为组名。可以将同一个主机同时归并到多个不同的组中</p><p>此外，当如若目标主机使用了非默认的 SSH 端口，还可以在主机名称之后使用冒号加端口号来标明</p><p>如果主机名称遵循相似的命名模式，还可以使用列表的方式标识各主机</p><p>范例：</p><pre class="line-numbers language-none"><code class="language-none">ntp.magedu.com[webservers]www1.magedu.com:2222www2.magedu.com[dbservers]db1.magedu.comdb2.magedu.comdb3.magedu.com[websrvs]www[1:100].example.com[dbsrvs]db-[a:f].example.com[appsrvs]10.0.0.[1:100]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-Ansible-相关工具"><a href="#2-3-Ansible-相关工具" class="headerlink" title="2.3 Ansible 相关工具"></a>2.3 Ansible 相关工具</h4><ul><li>&#x2F;usr&#x2F;bin&#x2F;ansible 主程序，临时命令执行工具</li><li>&#x2F;usr&#x2F;bin&#x2F;ansible-doc 查看配置文档，模块功能查看工具</li><li>&#x2F;usr&#x2F;bin&#x2F;ansible-galaxy 下载 &#x2F; 上传优秀代码或 Roles 模块的官网平台</li><li>&#x2F;usr&#x2F;bin&#x2F;ansible-playbook 定制自动化任务，编排剧本工具</li><li>&#x2F;usr&#x2F;bin&#x2F;ansible-pull 远程执行命令的工具</li><li>&#x2F;usr&#x2F;bin&#x2F;ansible-vault 文件加密工具</li><li>&#x2F;usr&#x2F;bin&#x2F;ansible-console 基于 Console 界面与用户交互的执行工具</li></ul><p><strong>利用 ansible 实现管理的主要方式：</strong></p><ul><li>Ad-Hoc 即利用 ansible 命令，主要用于临时命令使用场景</li><li>Ansible-playbook 主要用于长期规划好的，大型项目的场景，需要有前期的规划过程</li></ul><h5 id="2-3-1-ansible-doc"><a href="#2-3-1-ansible-doc" class="headerlink" title="2.3.1 ansible-doc"></a>2.3.1 ansible-doc</h5><p>此工具用来显示模块帮助</p><p>格式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible-doc <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>module<span class="token punctuation">..</span>.<span class="token punctuation">]</span>-l, <span class="token parameter variable">--list</span>           <span class="token comment"># 列出可用模块</span>-s, <span class="token parameter variable">--snippet</span>        <span class="token comment"># 显示指定模块的playbook片段</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有模块</span>ansible-doc <span class="token parameter variable">-l</span><span class="token comment"># 查看指定模块帮助用法</span>ansible-doc <span class="token function">ping</span>  <span class="token comment"># 查看指定模块简单帮助用法</span>ansible-doc <span class="token parameter variable">-s</span>  <span class="token function">ping</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-2-ansible"><a href="#2-3-2-ansible" class="headerlink" title="2.3.2 ansible"></a>2.3.2 ansible</h5><p>此工具通过 ssh 协议，实现对远程主机的配置管理、应用部署、任务执行等功能</p><p>建议：使用此工具前，先配置 ansible 主控端能基于密钥认证的方式联系各个被管理节点</p><p>范例：利用 sshpass 批量实现基于 key 验证</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>ssh-keygen <span class="token parameter variable">-f</span> /root/.ssh/id_rsa  <span class="token parameter variable">-P</span> <span class="token string">''</span><span class="token assign-left variable">NET</span><span class="token operator">=</span><span class="token number">192.168</span>.100<span class="token builtin class-name">export</span> <span class="token assign-left variable">SSHPASS</span><span class="token operator">=</span>magedu<span class="token keyword">for</span> <span class="token for-or-select variable">IP</span> <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">do</span>     sshpass <span class="token parameter variable">-e</span> ssh-copy-id  <span class="token variable">$NET</span><span class="token builtin class-name">.</span><span class="token variable">$IP</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible <span class="token operator">&lt;</span>host-pattern<span class="token operator">></span> <span class="token punctuation">[</span>-m module_name<span class="token punctuation">]</span> <span class="token punctuation">[</span>-a args<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选项说明：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">--version</span>           <span class="token comment"># 显示版本</span><span class="token parameter variable">-m</span> module           <span class="token comment"># 指定模块，默认为command</span><span class="token parameter variable">-v</span>                  <span class="token comment"># 详细过程 –vv  -vvv更详细</span>--list-hosts        <span class="token comment"># 显示主机列表，可简写 --list</span>-k, --ask-pass      <span class="token comment"># 提示输入ssh连接密码，默认Key验证</span>-C, <span class="token parameter variable">--check</span>         <span class="token comment"># 检查，并不执行</span>-T, <span class="token parameter variable">--timeout</span><span class="token operator">=</span>TIMEOUT   <span class="token comment"># 执行命令的超时时间，默认10s</span>-u, <span class="token parameter variable">--user</span><span class="token operator">=</span>REMOTE_USER  <span class="token comment"># 执行远程执行的用户</span>-b, <span class="token parameter variable">--become</span>            <span class="token comment"># 代替旧版的sudo 切换</span>--become-user<span class="token operator">=</span>USERNAME  <span class="token comment"># 指定sudo的runas用户，默认为root</span>-K, --ask-become-pass   <span class="token comment"># 提示输入sudo时的口令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ansible 的 Host-pattern 用于匹配被控制的主机的列表 All ：表示所有 Inventory 中的所有主机</p><p>范例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible all –m <span class="token function">ping</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出问题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xuegod ~<span class="token punctuation">]</span><span class="token comment"># ansible all -m ping</span><span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span>: Platform linux on <span class="token function">host</span> <span class="token number">10.10</span>.30.7 is using the discovered Python interpreter at /usr/bin/python, but future installation ofanother Python interpreter could change this. See https://docs.ansible.com/ansible/2.9/reference_appendices/interpreter_discovery.html <span class="token keyword">for</span><span class="token function">more</span> information.<span class="token number">10.10</span>.30.7 <span class="token operator">|</span> SUCCESS <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token string">"ansible_facts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"discovered_interpreter_python"</span><span class="token builtin class-name">:</span> <span class="token string">"/usr/bin/python"</span>    <span class="token punctuation">&#125;</span>,    <span class="token string">"changed"</span><span class="token builtin class-name">:</span> false,    <span class="token string">"ping"</span><span class="token builtin class-name">:</span> <span class="token string">"pong"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span>: Platform linux on <span class="token function">host</span> <span class="token number">10.10</span>.30.8 is using the discovered Python interpreter at /usr/bin/python, but future installation ofanother Python interpreter could change this. See https://docs.ansible.com/ansible/2.9/reference_appendices/interpreter_discovery.html <span class="token keyword">for</span><span class="token function">more</span> information.<span class="token number">10.10</span>.30.8 <span class="token operator">|</span> SUCCESS <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token string">"ansible_facts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"discovered_interpreter_python"</span><span class="token builtin class-name">:</span> <span class="token string">"/usr/bin/python"</span>    <span class="token punctuation">&#125;</span>,    <span class="token string">"changed"</span><span class="token builtin class-name">:</span> false,    <span class="token string">"ping"</span><span class="token builtin class-name">:</span> <span class="token string">"pong"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的warning是python版本依赖，我们可以通过python的一个模块配置<code>ansible_python_interpreter</code>来指向python位置，就是你受管主机的python位置，如下所示</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>dbsrvs<span class="token punctuation">]</span><span class="token number">10.10</span>.30.8 <span class="token assign-left variable">ansible_python_interpreter</span><span class="token operator">=</span>/usr/bin/python2.7<span class="token punctuation">[</span>websrvs<span class="token punctuation">]</span><span class="token number">10.10</span>.30.<span class="token punctuation">[</span><span class="token number">7</span>:8<span class="token punctuation">]</span> <span class="token assign-left variable">ansible_python_interpreter</span><span class="token operator">=</span>/usr/bin/python2.7<span class="token punctuation">[</span>appsrvs<span class="token punctuation">]</span><span class="token number">10.10</span>.30.<span class="token punctuation">[</span><span class="token number">6</span>:8<span class="token punctuation">]</span> <span class="token assign-left variable">ansible_python_interpreter</span><span class="token operator">=</span>/usr/bin/python2.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 这时我们再去执行命令输出就不会有刚才那个警告出现了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@RHCE8 ~<span class="token punctuation">]</span><span class="token comment"># ansible all -m ping</span><span class="token number">10.10</span>.30.7 <span class="token operator">|</span> SUCCESS <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token string">"changed"</span><span class="token builtin class-name">:</span> false,    <span class="token string">"ping"</span><span class="token builtin class-name">:</span> <span class="token string">"pong"</span><span class="token punctuation">&#125;</span><span class="token number">10.10</span>.30.8 <span class="token operator">|</span> SUCCESS <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token string">"changed"</span><span class="token builtin class-name">:</span> false,    <span class="token string">"ping"</span><span class="token builtin class-name">:</span> <span class="token string">"pong"</span><span class="token punctuation">&#125;</span><span class="token number">10.10</span>.30.6 <span class="token operator">|</span> SUCCESS <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token string">"changed"</span><span class="token builtin class-name">:</span> false,    <span class="token string">"ping"</span><span class="token builtin class-name">:</span> <span class="token string">"pong"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>*: 通配符</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible  “*”  <span class="token parameter variable">-m</span> <span class="token function">ping</span>ansible  <span class="token number">192.168</span>.1.* <span class="token parameter variable">-m</span> <span class="token function">ping</span>ansible  “srvs”  <span class="token parameter variable">-m</span> <span class="token function">ping</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或关系</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible “websrvs:appsrvs”  <span class="token parameter variable">-m</span> <span class="token function">ping</span>ansible “192.168.1.10:192.168.1.20”  <span class="token parameter variable">-m</span> <span class="token function">ping</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>逻辑与</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在websrvs组并且在dbsrvs组中的主机</span>ansible “websrvs:<span class="token operator">&amp;</span>dbsrvs” –m <span class="token function">ping</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>逻辑非</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在websrvs组，但不在dbsrvs组中的主机</span><span class="token comment">#注意：此处为单引号</span>ansible ‘websrvs:<span class="token operator">!</span>dbsrvs’ –m <span class="token function">ping</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>综合逻辑</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible ‘websrvs:dbsrvs:<span class="token operator">&amp;</span>appsrvs:<span class="token operator">!</span>ftpsrvs’ –m <span class="token function">ping</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正则表达式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible “websrvs:dbsrvs” –m <span class="token function">ping</span> ansible “~<span class="token punctuation">(</span>web<span class="token operator">|</span>db<span class="token punctuation">)</span>.*<span class="token punctuation">\</span>.magedu<span class="token punctuation">\</span>.com” –m <span class="token function">ping</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>ansible 命令执行过程</strong></p><ol><li>加载自己的配置文件 默认 &#x2F; etc&#x2F;ansible&#x2F;ansible.cfg</li><li>加载自己对应的模块文件，如：command</li><li>通过 ansible 将模块或命令生成对应的临时 py 文件，并将该文件传输至远程服务器的对应执行用户 $HOME&#x2F;.ansible&#x2F;tmp&#x2F;ansible-tmp - 数字 &#x2F; XXX.PY 文件</li><li>给文件 + x 执行</li><li>执行并返回结果</li><li>删除临时 py 文件，退出</li></ol><p>ansible 的执行状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@centos8 ~<span class="token punctuation">]</span><span class="token comment">#grep -A 14 '\[colors\]' /etc/ansible/ansible.cfg</span><span class="token punctuation">[</span>colors<span class="token punctuation">]</span><span class="token comment">#highlight = white</span><span class="token comment">#verbose = blue</span><span class="token comment">#warn = bright purple</span><span class="token comment">#error = red</span><span class="token comment">#debug = dark gray</span><span class="token comment">#deprecate = purple</span><span class="token comment">#skip = cyan</span><span class="token comment">#unreachable = red</span><span class="token comment">#ok = green</span><span class="token comment">#changed = yellow</span><span class="token comment">#diff_add = green</span><span class="token comment">#diff_remove = red</span><span class="token comment">#diff_lines = cyan</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>绿色：执行成功并且不需要做改变的操作</li><li>黄色：执行成功并且对目标主机做变更</li><li>红色：执行失败</li></ul><p><strong>ansible 使用范例</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#以wang用户执行ping存活检测</span>ansible all <span class="token parameter variable">-m</span> <span class="token function">ping</span> <span class="token parameter variable">-u</span> wang  <span class="token parameter variable">-k</span><span class="token comment">#以wang sudo至root执行ping存活检测</span>ansible all <span class="token parameter variable">-m</span> <span class="token function">ping</span> <span class="token parameter variable">-u</span> wang <span class="token parameter variable">-k</span> <span class="token parameter variable">-b</span><span class="token comment">#以wang sudo至mage用户执行ping存活检测</span>ansible all <span class="token parameter variable">-m</span> <span class="token function">ping</span> <span class="token parameter variable">-u</span> wang <span class="token parameter variable">-k</span> <span class="token parameter variable">-b</span> --become-user<span class="token operator">=</span>mage<span class="token comment">#以wang sudo至root用户执行ls</span>ansible all <span class="token parameter variable">-m</span> <span class="token builtin class-name">command</span>  <span class="token parameter variable">-u</span> wang <span class="token parameter variable">-a</span> <span class="token string">'ls /root'</span> <span class="token parameter variable">-b</span> --become-user<span class="token operator">=</span>root    <span class="token parameter variable">-k</span> <span class="token parameter variable">-K</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-3-ansible-playbook"><a href="#2-3-3-ansible-playbook" class="headerlink" title="2.3.3 ansible-playbook"></a>2.3.3 ansible-playbook</h5><p>此工具用于执行编写好的 playbook 任务</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible-playbook hello.yml<span class="token function">cat</span>  hello.yml---<span class="token comment">#hello world yml file</span>- hosts: websrvs  remote_user: root  tasks:    - name: hello world      command: /usr/bin/wall hello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-4-ansible-vault"><a href="#2-3-4-ansible-vault" class="headerlink" title="2.3.4 ansible-vault"></a>2.3.4 ansible-vault</h5><p>此工具可以用于加密解密 yml 文件</p><p>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible-vault <span class="token punctuation">[</span>create<span class="token operator">|</span>decrypt<span class="token operator">|</span>edit<span class="token operator">|</span>encrypt<span class="token operator">|</span>rekey<span class="token operator">|</span>view<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>范例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible-vault encrypt hello.yml   <span class="token comment"># 加密,加密后的文件是不能执行的，需要解密后执行</span>ansible-vault decrypt hello.yml   <span class="token comment"># 解密</span>ansible-vault view hello.yml      <span class="token comment"># 查看</span>ansible-vault edit  hello.yml     <span class="token comment"># 编辑加密文件</span>ansible-vault rekey  hello.yml    <span class="token comment"># 修改口令</span>ansible-vault create new.yml      <span class="token comment"># 创建新文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-5-ansible-console"><a href="#2-3-5-ansible-console" class="headerlink" title="2.3.5 ansible-console"></a>2.3.5 ansible-console</h5><p>此工具可交互执行命令，支持 tab，ansible 2.0 + 新增</p><p>提示符格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">执行用户@当前操作的主机组 <span class="token punctuation">(</span>当前组的主机数量<span class="token punctuation">)</span><span class="token punctuation">[</span>f:并发数<span class="token punctuation">]</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用子命令：</p><ul><li>设置并发数：forks n 例如：forks 10</li><li>切换组：cd 主机组 例如：cd web</li><li>列出当前组主机列表：list</li><li>列出所有的内置命令：? 或 help</li></ul><p>范例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#ansible-console</span>Welcome to the ansible console.Type <span class="token builtin class-name">help</span> or ? to list commands.root@all <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span>f:5<span class="token punctuation">]</span>$ list<span class="token number">10.0</span>.0.8<span class="token number">10.0</span>.0.7<span class="token number">10.0</span>.0.6root@all <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span>f:5<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> websrvsroot@websrvs <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span>f:5<span class="token punctuation">]</span>$ list<span class="token number">10.0</span>.0.7<span class="token number">10.0</span>.0.8root@websrvs <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span>f:5<span class="token punctuation">]</span>$ forks <span class="token number">10</span>root@websrvs <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span>f:10<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> appsrvsroot@appsrvs <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span>f:5<span class="token punctuation">]</span>$ yum <span class="token assign-left variable">name</span><span class="token operator">=</span>httpd <span class="token assign-left variable">state</span><span class="token operator">=</span>presentroot@appsrvs <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span>f:5<span class="token punctuation">]</span>$ <span class="token function">service</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>httpd <span class="token assign-left variable">state</span><span class="token operator">=</span>started<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-6-ansible-galaxy"><a href="#2-3-6-ansible-galaxy" class="headerlink" title="2.3.6 ansible-galaxy"></a>2.3.6 ansible-galaxy</h5><p>此工具会连接 <a href="https://galaxy.ansible.com/">https://galaxy.ansible.com</a> 下载相应的 roles</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#列出所有已安装的galaxy</span>ansible-galaxy list<span class="token comment">#安装galaxy</span>ansible-galaxy <span class="token function">install</span> geerlingguy.mysqlansible-galaxy <span class="token function">install</span> geerlingguy.redis<span class="token comment">#删除galaxy</span>ansible-galaxy remove geerlingguy.redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-Ansible-常用模块"><a href="#2-4-Ansible-常用模块" class="headerlink" title="2.4 Ansible 常用模块"></a>2.4 Ansible 常用模块</h4><p>​        2015 年底 270 多个模块，2016 年达到 540 个，2018 年 01 月 12 日有 1378 个模块，2018 年 07 月 15 日 1852 个模块, 2019 年 05 月 25 日（ansible 2.7.10）时 2080 个模块，2020 年 03 月 02 日有 3387 个模块</p><p>虽然模块众多，但最常用的模块也就 2，30 个而已，针对特定业务只用 10 几个模块</p><p>常用模块帮助文档参考：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://docs.ansible.com/ansible/latest/modules/modules_by_category.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-4-1-Command-模块"><a href="#2-4-1-Command-模块" class="headerlink" title="2.4.1 Command 模块"></a>2.4.1 Command 模块</h5><p>功能：在远程主机执行命令，此为默认模块，可忽略 - m 选项</p><p>注意：此命令不支持 $VARNAME &lt; &gt; | ; &amp; 等，用 shell 模块实现</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@RHCE8 ~<span class="token punctuation">]</span><span class="token comment"># ansible websrvs --list</span>  hosts <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>:    <span class="token number">10.10</span>.30.7    <span class="token number">10.10</span>.30.8<span class="token punctuation">[</span>root@RHCE8 ~<span class="token punctuation">]</span><span class="token comment"># ansible websrvs -m command -a 'cat /etc/issue'</span><span class="token number">10.10</span>.30.7 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>Welcome to SUSE Linux Enterprise Server <span class="token number">12</span> SP5  <span class="token punctuation">(</span>x86_64<span class="token punctuation">)</span> - Kernel <span class="token punctuation">\</span>r <span class="token punctuation">(</span><span class="token punctuation">\</span>l<span class="token punctuation">)</span>.<span class="token number">10.10</span>.30.8 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>Welcome to SUSE Linux Enterprise Server <span class="token number">12</span> SP5  <span class="token punctuation">(</span>x86_64<span class="token punctuation">)</span> - Kernel <span class="token punctuation">\</span>r <span class="token punctuation">(</span><span class="token punctuation">\</span>l<span class="token punctuation">)</span>.<span class="token punctuation">[</span>root@RHCE8 ~<span class="token punctuation">]</span><span class="token comment"># ansible websrvs -m command -a 'chdir=/etc cat issue'</span><span class="token number">10.10</span>.30.7 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>Welcome to SUSE Linux Enterprise Server <span class="token number">12</span> SP5  <span class="token punctuation">(</span>x86_64<span class="token punctuation">)</span> - Kernel <span class="token punctuation">\</span>r <span class="token punctuation">(</span><span class="token punctuation">\</span>l<span class="token punctuation">)</span>.<span class="token number">10.10</span>.30.8 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>Welcome to SUSE Linux Enterprise Server <span class="token number">12</span> SP5  <span class="token punctuation">(</span>x86_64<span class="token punctuation">)</span> - Kernel <span class="token punctuation">\</span>r <span class="token punctuation">(</span><span class="token punctuation">\</span>l<span class="token punctuation">)</span>.<span class="token punctuation">[</span>root@RHCE8 ~<span class="token punctuation">]</span><span class="token comment"># cd /etc ; cat issue^C</span><span class="token punctuation">[</span>root@RHCE8 ~<span class="token punctuation">]</span><span class="token comment"># ansible websrvs -m command -a 'chdir=/etc creates=/data/f1.txt cat issue'</span><span class="token number">10.10</span>.30.7 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>Welcome to SUSE Linux Enterprise Server <span class="token number">12</span> SP5  <span class="token punctuation">(</span>x86_64<span class="token punctuation">)</span> - Kernel <span class="token punctuation">\</span>r <span class="token punctuation">(</span><span class="token punctuation">\</span>l<span class="token punctuation">)</span>.<span class="token number">10.10</span>.30.8 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>Welcome to SUSE Linux Enterprise Server <span class="token number">12</span> SP5  <span class="token punctuation">(</span>x86_64<span class="token punctuation">)</span> - Kernel <span class="token punctuation">\</span>r <span class="token punctuation">(</span><span class="token punctuation">\</span>l<span class="token punctuation">)</span>.<span class="token punctuation">[</span>root@RHCE8 ~<span class="token punctuation">]</span><span class="token comment"># ansible websrvs -m command -a 'chdir=/etc creates=/data/f1.txt cat issue'</span><span class="token number">10.10</span>.30.7 <span class="token operator">|</span> SUCCESS <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>skipped, since /data/f1.txt exists<span class="token number">10.10</span>.30.8 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>Welcome to SUSE Linux Enterprise Server <span class="token number">12</span> SP5  <span class="token punctuation">(</span>x86_64<span class="token punctuation">)</span> - Kernel <span class="token punctuation">\</span>r <span class="token punctuation">(</span><span class="token punctuation">\</span>l<span class="token punctuation">)</span>.<span class="token punctuation">[</span>root@RHCE8 ~<span class="token punctuation">]</span><span class="token comment"># ansible websrvs -m command -a 'chdir=/etc removes=/data/f1.txt cat issue'</span><span class="token number">10.10</span>.30.8 <span class="token operator">|</span> SUCCESS <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>skipped, since /data/f1.txt does not exist<span class="token number">10.10</span>.30.7 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>Welcome to SUSE Linux Enterprise Server <span class="token number">12</span> SP5  <span class="token punctuation">(</span>x86_64<span class="token punctuation">)</span> - Kernel <span class="token punctuation">\</span>r <span class="token punctuation">(</span><span class="token punctuation">\</span>l<span class="token punctuation">)</span>.下面的这些都是有问题的ansible websrvs <span class="token parameter variable">-m</span> <span class="token builtin class-name">command</span> <span class="token parameter variable">-a</span> ‘service vsftpd start’ansible websrvs <span class="token parameter variable">-m</span> <span class="token builtin class-name">command</span> <span class="token parameter variable">-a</span> ‘echo magedu <span class="token operator">|</span><span class="token function">passwd</span> <span class="token parameter variable">--stdin</span> wang’ansible websrvs <span class="token parameter variable">-m</span> <span class="token builtin class-name">command</span> <span class="token parameter variable">-a</span> <span class="token string">'rm -rf /data/'</span>ansible websrvs <span class="token parameter variable">-m</span> <span class="token builtin class-name">command</span> <span class="token parameter variable">-a</span> <span class="token string">'echo hello > /data/hello.log'</span>ansible websrvs <span class="token parameter variable">-m</span> <span class="token builtin class-name">command</span> <span class="token parameter variable">-a</span> <span class="token string">"echo <span class="token environment constant">$HOSTNAME</span>"</span>  <span class="token comment"># 有时可以</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-4-2-Shell-模块"><a href="#2-4-2-Shell-模块" class="headerlink" title="2.4.2 Shell 模块"></a>2.4.2 Shell 模块</h5><p>功能：和 command 相似，用 shell 执行命令</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#ansible websrvs -m shell -a "echo $HOSTNAME"</span><span class="token number">10.0</span>.0.7 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>ansible<span class="token number">10.0</span>.0.8 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>ansible<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#ansible websrvs -m shell -a 'echo $HOSTNAME'</span><span class="token number">10.0</span>.0.7 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>centos7.wangxiaochun.com<span class="token number">10.0</span>.0.8 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>centos8.localdomain<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#ansible websrvs -m shell -a 'echo centos | passwd --stdin wang'</span><span class="token number">10.0</span>.0.7 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>Changing password <span class="token keyword">for</span> user wang.passwd: all authentication tokens updated successfully.<span class="token number">10.0</span>.0.8 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>Changing password <span class="token keyword">for</span> user wang.passwd: all authentication tokens updated successfully.<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#ansible websrvs -m shell -a 'ls -l /etc/shadow'</span><span class="token number">10.0</span>.0.7 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>---------- <span class="token number">1</span> root root <span class="token number">889</span> Mar  <span class="token number">2</span> <span class="token number">14</span>:34 /etc/shadow<span class="token number">10.0</span>.0.8 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>---------- <span class="token number">1</span> root root <span class="token number">944</span> Mar  <span class="token number">2</span> <span class="token number">14</span>:34 /etc/shadow<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#ansible websrvs -m shell -a 'echo hello > /data/hello.log'</span><span class="token number">10.0</span>.0.7 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span><span class="token number">10.0</span>.0.8 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#ansible websrvs -m shell -a 'cat  /data/hello.log'</span><span class="token number">10.0</span>.0.7 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>hello<span class="token number">10.0</span>.0.8 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">>></span>hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：调用 bash 执行命令 类似 cat &#x2F;tmp&#x2F;test.md | awk -F‘|’ ‘{print $1,$2}’ &amp;&gt; &#x2F;tmp&#x2F;example.txt 这些复杂命令，即使使用 shell 也可能会失败，解决办法：写到脚本时，copy 到远程，执行，再把需要的结果拉回执行命令的机器</p><p>范例：将 shell 模块代替 command，设为模块</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#vim /etc/ansible/ansible.cfg</span><span class="token comment">#修改下面一行</span>module_name <span class="token operator">=</span> shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-4-3-Script-模块"><a href="#2-4-3-Script-模块" class="headerlink" title="2.4.3 Script 模块"></a>2.4.3 Script 模块</h5><p>功能：在远程主机上运行 ansible 服务器上的脚本</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible websrvs  <span class="token parameter variable">-m</span> script <span class="token parameter variable">-a</span> /data/test.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-4-4-Copy-模块"><a href="#2-4-4-Copy-模块" class="headerlink" title="2.4.4 Copy 模块"></a>2.4.4 Copy 模块</h5><p>功能：从 ansible 服务器主控端复制文件到远程主机</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如目标存在，默认覆盖，此处指定先备份</span>ansible websrvs <span class="token parameter variable">-m</span> copy <span class="token parameter variable">-a</span> “src<span class="token operator">=</span>/root/test1.sh <span class="token assign-left variable">dest</span><span class="token operator">=</span>/tmp/test2.sh    <span class="token assign-left variable">owner</span><span class="token operator">=</span>wang  <span class="token assign-left variable">mode</span><span class="token operator">=</span><span class="token number">600</span> <span class="token assign-left variable">backup</span><span class="token operator">=</span>yes”<span class="token comment"># 指定内容，直接生成目标文件</span>ansible websrvs <span class="token parameter variable">-m</span> copy <span class="token parameter variable">-a</span> <span class="token string">"content='test line1<span class="token entity" title="\n">\n</span>test line2' dest=/tmp/test.txt"</span><span class="token comment"># 复制/etc/下的文件，不包括/etc/目录自身</span>ansible websrvs <span class="token parameter variable">-m</span> copy <span class="token parameter variable">-a</span> “src<span class="token operator">=</span>/etc/ <span class="token assign-left variable">dest</span><span class="token operator">=</span>/backup”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-4-5-Fetch-模块"><a href="#2-4-5-Fetch-模块" class="headerlink" title="2.4.5 Fetch 模块"></a>2.4.5 Fetch 模块</h5><p>功能：从远程主机提取文件至 ansible 的主控端，copy 相反，目前不支持目录</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible websrvs <span class="token parameter variable">-m</span> fetch <span class="token parameter variable">-a</span> ‘src<span class="token operator">=</span>/root/test.sh <span class="token assign-left variable">dest</span><span class="token operator">=</span>/data/scripts’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#ansible   all -m  fetch -a 'src=/etc/redhat-release dest=/data/os'  # 如果os目录不存在会创建</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#tree /data/os/</span>/data/os/├── <span class="token number">10.0</span>.0.6│   └── etc│       └── redhat-release├── <span class="token number">10.0</span>.0.7│   └── etc│       └── redhat-release└── <span class="token number">10.0</span>.0.8    └── etc        └── redhat-release<span class="token number">6</span> directories, <span class="token number">3</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-4-6-File-模块"><a href="#2-4-6-File-模块" class="headerlink" title="2.4.6 File 模块"></a>2.4.6 File 模块</h5><p>功能：设置文件属性</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建空文件</span>ansible all <span class="token parameter variable">-m</span>  <span class="token function">file</span>  <span class="token parameter variable">-a</span> <span class="token string">'path=/data/test.txt state=touch'</span>ansible all <span class="token parameter variable">-m</span>  <span class="token function">file</span>  <span class="token parameter variable">-a</span> <span class="token string">'path=/data/test.txt state=absent'</span>ansible all <span class="token parameter variable">-m</span> <span class="token function">file</span> <span class="token parameter variable">-a</span> <span class="token string">"path=/root/test.sh owner=wang mode=755“#创建目录ansible all -m file -a "</span><span class="token assign-left variable">path</span><span class="token operator">=</span>/data/mysql <span class="token assign-left variable">state</span><span class="token operator">=</span>directory <span class="token assign-left variable">owner</span><span class="token operator">=</span>mysql <span class="token assign-left variable">group</span><span class="token operator">=</span>mysql"<span class="token comment">#创建软链接</span>ansible all <span class="token parameter variable">-m</span> <span class="token function">file</span> <span class="token parameter variable">-a</span> ‘src<span class="token operator">=</span>/data/testfile  <span class="token assign-left variable">dest</span><span class="token operator">=</span>/data/testfile-link <span class="token assign-left variable">state</span><span class="token operator">=</span>link’<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-4-7-unarchive-模块"><a href="#2-4-7-unarchive-模块" class="headerlink" title="2.4.7 unarchive 模块"></a>2.4.7 unarchive 模块</h5><p>功能：解包解压缩</p><p>实现有两种用法：</p><p>1、将 ansible 主机上的压缩包传到远程主机后解压缩至特定目录，设置 copy&#x3D;yes </p><p>2、将远程主机上的某个压缩包解压缩到指定路径下，设置 copy&#x3D;no</p><p>常见参数：</p><ul><li>copy：默认为 yes，当 copy&#x3D;yes，拷贝的文件是从 ansible 主机复制到远程主机上，如果设置为 copy&#x3D;no，会在远程主机上寻找 src 源文件</li><li>remote_src：和 copy 功能一样且互斥，yes 表示在远程主机，不在 ansible 主机，no 表示文件在 ansible 主机上</li><li>src：源路径，可以是 ansible 主机上的路径，也可以是远程主机上的路径，如果是远程主机上的路径，则需要设置 copy&#x3D;no</li><li>dest：远程主机上的目标路径</li><li>mode：设置解压缩后的文件权限</li></ul><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible all <span class="token parameter variable">-m</span> unarchive <span class="token parameter variable">-a</span> <span class="token string">'src=/data/foo.tgz dest=/var/lib/foo'</span>ansible all <span class="token parameter variable">-m</span> unarchive <span class="token parameter variable">-a</span> <span class="token string">'src=/tmp/foo.zip dest=/data copy=no mode=0777'</span>ansible all <span class="token parameter variable">-m</span> unarchive <span class="token parameter variable">-a</span> <span class="token string">'src=https://example.com/example.zip dest=/data copy=no'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-4-8-Archive-模块"><a href="#2-4-8-Archive-模块" class="headerlink" title="2.4.8 Archive 模块"></a>2.4.8 Archive 模块</h5><p>功能：打包压缩</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible websrvs <span class="token parameter variable">-m</span> archive  <span class="token parameter variable">-a</span> <span class="token string">'path=/var/log/ dest=/data/log.tar.bz2 format=bz2  owner=wang mode=0600'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-4-9-Hostname-模块"><a href="#2-4-9-Hostname-模块" class="headerlink" title="2.4.9 Hostname 模块"></a>2.4.9 Hostname 模块</h5><p>功能：管理主机名</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible node1 <span class="token parameter variable">-m</span> <span class="token function">hostname</span> <span class="token parameter variable">-a</span> “name<span class="token operator">=</span>websrv”ansible <span class="token number">192.168</span>.100.18 <span class="token parameter variable">-m</span> <span class="token function">hostname</span> <span class="token parameter variable">-a</span> <span class="token string">'name=node18.magedu.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-4-10-Cron-模块"><a href="#2-4-10-Cron-模块" class="headerlink" title="2.4.10 Cron 模块"></a>2.4.10 Cron 模块</h5><p>功能：计划任务 支持时间：minute，hour，day，month，weekday</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 备份数据库脚本</span><span class="token punctuation">[</span>root@centos8 ~<span class="token punctuation">]</span><span class="token comment">#cat mysql_backup.sh</span>mysqldump <span class="token parameter variable">-A</span> <span class="token parameter variable">-F</span> --single-transaction --master-data<span class="token operator">=</span><span class="token number">2</span> <span class="token parameter variable">-q</span> <span class="token parameter variable">-uroot</span> <span class="token operator">|</span><span class="token function">gzip</span> <span class="token operator">></span> /data/mysql_<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%F_%T<span class="token variable">`</span></span>.sql.gz<span class="token comment"># 创建任务</span>ansible <span class="token number">10.0</span>.0.8 <span class="token parameter variable">-m</span> <span class="token function">cron</span> <span class="token parameter variable">-a</span> <span class="token string">'hour=2 minute=30 weekday=1-5 name="backup mysql" job=/root/mysql_backup.sh'</span>ansible websrvs   <span class="token parameter variable">-m</span> <span class="token function">cron</span> <span class="token parameter variable">-a</span> <span class="token string">"minute=*/5 job='/usr/sbin/ntpdate 172.20.0.1 &amp;>/dev/null' name=Synctime"</span><span class="token comment"># 禁用计划任务</span>ansible websrvs   <span class="token parameter variable">-m</span> <span class="token function">cron</span> <span class="token parameter variable">-a</span> <span class="token string">"minute=*/5 job='/usr/sbin/ntpdate 172.20.0.1 &amp;>/dev/null' name=Synctime disabled=yes"</span><span class="token comment"># 启用计划任务</span>ansible websrvs   <span class="token parameter variable">-m</span> <span class="token function">cron</span> <span class="token parameter variable">-a</span> <span class="token string">"minute=*/5 job='/usr/sbin/ntpdate 172.20.0.1 &amp;>/dev/null' name=Synctime disabled=no"</span><span class="token comment"># 删除任务</span>ansible websrvs <span class="token parameter variable">-m</span> <span class="token function">cron</span> <span class="token parameter variable">-a</span> <span class="token string">"name='backup mysql' state=absent"</span>ansible websrvs <span class="token parameter variable">-m</span> <span class="token function">cron</span> <span class="token parameter variable">-a</span> <span class="token string">'state=absent name=Synctime'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-4-11-Yum-模块"><a href="#2-4-11-Yum-模块" class="headerlink" title="2.4.11 Yum 模块"></a>2.4.11 Yum 模块</h5><p>功能：管理软件包，只支持 RHEL，CentOS，fedora，不支持 Ubuntu、suse 其它版本</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible websrvs <span class="token parameter variable">-m</span> yum <span class="token parameter variable">-a</span> ‘name<span class="token operator">=</span>httpd <span class="token assign-left variable">state</span><span class="token operator">=</span>present’  <span class="token comment">#安装</span>ansible websrvs <span class="token parameter variable">-m</span> yum <span class="token parameter variable">-a</span> ‘name<span class="token operator">=</span>httpd <span class="token assign-left variable">state</span><span class="token operator">=</span>absent’  <span class="token comment">#删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-4-12-Service-模块"><a href="#2-4-12-Service-模块" class="headerlink" title="2.4.12 Service 模块"></a>2.4.12 Service 模块</h5><p>功能：管理服务</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible all <span class="token parameter variable">-m</span> <span class="token function">service</span> <span class="token parameter variable">-a</span> <span class="token string">'name=httpd state=started enabled=yes'</span>ansible all <span class="token parameter variable">-m</span> <span class="token function">service</span> <span class="token parameter variable">-a</span> <span class="token string">'name=httpd state=stopped'</span>ansible all <span class="token parameter variable">-m</span> <span class="token function">service</span> <span class="token parameter variable">-a</span> <span class="token string">'name=httpd state=reloaded’ansible all -m shell -a "sed -i '</span>s/^Listen <span class="token number">80</span>/Listen <span class="token number">8080</span>/<span class="token string">' /etc/httpd/conf/httpd.conf"ansible all -m service -a '</span><span class="token assign-left variable">name</span><span class="token operator">=</span>httpd <span class="token assign-left variable">state</span><span class="token operator">=</span>restarted'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-4-13-User-模块"><a href="#2-4-13-User-模块" class="headerlink" title="2.4.13 User 模块"></a>2.4.13 User 模块</h5><p>功能：管理用户</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建用户</span>ansible all <span class="token parameter variable">-m</span> user <span class="token parameter variable">-a</span> <span class="token string">'name=user1 comment=“test user” uid=2048 home=/app/user1 group=root'</span>ansible all <span class="token parameter variable">-m</span> user <span class="token parameter variable">-a</span> <span class="token string">'name=nginx comment=nginx uid=88 group=nginx groups="root,daemon" shell=/sbin/nologin system=yes create_home=no  home=/data/nginx non_unique=yes'</span><span class="token comment">#删除用户及家目录等数据</span>ansible all <span class="token parameter variable">-m</span> user <span class="token parameter variable">-a</span> <span class="token string">'name=nginx state=absent remove=yes'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-4-14-Group-模块"><a href="#2-4-14-Group-模块" class="headerlink" title="2.4.14 Group 模块"></a>2.4.14 Group 模块</h5><p>功能：管理组</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建组</span>ansible websrvs <span class="token parameter variable">-m</span> group  <span class="token parameter variable">-a</span> <span class="token string">'name=nginx gid=88 system=yes'</span><span class="token comment">#删除组</span>ansible websrvs <span class="token parameter variable">-m</span> group  <span class="token parameter variable">-a</span> <span class="token string">'name=nginx state=absent'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-4-15-Lineinfile-模块"><a href="#2-4-15-Lineinfile-模块" class="headerlink" title="2.4.15 Lineinfile 模块"></a>2.4.15 Lineinfile 模块</h5><p>ansible 在使用 sed 进行替换时，经常会遇到需要转义的问题，而且 ansible 在遇到特殊符号进行替换时，存在问题，无法正常进行替换 。其实在 ansible 自身提供了两个模块：lineinfile 模块和 replace 模块，可以方便的进行替换</p><p>功能：相当于 sed，可以修改文件内容</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible all <span class="token parameter variable">-m</span>   lineinfile <span class="token parameter variable">-a</span> <span class="token string">"path=/etc/selinux/config regexp='^SELINUX=' line='SELINUX=enforcing'"</span>ansible all <span class="token parameter variable">-m</span> lineinfile  <span class="token parameter variable">-a</span> <span class="token string">'dest=/etc/fstab state=absent regexp="^#"'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-4-16-Replace-模块"><a href="#2-4-16-Replace-模块" class="headerlink" title="2.4.16 Replace 模块"></a>2.4.16 Replace 模块</h5><p>该模块有点类似于 sed 命令，主要也是基于正则进行匹配和替换</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible all <span class="token parameter variable">-m</span> replace <span class="token parameter variable">-a</span> <span class="token string">"path=/etc/fstab regexp='^(UUID.*)' replace='#<span class="token entity" title="\1">\1</span>'"</span>  ansible all <span class="token parameter variable">-m</span> replace <span class="token parameter variable">-a</span> <span class="token string">"path=/etc/fstab regexp='^#(.*)' replace='<span class="token entity" title="\1">\1</span>'"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-4-17-Setup-模块"><a href="#2-4-17-Setup-模块" class="headerlink" title="2.4.17 Setup 模块"></a>2.4.17 Setup 模块</h5><p>功能：setup 模块来收集主机的系统信息，这些 facts 信息可以直接以变量的形式使用，但是如果主机较多，会影响执行速度，可以使用<code>gather_facts: no</code> 来禁止 Ansible 收集 facts 信息</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible all <span class="token parameter variable">-m</span> setupansible all <span class="token parameter variable">-m</span> setup <span class="token parameter variable">-a</span> <span class="token string">"filter=ansible_nodename"</span>ansible all <span class="token parameter variable">-m</span> setup <span class="token parameter variable">-a</span> <span class="token string">"filter=ansible_hostname"</span>ansible all <span class="token parameter variable">-m</span> setup <span class="token parameter variable">-a</span> <span class="token string">"filter=ansible_domain"</span>ansible all <span class="token parameter variable">-m</span> setup <span class="token parameter variable">-a</span> <span class="token string">"filter=ansible_memtotal_mb"</span>ansible all <span class="token parameter variable">-m</span> setup <span class="token parameter variable">-a</span> <span class="token string">"filter=ansible_memory_mb"</span>ansible all <span class="token parameter variable">-m</span> setup <span class="token parameter variable">-a</span> <span class="token string">"filter=ansible_memfree_mb"</span>ansible all <span class="token parameter variable">-m</span> setup <span class="token parameter variable">-a</span> <span class="token string">"filter=ansible_os_family"</span>ansible all <span class="token parameter variable">-m</span> setup <span class="token parameter variable">-a</span> <span class="token string">"filter=ansible_distribution_major_version"</span>ansible all <span class="token parameter variable">-m</span> setup <span class="token parameter variable">-a</span> <span class="token string">"filter=ansible_distribution_version"</span>ansible all <span class="token parameter variable">-m</span> setup <span class="token parameter variable">-a</span> <span class="token string">"filter=ansible_processor_vcpus"</span>ansible all <span class="token parameter variable">-m</span> setup <span class="token parameter variable">-a</span> <span class="token string">"filter=ansible_all_ipv4_addresses"</span>ansible all <span class="token parameter variable">-m</span> setup <span class="token parameter variable">-a</span> <span class="token string">"filter=ansible_architecture"</span>ansible all <span class="token parameter variable">-m</span>  setup  <span class="token parameter variable">-a</span> <span class="token string">"filter=ansible_processor*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#ansible all  -m  setup -a 'filter=ansible_python_version'</span><span class="token number">10.0</span>.0.7 <span class="token operator">|</span> SUCCESS <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token string">"ansible_facts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"ansible_python_version"</span><span class="token builtin class-name">:</span> <span class="token string">"2.7.5"</span>,        <span class="token string">"discovered_interpreter_python"</span><span class="token builtin class-name">:</span> <span class="token string">"/usr/bin/python"</span>    <span class="token punctuation">&#125;</span>,    <span class="token string">"changed"</span><span class="token builtin class-name">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token number">10.0</span>.0.6 <span class="token operator">|</span> SUCCESS <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token string">"ansible_facts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"ansible_python_version"</span><span class="token builtin class-name">:</span> <span class="token string">"2.6.6"</span>,        <span class="token string">"discovered_interpreter_python"</span><span class="token builtin class-name">:</span> <span class="token string">"/usr/bin/python"</span>    <span class="token punctuation">&#125;</span>,    <span class="token string">"changed"</span><span class="token builtin class-name">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token number">10.0</span>.0.8 <span class="token operator">|</span> SUCCESS <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token string">"ansible_facts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"ansible_python_version"</span><span class="token builtin class-name">:</span> <span class="token string">"3.6.8"</span>,        <span class="token string">"discovered_interpreter_python"</span><span class="token builtin class-name">:</span> <span class="token string">"/usr/libexec/platform-python"</span>    <span class="token punctuation">&#125;</span>,    <span class="token string">"changed"</span><span class="token builtin class-name">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、Playbook"><a href="#三、Playbook" class="headerlink" title="三、Playbook"></a>三、Playbook</h3><h4 id="3-1-playbook-介绍"><a href="#3-1-playbook-介绍" class="headerlink" title="3.1 playbook 介绍"></a>3.1 playbook 介绍</h4><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/ansible-playbook.png"></p><p>playbooks 是一个不同于使用Ansible命令行执行方式的模式，其功能更强大灵活。简单来说，playbook是一个非常简单的配置管理和多主机部署系统，不同于任何已经存在的模式，可作为一个适合部署复杂应用程序的基础。Playbook可以定制配置，可以按照指定的操作步骤有序执行，支持同步和异步方式。值得注意的是playbook是通过YAML格式来进行描述定义的。</p><p>Playbook 剧本是由一个或多个 “play” 组成的列表。</p><p>Play 的主要功能在于将预定义的一组主机，装扮成事先通过 ansible 中的 task 定义好的角色。Task 实际是调用 Ansible 的一个 module，将多个 play 组织在一个 playbook 中，即可以让它们联合起来，按事先编排的机制执行预定义的动作</p><p>Playbook 文件是采用 YAML 语言编写的。</p><h4 id="3-2-YAML-语言"><a href="#3-2-YAML-语言" class="headerlink" title="3.2 YAML 语言"></a>3.2 YAML 语言</h4><h5 id="3-2-1-YAMl-语言介绍"><a href="#3-2-1-YAMl-语言介绍" class="headerlink" title="3.2.1 YAMl 语言介绍"></a>3.2.1 YAMl 语言介绍</h5><p>​         YAML 是一个可读性高的用来表达资料序列的格式。YAML 参考了其他多种语言，包括：XML、C 语言、Python、Perl 以及电子邮件格式 RFC2822 等。Clark Evans 在 2001 年首次发表了这种语言，另外 Ingy döt Net 与 Oren Ben-Kiki 也是这语言的共同设计者, 目前很多软件中采有此格式的文件，如: ubuntu，anisble，docker，k8s 等 YAML：YAML Ain’t Markup Language，即 YAML 不是 XML。不过，在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）</p><p>YAML 官方网站：<a href="http://www.yaml.org/">http://www.yaml.org</a></p><h5 id="3-2-2-YAML-语言特性"><a href="#3-2-2-YAML-语言特性" class="headerlink" title="3.2.2 YAML 语言特性"></a>3.2.2 YAML 语言特性</h5><ul><li>YAML 的可读性好</li><li>YAML 和脚本语言的交互性好</li><li>YAML 使用实现语言的数据类型</li><li>YAML 有一个一致的信息模型</li><li>YAML 易于实现</li><li>YAML 可以基于流来处理</li><li>YAML 表达能力强，扩展性好</li></ul><h5 id="3-2-3-YAML-语法简介"><a href="#3-2-3-YAML-语法简介" class="headerlink" title="3.2.3 YAML 语法简介"></a>3.2.3 YAML 语法简介</h5><ul><li>在单一文件第一行，用连续三个连字号 “-” 开始，还有选择性的连续三个点号( … ) 用来表示文件的结尾</li><li>次行开始正常写 Playbook 的内容，一般建议写明该 Playbook 的功能</li><li>使用 #号注释代码</li><li>缩进必须是统一的，不能空格和 tab 混用</li><li>缩进的级别也必须是一致的，同样的缩进代表同样的级别，程序判别配置的级别是通过缩进结合换行来实现的 YAML 文件内容是区别大小写的，key&#x2F;value 的值均需大小写敏感</li><li>多个 key&#x2F;value 可同行写也可换行写，同行使用，分隔</li><li>value 可是个字符串，也可是另一个列表</li><li>一个完整的代码块功能需最少元素需包括 name 和 task</li><li>一个 name 只能包括一个 task</li><li>YAML 文件扩展名通常为 yml 或 yaml</li></ul><p>YAML 的语法和其他高阶语言类似，并且可以简单表达清单、散列表、标量等数据结构。其结构（Structure）通过空格来展示，序列（Sequence）里的项用 “-“ 来代表，Map 里的键值对用 “:” 分隔，下面介绍常见的数据结构。</p><h6 id="3-2-3-1-List-列表"><a href="#3-2-3-1-List-列表" class="headerlink" title="3.2.3.1 List 列表"></a>3.2.3.1 List 列表</h6><p>列表由多个元素组成，每个元素放在不同行，且元素前均使用 “-” 打头，或者将所有元素用 [ ] 括起来放在同一行 范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># A list of tasty fruits，注意-号后面有一个空格</span>- Apple- Orange- Strawberry- Mango<span class="token punctuation">[</span>Apple,Orange,Strawberry,Mango<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-2-3-2-Dictionary-字典"><a href="#3-2-3-2-Dictionary-字典" class="headerlink" title="3.2.3.2 Dictionary 字典"></a>3.2.3.2 Dictionary 字典</h6><p>字典由多个 key 与 value 构成，key 和 value 之间用冒号 ：分隔，所有 k&#x2F;v 可以放在一行，或者每个 k&#x2F;v 分别放在不同行</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># An employee record</span>name: Example Developerjob: Developerskill: Elite也可以将key:value放置于<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>中进行表示，用,分隔多个key:value<span class="token comment"># An employee record，注意下面冒号后面有一个空格</span><span class="token punctuation">&#123;</span>name: “Example Developer”, job: “Developer”, skill: “Elite”<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">name: John Smithage: <span class="token number">41</span>gender: Malespouse:  name: Jane Smith  age: <span class="token number">37</span>  gender: Femalechildren:  - name: Jimmy Smith    age: <span class="token number">17</span>    gender: Male  - name: Jenny Smith    age <span class="token number">13</span>    gender: Female<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列表和字典是可以互相嵌套的</p><h5 id="3-2-4-三种常见的数据格式"><a href="#3-2-4-三种常见的数据格式" class="headerlink" title="3.2.4 三种常见的数据格式"></a>3.2.4 三种常见的数据格式</h5><ul><li>XML：Extensible Markup Language，可扩展标记语言，可用于数据交换和配置</li><li>JSON：JavaScript Object Notation, JavaScript 对象表记法，主要用来数据交换或配置，不支持注释</li><li>YAML：YAML Ain’t Markup Language YAML 不是一种标记语言， 主要用来配置，大小写敏感，不支持 tab</li></ul><p><strong>可以用工具互相转换，参考网站：</strong></p><p><a href="https://www.json2yaml.com/">https://www.json2yaml.com/</a></p><p><a href="http://www.bejson.com/json/json2yaml/">http://www.bejson.com/json/json2yaml/</a></p><h4 id="3-3-Playbook-核心元素"><a href="#3-3-Playbook-核心元素" class="headerlink" title="3.3 Playbook 核心元素"></a>3.3 Playbook 核心元素</h4><ul><li>Hosts 执行的远程主机列表</li><li>Tasks 任务集</li><li>Variables 内置变量或自定义变量在 playbook 中调用</li><li>Templates 模板，可替换模板文件中的变量并实现一些简单逻辑的文件</li><li>Handlers 和 notify 结合使用，由特定条件触发的操作，满足条件方才执行，否则不执行</li><li>tags 标签 指定某条任务执行，用于选择运行 playbook 中的部分代码。ansible 具有幂等性，因此会自动跳过没有变化的部分，即便如此，有些代码为测试其确实没有发生变化的时间依然会非常地长。此时，如果确信其没有变化，就可以通过 tags 跳过此些代码片断</li></ul><h5 id="3-3-1-hosts-组件"><a href="#3-3-1-hosts-组件" class="headerlink" title="3.3.1 hosts 组件"></a>3.3.1 hosts 组件</h5><p>Hosts：playbook 中的每一个 play 的目的都是为了让特定主机以某个指定的用户身份执行任务。hosts 用于指定要执行指定任务的主机，须事先定义在主机清单中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">one.example.comone.example.com:two.example.com<span class="token number">192.168</span>.1.50<span class="token number">192.168</span>.1.*Websrvs:dbsrvs         <span class="token comment">#或者，两个组的并集</span>Websrvs:<span class="token operator">&amp;</span>dbsrvs        <span class="token comment">#与，两个组的交集</span>webservers:<span class="token operator">!</span>phoenix  <span class="token comment">#在websrvs组，但不在dbsrvs组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">- hosts: websrvs:appsrvs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-3-2-remote-user-组件"><a href="#3-3-2-remote-user-组件" class="headerlink" title="3.3.2 remote_user 组件"></a>3.3.2 remote_user 组件</h5><p>remote_user: 可用于 Host 和 task 中。也可以通过指定其通过 sudo 的方式在远程主机上执行任务，其可用于 play 全局或某任务；此外，甚至可以在 sudo 时使用 sudo_user 指定 sudo 时切换的用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">- hosts: websrvs  remote_user: root  tasks:    - name: <span class="token builtin class-name">test</span> connection      ping:      remote_user: magedu      sudo: <span class="token function">yes</span>              <span class="token comment"># 默认sudo为root</span>      sudo_user:wang         <span class="token comment"># sudo为wang</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-3-3-task-列表和-action-组件"><a href="#3-3-3-task-列表和-action-组件" class="headerlink" title="3.3.3 task 列表和 action 组件"></a>3.3.3 task 列表和 action 组件</h5><p>play 的主体部分是 task list，task list 中有一个或多个 task, 各个 task 按次序逐个在 hosts 中指定的所有主机上执行，即在所有主机上完成第一个 task 后，再开始第二个 task task 的目的是使用指定的参数执行模块，而在模块参数中可以使用变量。模块执行是幂等的，这意味着多次执行是安全的，因为其结果均一致 每个 task 都应该有其 name，用于 playbook 的执行结果输出，建议其内容能清晰地描述任务执行步骤。如果未提供 name，则 action 的结果将用于输出</p><p>task 两种格式： (1) action: module arguments (2) module: arguments 建议使用</p><p>注意：shell 和 command 模块后面跟命令，而非 key&#x3D;value</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---- hosts: websrvs  remote_user: root  tasks:    - name: <span class="token function">install</span> httpd      yum: <span class="token assign-left variable">name</span><span class="token operator">=</span>httpd    - name: start httpd      service: <span class="token assign-left variable">name</span><span class="token operator">=</span>httpd <span class="token assign-left variable">state</span><span class="token operator">=</span>started <span class="token assign-left variable">enabled</span><span class="token operator">=</span>yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-3-4-其它组件"><a href="#3-3-4-其它组件" class="headerlink" title="3.3.4 其它组件"></a>3.3.4 其它组件</h5><p>某任务的状态在运行后为 changed 时，可通过 “notify” 通知给相应的 handlers 任务可以通过 “tags“打标签，可在 ansible-playbook 命令上使用 - t 指定进行调用</p><h5 id="4-3-5-ShellScripts-VS-Playbook-案例"><a href="#4-3-5-ShellScripts-VS-Playbook-案例" class="headerlink" title="4.3.5 ShellScripts VS Playbook 案例"></a><strong>4.3.5 ShellScripts VS Playbook 案例</strong></h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#SHELL脚本实现</span><span class="token comment">#!/bin/bash</span><span class="token comment"># 安装Apache</span>yum <span class="token function">install</span> <span class="token parameter variable">--quiet</span> <span class="token parameter variable">-y</span> httpd<span class="token comment"># 复制配置文件</span><span class="token function">cp</span> /tmp/httpd.conf /etc/httpd/conf/httpd.confcp/tmp/vhosts.conf /etc/httpd/conf.d/<span class="token comment"># 启动Apache，并设置开机启动</span>systemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span> httpd<span class="token comment">#Playbook实现</span>---- hosts: websrvs  remote_user: root  tasks:    - name: <span class="token string">"安装Apache"</span>      yum: <span class="token assign-left variable">name</span><span class="token operator">=</span>httpd    - name: <span class="token string">"复制配置文件"</span>      copy: <span class="token assign-left variable">src</span><span class="token operator">=</span>/tmp/httpd.conf <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/httpd/conf/    - name: <span class="token string">"复制配置文件"</span>      copy: <span class="token assign-left variable">src</span><span class="token operator">=</span>/tmp/vhosts.conf <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/httpd/conf.d/    - name: <span class="token string">"启动Apache，并设置开机启动"</span>      service: <span class="token assign-left variable">name</span><span class="token operator">=</span>httpd <span class="token assign-left variable">state</span><span class="token operator">=</span>started <span class="token assign-left variable">enabled</span><span class="token operator">=</span>yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-playbook-命令"><a href="#3-4-playbook-命令" class="headerlink" title="3.4 playbook 命令"></a><strong>3.4</strong> playbook 命令</h4><p>格式</p><pre class="line-numbers language-none"><code class="language-none">ansible-playbook &lt;filename.yml&gt; ... [options]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常见选项</p><pre class="line-numbers language-none"><code class="language-none">-C --check             #只检测可能会发生的改变，但不真正执行操作--list-hosts         #列出运行任务的主机--list-tags            #列出tag--list-tasks        #列出task--limit 主机列表       #只针对主机列表中的主机执行-v -vv  -vvv        #显示过程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范例</p><pre class="line-numbers language-none"><code class="language-none">ansible-playbook  file.yml  --check #只检测ansible-playbook  file.ymlansible-playbook  file.yml  --limit websrvs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-5-Playbook-初步"><a href="#3-5-Playbook-初步" class="headerlink" title="3.5 Playbook 初步"></a>3.5 Playbook 初步</h4><h5 id="3-5-1-利用-playbook-创建-mysql-用户"><a href="#3-5-1-利用-playbook-创建-mysql-用户" class="headerlink" title="3.5.1 利用 playbook 创建 mysql 用户"></a><strong>3.5.1</strong> 利用 playbook 创建 mysql 用户</h5><p>范例：mysql_user.yml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---- hosts: dbsrvs  remote_user: root  gather_facts: no    tasks:    - <span class="token punctuation">&#123;</span>name: create group, group: <span class="token assign-left variable">name</span><span class="token operator">=</span>mysql <span class="token assign-left variable">system</span><span class="token operator">=</span>yes <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">306</span><span class="token punctuation">&#125;</span>    - name: create user      user: <span class="token assign-left variable">name</span><span class="token operator">=</span>mysql <span class="token assign-left variable">shell</span><span class="token operator">=</span>/sbin/nologin <span class="token assign-left variable">system</span><span class="token operator">=</span>yes <span class="token assign-left variable">group</span><span class="token operator">=</span>mysql <span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">306</span> <span class="token assign-left variable">home</span><span class="token operator">=</span>/data/mysql <span class="token assign-left variable">create_home</span><span class="token operator">=</span>no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-5-2-利用-playbook-安装-nginx"><a href="#3-5-2-利用-playbook-安装-nginx" class="headerlink" title="3.5.2 利用 playbook 安装 nginx"></a><strong>3.5.2</strong> 利用 playbook 安装 nginx</h5><p>范例：install_nginx.yml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---<span class="token comment"># install nginx</span>- hosts: websrvs  remote_user: root  gather_facts: no    tasks:    - name: <span class="token function">add</span> group nginx      group: <span class="token assign-left variable">name</span><span class="token operator">=</span>nginx <span class="token assign-left variable">state</span><span class="token operator">=</span>present    - name: <span class="token function">add</span> user nginx      user: <span class="token assign-left variable">name</span><span class="token operator">=</span>nginx <span class="token assign-left variable">state</span><span class="token operator">=</span>present <span class="token assign-left variable">group</span><span class="token operator">=</span>nginx    - name: Install Nginx      yum: <span class="token assign-left variable">name</span><span class="token operator">=</span>nginx <span class="token assign-left variable">state</span><span class="token operator">=</span>present    - name: web page      copy: <span class="token assign-left variable">src</span><span class="token operator">=</span>files/index.html <span class="token assign-left variable">dest</span><span class="token operator">=</span>/usr/share/nginx/html/index.html    - name: Start Nginx      service: <span class="token assign-left variable">name</span><span class="token operator">=</span>nginx <span class="token assign-left variable">state</span><span class="token operator">=</span>started <span class="token assign-left variable">enabled</span><span class="token operator">=</span>yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-5-3-利用-playbook-安装和卸载-httpd"><a href="#3-5-3-利用-playbook-安装和卸载-httpd" class="headerlink" title="3.5.3 利用 playbook 安装和卸载 httpd"></a>3.5.3 利用 playbook 安装和卸载 httpd</h5><p>范例：install_httpd.yml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---<span class="token comment">#install httpd</span>- hosts: websrvs  remote_user: root  gather_facts: no  tasks:    - name: Install httpd      yum: <span class="token assign-left variable">name</span><span class="token operator">=</span>httpd <span class="token assign-left variable">state</span><span class="token operator">=</span>present    - name: Install configure <span class="token function">file</span>      copy: <span class="token assign-left variable">src</span><span class="token operator">=</span>files/httpd.conf <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/httpd/conf/    - name: web html      copy: <span class="token assign-left variable">src</span><span class="token operator">=</span>files/index.html  <span class="token assign-left variable">dest</span><span class="token operator">=</span>/var/www/html/    - name: start <span class="token function">service</span>      service: <span class="token assign-left variable">name</span><span class="token operator">=</span>httpd <span class="token assign-left variable">state</span><span class="token operator">=</span>started <span class="token assign-left variable">enabled</span><span class="token operator">=</span>yesansible-playbook   install_httpd.yml <span class="token parameter variable">--limit</span> <span class="token number">10.0</span>.0.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范例：remove_httpd.yml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#remove_httpd.yml</span>---- hosts: websrvs  remote_user: root  tasks:    - name: remove httpd package      yum: <span class="token assign-left variable">name</span><span class="token operator">=</span>httpd <span class="token assign-left variable">state</span><span class="token operator">=</span>absent    - name: remove apache user      user: <span class="token assign-left variable">name</span><span class="token operator">=</span>apache <span class="token assign-left variable">state</span><span class="token operator">=</span>absent    - name: remove config <span class="token function">file</span>      file: <span class="token assign-left variable">name</span><span class="token operator">=</span>/etc/httpd  <span class="token assign-left variable">state</span><span class="token operator">=</span>absent    - name: remove web html      file: <span class="token assign-left variable">name</span><span class="token operator">=</span>/var/www/html/index.html <span class="token assign-left variable">state</span><span class="token operator">=</span>absent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-5-4-利用-playbook-安装-mysql"><a href="#3-5-4-利用-playbook-安装-mysql" class="headerlink" title="3.5.4 利用 playbook 安装 mysql"></a>3.5.4 利用 playbook 安装 mysql</h5><p>范例：安装 mysql-5.6.46-linux-glibc2.12</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#ls -l /data/ansible/files/mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz</span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">403177622</span> Dec  <span class="token number">4</span> <span class="token number">13</span>:05 /data/ansible/files/mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#cat /data/ansible/files/my.cnf</span><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token assign-left variable">socket</span><span class="token operator">=</span>/tmp/mysql.sock<span class="token assign-left variable">user</span><span class="token operator">=</span>mysqlsymbolic-links<span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">datadir</span><span class="token operator">=</span>/data/mysql<span class="token assign-left variable">innodb_file_per_table</span><span class="token operator">=</span><span class="token number">1</span>log-binpid-file<span class="token operator">=</span>/data/mysql/mysqld.pid<span class="token punctuation">[</span>client<span class="token punctuation">]</span><span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">3306</span><span class="token assign-left variable">socket</span><span class="token operator">=</span>/tmp/mysql.sock<span class="token punctuation">[</span>mysqld_safe<span class="token punctuation">]</span>log-error<span class="token operator">=</span>/var/log/mysqld.log<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#cat /data/ansible/files/secure_mysql.sh</span><span class="token comment">#!/bin/bash</span>/usr/local/mysql/bin/mysql_secure_installation <span class="token operator">&lt;&lt;</span><span class="token string">EOFymagedumageduyyyyEOF</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#tree /data/ansible/files/</span>/data/ansible/files/├── my.cnf├── mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz└── secure_mysql.sh<span class="token number">0</span> directories, <span class="token number">3</span> files<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#cat /data/ansible/install_mysql.yml</span>---<span class="token comment"># install mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz</span>- hosts: dbsrvs  remote_user: root  gather_facts: no  tasks:    - name: <span class="token function">install</span> packages      yum: <span class="token assign-left variable">name</span><span class="token operator">=</span>libaio,perl-Data-Dumper,perl-Getopt-Long    - name: create mysql group      group: <span class="token assign-left variable">name</span><span class="token operator">=</span>mysql <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">306</span>     - name: create mysql user      user: <span class="token assign-left variable">name</span><span class="token operator">=</span>mysql <span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">306</span> <span class="token assign-left variable">group</span><span class="token operator">=</span>mysql <span class="token assign-left variable">shell</span><span class="token operator">=</span>/sbin/nologin <span class="token assign-left variable">system</span><span class="token operator">=</span>yes <span class="token assign-left variable">create_home</span><span class="token operator">=</span>no <span class="token assign-left variable">home</span><span class="token operator">=</span>/data/mysql    - name: copy <span class="token function">tar</span> to remote <span class="token function">host</span> and <span class="token function">file</span> mode      unarchive: <span class="token assign-left variable">src</span><span class="token operator">=</span>/data/ansible/files/mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz <span class="token assign-left variable">dest</span><span class="token operator">=</span>/usr/local/ <span class="token assign-left variable">owner</span><span class="token operator">=</span>root <span class="token assign-left variable">group</span><span class="token operator">=</span>root    - name: create linkfile  /usr/local/mysql      file: <span class="token assign-left variable">src</span><span class="token operator">=</span>/usr/local/mysql-5.6.46-linux-glibc2.12-x86_64 <span class="token assign-left variable">dest</span><span class="token operator">=</span>/usr/local/mysql <span class="token assign-left variable">state</span><span class="token operator">=</span>link    - name: data <span class="token function">dir</span>      shell: <span class="token assign-left variable">chdir</span><span class="token operator">=</span>/usr/local/mysql/  ./scripts/mysql_install_db <span class="token parameter variable">--datadir</span><span class="token operator">=</span>/data/mysql <span class="token parameter variable">--user</span><span class="token operator">=</span>mysql      tags: data    - name: config my.cnf      copy: <span class="token assign-left variable">src</span><span class="token operator">=</span>/data/ansible/files/my.cnf  <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/my.cnf    - name: <span class="token function">service</span> script      shell: /bin/cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld    - name: <span class="token builtin class-name">enable</span> <span class="token function">service</span>      shell: /etc/init.d/mysqld start<span class="token punctuation">;</span><span class="token function">chkconfig</span> <span class="token parameter variable">--add</span> mysqld<span class="token punctuation">;</span><span class="token function">chkconfig</span> mysqld on      tags: <span class="token function">service</span>    - name: <span class="token environment constant">PATH</span> variable      copy: <span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token string">'PATH=/usr/local/mysql/bin:$PATH'</span> <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/profile.d/mysql.sh    - name: secure script      script: /data/ansible/files/secure_mysql.sh      tags: script<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>范例：install_mariadb.yml</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---<span class="token comment">#Installing MariaDB Binary Tarballs</span>- hosts: dbsrvs  remote_user: root  gather_facts: no  tasks:    - name: create group      group: <span class="token assign-left variable">name</span><span class="token operator">=</span>mysql <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">27</span> <span class="token assign-left variable">system</span><span class="token operator">=</span>yes    - name: create user      user: <span class="token assign-left variable">name</span><span class="token operator">=</span>mysql <span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">27</span> <span class="token assign-left variable">system</span><span class="token operator">=</span>yes <span class="token assign-left variable">group</span><span class="token operator">=</span>mysql <span class="token assign-left variable">shell</span><span class="token operator">=</span>/sbin/nologin <span class="token assign-left variable">home</span><span class="token operator">=</span>/data/mysql <span class="token assign-left variable">create_home</span><span class="token operator">=</span>no    - name: <span class="token function">mkdir</span> datadir      file: <span class="token assign-left variable">path</span><span class="token operator">=</span>/data/mysql <span class="token assign-left variable">owner</span><span class="token operator">=</span>mysql <span class="token assign-left variable">group</span><span class="token operator">=</span>mysql <span class="token assign-left variable">state</span><span class="token operator">=</span>directory    - name: unarchive package      unarchive: <span class="token assign-left variable">src</span><span class="token operator">=</span>/data/ansible/files/mariadb-10.2.27-linux-x86_64.tar.gz <span class="token assign-left variable">dest</span><span class="token operator">=</span>/usr/local/ <span class="token assign-left variable">owner</span><span class="token operator">=</span>root <span class="token assign-left variable">group</span><span class="token operator">=</span>root    - name: <span class="token function">link</span>      file: <span class="token assign-left variable">src</span><span class="token operator">=</span>/usr/local/mariadb-10.2.27-linux-x86_64 <span class="token assign-left variable">path</span><span class="token operator">=</span>/usr/local/mysql <span class="token assign-left variable">state</span><span class="token operator">=</span>link    - name: <span class="token function">install</span> database      shell: <span class="token assign-left variable">chdir</span><span class="token operator">=</span>/usr/local/mysql   ./scripts/mysql_install_db <span class="token parameter variable">--datadir</span><span class="token operator">=</span>/data/mysql <span class="token parameter variable">--user</span><span class="token operator">=</span>mysql    - name: config <span class="token function">file</span>      copy: <span class="token assign-left variable">src</span><span class="token operator">=</span>/data/ansible/files/my.cnf  <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/ <span class="token assign-left variable">backup</span><span class="token operator">=</span>yes    - name: <span class="token function">service</span> script      shell: /bin/cp  /usr/local/mysql/support-files/mysql.server  /etc/init.d/mysqld    - name: start <span class="token function">service</span>      service: <span class="token assign-left variable">name</span><span class="token operator">=</span>mysqld <span class="token assign-left variable">state</span><span class="token operator">=</span>started <span class="token assign-left variable">enabled</span><span class="token operator">=</span>yes    - name: <span class="token environment constant">PATH</span> variable      copy: <span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token string">'PATH=/usr/local/mysql/bin:$PATH'</span> <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/profile.d/mysql.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-6-Playbook-中使用-handlers-和-notify"><a href="#3-6-Playbook-中使用-handlers-和-notify" class="headerlink" title="3.6 Playbook 中使用 handlers 和 notify"></a><strong>3.6</strong> Playbook 中使用 handlers 和 notify</h4><p>Handlers 本质是 task list ，类似于 MySQL 中的触发器触发的行为，其中的 task 与前述的 task 并没有本质上的不同，主要用于当关注的资源发生变化时，才会采取一定的操作。而 Notify 对应的 action 可用于在每个 play 的最后被触发，这样可避免多次有改变发生时每次都执行指定的操作，仅在所有的变化发生完成后一次性地执行指定操作。在 notify 中列出的操作称为 handler，也即 notify 中调用 handler 中定义的操作</p><p>案例:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---- hosts: websrvs  remote_user: root  gather_facts: no  tasks:    - name: Install httpd      yum: <span class="token assign-left variable">name</span><span class="token operator">=</span>httpd <span class="token assign-left variable">state</span><span class="token operator">=</span>present    - name: Install configure <span class="token function">file</span>      copy: <span class="token assign-left variable">src</span><span class="token operator">=</span>files/httpd.conf <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/httpd/conf/      notify: restart httpd    - name: ensure apache is running      service: <span class="token assign-left variable">name</span><span class="token operator">=</span>httpd <span class="token assign-left variable">state</span><span class="token operator">=</span>started <span class="token assign-left variable">enabled</span><span class="token operator">=</span>yes  handlers:    - name: restart httpd      service: <span class="token assign-left variable">name</span><span class="token operator">=</span>httpd <span class="token assign-left variable">state</span><span class="token operator">=</span>restarted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---- hosts: websrvs  remote_user: root  gather_facts: no  tasks:    - name: <span class="token function">add</span> group nginx      user: <span class="token assign-left variable">name</span><span class="token operator">=</span>nginx <span class="token assign-left variable">state</span><span class="token operator">=</span>present    - name: <span class="token function">add</span> user nginx      user: <span class="token assign-left variable">name</span><span class="token operator">=</span>nginx <span class="token assign-left variable">state</span><span class="token operator">=</span>present <span class="token assign-left variable">group</span><span class="token operator">=</span>nginx    - name: Install Nginx      yum: <span class="token assign-left variable">name</span><span class="token operator">=</span>nginx <span class="token assign-left variable">state</span><span class="token operator">=</span>present    - name: config      copy: <span class="token assign-left variable">src</span><span class="token operator">=</span>/root/config.txt <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/nginx/nginx.conf      notify:        - Restart Nginx        - Check Nginx Process   handlers:     - name: Restart Nginx       service: <span class="token assign-left variable">name</span><span class="token operator">=</span>nginx <span class="token assign-left variable">state</span><span class="token operator">=</span>restarted <span class="token assign-left variable">enabled</span><span class="token operator">=</span>yes     - name: Check Nginx process       shell: <span class="token function">killall</span> <span class="token parameter variable">-0</span> nginx <span class="token operator">&amp;></span> /tmp/nginx.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-7-Playbook-中使用-tags-组件"><a href="#3-7-Playbook-中使用-tags-组件" class="headerlink" title="3.7 Playbook 中使用 tags 组件"></a>3.7 Playbook 中使用 tags 组件</h4><p>在 playbook 文件中，可以利用 tags 组件，为特定 task 指定标签，当在执行 playbook 时，可以只执行特定 tags 的 task, 而非整个 playbook 文件</p><p>案例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span>  httpd.yml---<span class="token comment"># tags example</span>- hosts: websrvs  remote_user: root  gather_facts: no  tasks:    - name: Install httpd      yum: <span class="token assign-left variable">name</span><span class="token operator">=</span>httpd <span class="token assign-left variable">state</span><span class="token operator">=</span>present    - name: Install configure <span class="token function">file</span>      copy: <span class="token assign-left variable">src</span><span class="token operator">=</span>files/httpd.conf <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/httpd/conf/      tags: conf    - name: start httpd <span class="token function">service</span>      tags: <span class="token function">service</span>      service: <span class="token assign-left variable">name</span><span class="token operator">=</span>httpd <span class="token assign-left variable">state</span><span class="token operator">=</span>started <span class="token assign-left variable">enabled</span><span class="token operator">=</span>yesansible-playbook –t conf,service  httpd.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-8-Playbook-中使用变量"><a href="#3-8-Playbook-中使用变量" class="headerlink" title="3.8 Playbook 中使用变量"></a>3.8 Playbook 中使用变量</h4><p>变量名：仅能由字母、数字和下划线组成，且只能以字母开头</p><p>变量定义：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">variable</span><span class="token operator">=</span>value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">http_port</span><span class="token operator">=</span><span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>变量调用方式：</p><p>通过  调用变量，且变量名前后建议加空格，有时用“” 才生效</p><p>变量来源：</p><ol><li><p>ansible 的 setup facts 远程主机的所有变量都可直接调用</p></li><li><p>通过命令行指定变量，优先级最高</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ansible-playbook <span class="token parameter variable">-e</span> <span class="token assign-left variable">varname</span><span class="token operator">=</span>value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在 playbook 文件中定义</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vars:  - var1: value1  - var2: value2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在独立的变量 YAML 文件中定义</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">- hosts: all  vars_files:    - vars.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在 &#x2F;etc&#x2F;ansible&#x2F;hosts 中定义</p><p>主机（普通）变量：主机组中主机单独定义，优先级高于公共变量 组（公共）变量：针对主机组中所有主机定义统一变量</p></li><li><p>在 role 中定义</p></li></ol><h5 id="3-8-1-使用-setup-模块中变量"><a href="#3-8-1-使用-setup-模块中变量" class="headerlink" title="3.8.1 使用 setup 模块中变量"></a>3.8.1 使用 setup 模块中变量</h5><p>本模块自动在 playbook 调用，不要用 ansible 命令调用</p><p>案例：使用 setup 变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---<span class="token comment">#var.yml</span>- hosts: all  remote_user: root  gather_facts: <span class="token function">yes</span>  tasks:    - name: create log <span class="token function">file</span>      file: <span class="token assign-left variable">name</span><span class="token operator">=</span>/data/<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> ansible_nodename <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>.log <span class="token assign-left variable">state</span><span class="token operator">=</span>touch <span class="token assign-left variable">owner</span><span class="token operator">=</span>wang <span class="token assign-left variable">mode</span><span class="token operator">=</span><span class="token number">600</span>ansible-playbook  var.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-8-2-在-playbook-命令行中定义变量"><a href="#3-8-2-在-playbook-命令行中定义变量" class="headerlink" title="3.8.2 在 playbook 命令行中定义变量"></a>3.8.2 在 playbook 命令行中定义变量</h5><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> var2.yml---- hosts: websrvs  remote_user: root  tasks:    - name: <span class="token function">install</span> package      yum: <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> pkname <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token assign-left variable">state</span><span class="token operator">=</span>presentansible-playbook  –e <span class="token assign-left variable">pkname</span><span class="token operator">=</span>httpd  var2.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-8-3-在-playbook-文件中定义变量"><a href="#3-8-3-在-playbook-文件中定义变量" class="headerlink" title="3.8.3 在 playbook 文件中定义变量"></a>3.8.3 在 playbook 文件中定义变量</h5><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> var3.yml---- hosts: websrvs  remote_user: root  vars:    - username: user1    - groupname: group1  tasks:    - name: create group      group: <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> groupname <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token assign-left variable">state</span><span class="token operator">=</span>present    - name: create user      user: <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> username <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token assign-left variable">group</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> groupname <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token assign-left variable">state</span><span class="token operator">=</span>presentansible-playbook <span class="token parameter variable">-e</span> "username<span class="token operator">=</span>user2 <span class="token assign-left variable">groupname</span><span class="token operator">=</span>group2”  var3.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-6-4-使用变量文件"><a href="#3-6-4-使用变量文件" class="headerlink" title="3.6.4 使用变量文件"></a>3.6.4 使用变量文件</h5><p>可以在一个独立的 playbook 文件中定义变量，在另一个 playbook 文件中引用变量文件中的变量，比 playbook 中定义的变量优化级高</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> vars.yml---<span class="token comment"># variables file</span>package_name: mariadb-serverservice_name: mariadb<span class="token function">vim</span>  var4.yml---<span class="token comment">#install package and start service</span>- hosts: dbsrvs  remote_user: root  vars_files:    - /root/vars.yml  tasks:    - name: <span class="token function">install</span> package      yum: <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> package_name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      tags: <span class="token function">install</span>    - name: start <span class="token function">service</span>      service: <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> service_name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token assign-left variable">state</span><span class="token operator">=</span>started <span class="token assign-left variable">enabled</span><span class="token operator">=</span>yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span>  vars2.yml---var1: httpdvar2: nginx<span class="token function">cat</span>  var5.yml---- hosts: web  remote_user: root  vars_files:    - vars2.yml   tasks:     - name: create httpd log       file: <span class="token assign-left variable">name</span><span class="token operator">=</span>/app/<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> var1 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>.log <span class="token assign-left variable">state</span><span class="token operator">=</span>touch     - name: create nginx log       file: <span class="token assign-left variable">name</span><span class="token operator">=</span>/app/<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> var2 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>.log <span class="token assign-left variable">state</span><span class="token operator">=</span>touch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-6-5-主机清单文件中定义变量"><a href="#3-6-5-主机清单文件中定义变量" class="headerlink" title="3.6.5 主机清单文件中定义变量"></a>3.6.5 主机清单文件中定义变量</h5><h6 id="3-6-5-1-主机变量"><a href="#3-6-5-1-主机变量" class="headerlink" title="3.6.5.1 主机变量"></a>3.6.5.1 主机变量</h6><p>在 inventory 主机清单文件中为指定的主机定义变量以便于在 playbook 中使用</p><p>范例：</p><pre class="line-numbers language-none"><code class="language-none">[websrvs]www1.magedu.com http_port&#x3D;80 maxRequestsPerChild&#x3D;808www2.magedu.com http_port&#x3D;8080 maxRequestsPerChild&#x3D;909<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="3-6-5-2-组（公共）变量"><a href="#3-6-5-2-组（公共）变量" class="headerlink" title="3.6.5.2 组（公共）变量"></a>3.6.5.2 组（公共）变量</h6><p>在 inventory 主机清单文件中赋予给指定组内所有主机上的在 playbook 中可用的变量，如果和主机变量是同名，优先级低于主机变量</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>websrvs<span class="token punctuation">]</span>www1.magedu.comwww2.magedu.com<span class="token punctuation">[</span>websrvs:vars<span class="token punctuation">]</span><span class="token assign-left variable">ntp_server</span><span class="token operator">=</span>ntp.magedu.com<span class="token assign-left variable">nfs_server</span><span class="token operator">=</span>nfs.magedu.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/ansible/hosts<span class="token punctuation">[</span>websrvs<span class="token punctuation">]</span><span class="token number">192.168</span>.0.101 <span class="token assign-left variable">hname</span><span class="token operator">=</span>www1 <span class="token assign-left variable">domain</span><span class="token operator">=</span>magedu.io<span class="token number">192.168</span>.0.102 <span class="token assign-left variable">hname</span><span class="token operator">=</span>www2<span class="token punctuation">[</span>websvrs:vars<span class="token punctuation">]</span><span class="token assign-left variable">mark</span><span class="token operator">=</span>“-”<span class="token assign-left variable">domain</span><span class="token operator">=</span>magedu.organsible  websvrs  –m <span class="token function">hostname</span> –a ‘name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> hname <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> mark <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> domain <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>’<span class="token function">bash</span><span class="token comment">#命令行指定变量：</span>ansible  websvrs  –e <span class="token assign-left variable">domain</span><span class="token operator">=</span>magedu.cn –m <span class="token function">hostname</span> –a    ‘name<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> hname <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> mark <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> domain <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>’<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-9-template-模板"><a href="#3-9-template-模板" class="headerlink" title="3.9 template 模板"></a>3.9 template 模板</h4><p>模板是一个文本文件，可以做为生成文件的模版，并且模板文件中还可嵌套 jinja 语法</p><h5 id="3-9-1-jinja2-语言"><a href="#3-9-1-jinja2-语言" class="headerlink" title="3.9.1 jinja2 语言"></a>3.9.1 jinja2 语言</h5><p>网站：<code>https://jinja.palletsprojects.com/en/2.11.x/</code></p><p>jinja2 语言使用字面量，有下面形式：</p><p>字符串：使用单引号或双引号 </p><p>数字：整数，浮点数 </p><p>列表：[item1, item2, …] </p><p>元组：(item1, item2, …) </p><p>字典：{key1:value1, key2:value2, …} </p><p>布尔型：true&#x2F;false </p><p>算术运算：+, -, *, &#x2F;, &#x2F;&#x2F;, %, ** </p><p>比较操作：&#x3D;&#x3D;, !&#x3D;, &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D; </p><p>逻辑运算：and，or，not </p><p>流表达式：For，If，When</p><p><strong>字面量</strong></p><p>表达式最简单的形式就是字面量。字面量表示诸如字符串和数值的 Python 对象。如 “Hello World” 双引号或单引号中间的一切都是字符串。无论何时你需要在模板中使用一个字符串（比如函数调用、过滤器或只是包含或继承一个模板的参数），如 42，42.23 </p><p>数值可以为整数和浮点数。如果有小数点，则为浮点数，否则为整数。在 Python 里， 42 和 42.0 是不一样的</p><p><strong>算术运算</strong></p><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230212191451.png"></p><p><strong>比较操作符</strong> </p><p>&#x3D;&#x3D; 比较两个对象是否相等 </p><p>!&#x3D; 比较两个对象是否不等</p><p>&gt; 如果左边大于右边，返回 true </p><p>&gt;&#x3D; 如果左边大于等于右边，返回 true </p><p>&lt; 如果左边小于右边，返回 true </p><p>&lt;&#x3D; 如果左边小于等于右边，返回 true</p><p><strong>逻辑运算符</strong> </p><p>对于 if 语句，在 for 过滤或 if 表达式中，它可以用于联合多个表达式 </p><p>and 如果左操作数和右操作数同为真，返回 true </p><p>or 如果左操作数和右操作数有一个为真，返回 true </p><p>not 对一个表达式取反 </p><p>(expr) 表达式组 </p><p>true &#x2F; false true 永远是 true ，而 false 始终是 false</p><h5 id="3-9-2-template"><a href="#3-9-2-template" class="headerlink" title="3.9.2 template"></a>3.9.2 template</h5><p>template 功能：可以根据和参考模块文件，动态生成相类似的配置文件 template 文件必须存放于 templates 目录下，且命名为 .j2 结尾 yaml&#x2F;yml 文件需和 templates 目录平级，目录结构如下示例：.&#x2F; ├── temnginx.yml └── templates └── nginx.conf.j2</p><p>范例：利用 template 同步 nginx 配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#准备templates/nginx.conf.j2文件</span><span class="token function">vim</span> temnginx.yml---- hosts: websrvs  remote_user: root  tasks:    - name: template config to remote hosts      template: <span class="token assign-left variable">src</span><span class="token operator">=</span>nginx.conf.j2 <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/nginx/nginx.conf ansible-playbook temnginx.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>template 变更替换</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改文件nginx.conf.j2</span><span class="token function">mkdir</span> templates<span class="token function">vim</span> templates/nginx.conf.j2worker_processes <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> ansible_processor_vcpus <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">vim</span> temnginx2.yml---- hosts: websrvs  remote_user: root  tasks:    - name: <span class="token function">install</span> nginx      yum: <span class="token assign-left variable">name</span><span class="token operator">=</span>nginx    - name: template config to remote hosts      template: <span class="token assign-left variable">src</span><span class="token operator">=</span>nginx.conf.j2 <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/nginx/nginx.conf    - name: start <span class="token function">service</span>      service: <span class="token assign-left variable">name</span><span class="token operator">=</span>nginx <span class="token assign-left variable">state</span><span class="token operator">=</span>started <span class="token assign-left variable">enable</span><span class="token operator">=</span>yesansible-playbook temnginx2.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>template 算术运算</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> nginx.conf.j2worker_processes <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> ansible_processor_vcpus**2 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>worker_processes <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> ansible_processor_vcpus+2 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ansible<span class="token punctuation">]</span><span class="token comment">#vim templates/nginx.conf.j2</span>worker_processes <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> ansible_processor_vcpus**3 <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">[</span>root@ansible ansible<span class="token punctuation">]</span><span class="token comment">#cat templnginx.yml</span>---- hosts: websrvs  remote_user: root  tasks:    - name: <span class="token function">install</span> nginx      yum: <span class="token assign-left variable">name</span><span class="token operator">=</span>nginx    - name: template config to remote hosts      template: <span class="token assign-left variable">src</span><span class="token operator">=</span>nginx.conf.j2 <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/nginx/nginx.conf      notify: restart nginx    - name: start <span class="token function">service</span>      service: <span class="token assign-left variable">name</span><span class="token operator">=</span>nginx <span class="token assign-left variable">state</span><span class="token operator">=</span>started <span class="token assign-left variable">enabled</span><span class="token operator">=</span>yes  handlers:    - name: restart nginx      service: <span class="token assign-left variable">name</span><span class="token operator">=</span>nginx <span class="token assign-left variable">state</span><span class="token operator">=</span>restartedansible-playbook  templnginx.yml <span class="token parameter variable">--limit</span> <span class="token number">10.0</span>.0.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-9-3-template-中使用流程控制-for-和-if"><a href="#3-9-3-template-中使用流程控制-for-和-if" class="headerlink" title="3.9.3 template 中使用流程控制 for 和 if"></a>3.9.3 template 中使用流程控制 for 和 if</h5><p>template 中也可以使用流程控制 for 循环和 if 条件判断，实现动态生成文件功能</p><p>范例1：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#temlnginx2.yml</span>---- hosts: websrvs  remote_user: root  vars:    nginx_vhosts:      - <span class="token number">81</span>      - <span class="token number">82</span>      - <span class="token number">83</span>  tasks:    - name: template config      template: <span class="token assign-left variable">src</span><span class="token operator">=</span>nginx.conf.j2 <span class="token assign-left variable">dest</span><span class="token operator">=</span>/data/nginx.conf<span class="token comment">#templates/nginx.conf2.j2</span><span class="token punctuation">&#123;</span>% <span class="token keyword">for</span> <span class="token for-or-select variable">vhost</span> <span class="token keyword">in</span>  nginx_vhosts %<span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>   listen <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> vhost <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>% endfor %<span class="token punctuation">&#125;</span>ansible-playbook <span class="token parameter variable">-C</span>  templnginx2.yml  <span class="token parameter variable">--limit</span> <span class="token number">10.0</span>.0.8<span class="token comment">#生成的结果：</span>server <span class="token punctuation">&#123;</span>   listen <span class="token number">81</span><span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>   listen <span class="token number">82</span><span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>   listen <span class="token number">83</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范例2：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#temlnginx3.yml</span>---- hosts: websrvs  remote_user: root  vars:    nginx_vhosts:      - listen: <span class="token number">8080</span>  tasks:    - name: config <span class="token function">file</span>      template: <span class="token assign-left variable">src</span><span class="token operator">=</span>nginx.conf3.j2 <span class="token assign-left variable">dest</span><span class="token operator">=</span>/data/nginx3.conf<span class="token comment">#templates/nginx.conf3.j2</span><span class="token punctuation">&#123;</span>% <span class="token keyword">for</span> <span class="token for-or-select variable">vhost</span> <span class="token keyword">in</span> nginx_vhosts %<span class="token punctuation">&#125;</span>   server <span class="token punctuation">&#123;</span>  listen <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> vhost.listen <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>% endfor %<span class="token punctuation">&#125;</span>ansible-playbook   templnginx3.yml  <span class="token parameter variable">--limit</span> <span class="token number">10.0</span>.0.8<span class="token comment">#生成的结果</span>server <span class="token punctuation">&#123;</span>  listen <span class="token number">8080</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范:3：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#templnginx4.yml</span>- hosts: websrvs  remote_user: root  vars:    nginx_vhosts:      - listen: <span class="token number">8080</span>        server_name: <span class="token string">"web1.magedu.com"</span>        root: <span class="token string">"/var/www/nginx/web1/"</span>      - listen: <span class="token number">8081</span>        server_name: <span class="token string">"web2.magedu.com"</span>        root: <span class="token string">"/var/www/nginx/web2/"</span>      - <span class="token punctuation">&#123;</span>listen: <span class="token number">8082</span>, server_name: <span class="token string">"web3.magedu.com"</span>, root: <span class="token string">"/var/www/nginx/web3/"</span><span class="token punctuation">&#125;</span>  tasks:    - name: template config      template: <span class="token assign-left variable">src</span><span class="token operator">=</span>nginx.conf4.j2 <span class="token assign-left variable">dest</span><span class="token operator">=</span>/data/nginx4.conf<span class="token comment"># templates/nginx.conf4.j2</span><span class="token punctuation">&#123;</span>% <span class="token keyword">for</span> <span class="token for-or-select variable">vhost</span> <span class="token keyword">in</span> nginx_vhosts %<span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>   listen <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> vhost.listen <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   server_name <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> vhost.server_name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   root <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> vhost.root <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>% endfor %<span class="token punctuation">&#125;</span>ansible-playbook  templnginx4.yml <span class="token parameter variable">--limit</span> <span class="token number">10.0</span>.0.8<span class="token comment">#生成结果：</span>server <span class="token punctuation">&#123;</span>    listen <span class="token number">8080</span>    server_name web1.magedu.com    root /var/www/nginx/web1/<span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>    listen <span class="token number">8081</span>    server_name web2.magedu.com    root /var/www/nginx/web2/<span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>    listen <span class="token number">8082</span>    server_name web3.magedu.com    root /var/www/nginx/web3/<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在模版文件中还可以使用 if 条件判断，决定是否生成相关的配置信息</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#templnginx5.yml</span>- hosts: websrvs  remote_user: root  vars:    nginx_vhosts:      - web1:        listen: <span class="token number">8080</span>        root: <span class="token string">"/var/www/nginx/web1/"</span>      - web2:        listen: <span class="token number">8080</span>        server_name: <span class="token string">"web2.magedu.com"</span>        root: <span class="token string">"/var/www/nginx/web2/"</span>      - web3:        listen: <span class="token number">8080</span>        server_name: <span class="token string">"web3.magedu.com"</span>        root: <span class="token string">"/var/www/nginx/web3/"</span>  tasks:    - name: template config to      template: <span class="token assign-left variable">src</span><span class="token operator">=</span>nginx.conf5.j2 <span class="token assign-left variable">dest</span><span class="token operator">=</span>/data/nginx5.conf<span class="token comment">#templates/nginx.conf5.j2</span><span class="token punctuation">&#123;</span>% <span class="token keyword">for</span> <span class="token for-or-select variable">vhost</span> <span class="token keyword">in</span>  nginx_vhosts %<span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>   listen <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> vhost.listen <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   <span class="token punctuation">&#123;</span>% <span class="token keyword">if</span> vhost.server_name is defined %<span class="token punctuation">&#125;</span>server_name <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> vhost.server_name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>   <span class="token punctuation">&#123;</span>% endif %<span class="token punctuation">&#125;</span>root  <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> vhost.root <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>% endfor %<span class="token punctuation">&#125;</span><span class="token comment">#生成的结果</span>server <span class="token punctuation">&#123;</span>   listen <span class="token number">8080</span>   root  /var/www/nginx/web1/<span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>   listen <span class="token number">8080</span>   server_name web2.magedu.com   root  /var/www/nginx/web2/<span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>   listen <span class="token number">8080</span>   server_name web3.magedu.com   root  /var/www/nginx/web3/<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-10-playbook-使用-when"><a href="#3-10-playbook-使用-when" class="headerlink" title="3.10 playbook 使用 when"></a>3.10 playbook 使用 when</h4><p>when 语句，可以实现条件测试。如果需要根据变量、facts 或此前任务的执行结果来做为某 task 执行与否的前提时要用到条件测试, 通过在 task 后添加 when 子句即可使用条件测试，jinja2 的语法格式</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---- hosts: websrvs  remote_user: root  tasks:    - name: <span class="token string">"shutdown RedHat flavored systems"</span>      command: /sbin/shutdown <span class="token parameter variable">-h</span> now      when: ansible_os_family <span class="token operator">==</span> <span class="token string">"RedHat"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---- hosts: websrvs  remote_user: root  tasks:    - name: <span class="token function">add</span> group nginx      tags: user      user: <span class="token assign-left variable">name</span><span class="token operator">=</span>nginx <span class="token assign-left variable">state</span><span class="token operator">=</span>present    - name: <span class="token function">add</span> user nginx      user: <span class="token assign-left variable">name</span><span class="token operator">=</span>nginx <span class="token assign-left variable">state</span><span class="token operator">=</span>present <span class="token assign-left variable">group</span><span class="token operator">=</span>nginx    - name: Install Nginx      yum: <span class="token assign-left variable">name</span><span class="token operator">=</span>nginx <span class="token assign-left variable">state</span><span class="token operator">=</span>present    - name: restart Nginx      service: <span class="token assign-left variable">name</span><span class="token operator">=</span>nginx <span class="token assign-left variable">state</span><span class="token operator">=</span>restarted      when: ansible_distribution_major_version <span class="token operator">==</span> “6”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---- hosts: websrvs  remote_user: root  tasks:     - name: <span class="token function">install</span> conf <span class="token function">file</span> to centos7      template: <span class="token assign-left variable">src</span><span class="token operator">=</span>nginx.conf.c7.j2 <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/nginx/nginx.conf      when: ansible_distribution_major_version <span class="token operator">==</span> <span class="token string">"7"</span>    - name: <span class="token function">install</span> conf <span class="token function">file</span> to centos6      template: <span class="token assign-left variable">src</span><span class="token operator">=</span>nginx.conf.c6.j2 <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/nginx/nginx.conf      when: ansible_distribution_major_version <span class="token operator">==</span> <span class="token string">"6"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-11-playbook-使用迭代-with-items"><a href="#3-11-playbook-使用迭代-with-items" class="headerlink" title="3.11 playbook 使用迭代 with_items"></a>3.11 playbook 使用迭代 with_items</h4><p>迭代：当有需要重复性执行的任务时，可以使用迭代机制 对迭代项的引用，固定变量名为”item“ 要在 task 中使用 with_items 给定要迭代的元素列表</p><p>列表元素格式：</p><ul><li>字符串</li><li>字典</li></ul><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---- hosts: websrvs  remote_user: root  tasks:    - name: <span class="token function">add</span> several <span class="token function">users</span>      user: <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token assign-left variable">state</span><span class="token operator">=</span>present <span class="token assign-left variable">groups</span><span class="token operator">=</span>wheel      with_items:        - testuser1        - testuser2<span class="token comment">#上面语句的功能等同于下面的语句</span>    - name: <span class="token function">add</span> user testuser1      user: <span class="token assign-left variable">name</span><span class="token operator">=</span>testuser1 <span class="token assign-left variable">state</span><span class="token operator">=</span>present <span class="token assign-left variable">groups</span><span class="token operator">=</span>wheel    - name: <span class="token function">add</span> user testuser2      user: <span class="token assign-left variable">name</span><span class="token operator">=</span>testuser2 <span class="token assign-left variable">state</span><span class="token operator">=</span>present <span class="token assign-left variable">groups</span><span class="token operator">=</span>wheel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---<span class="token comment">#remove mariadb server</span>- hosts: appsrvs:<span class="token operator">!</span><span class="token number">192.168</span>.38.8  remote_user: root  tasks:    - name: stop <span class="token function">service</span>      shell: /etc/init.d/mysqld stop    - name:  delete files and <span class="token function">dir</span>      file: <span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token assign-left variable">state</span><span class="token operator">=</span>absent      with_items:        - /usr/local/mysql        - /usr/local/mariadb-10.2.27-linux-x86_64        - /etc/init.d/mysqld        - /etc/profile.d/mysql.sh        - /etc/my.cnf        - /data/mysql    - name: delete user      user: <span class="token assign-left variable">name</span><span class="token operator">=</span>mysql <span class="token assign-left variable">state</span><span class="token operator">=</span>absent <span class="token assign-left variable">remove</span><span class="token operator">=</span>yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---- hosts：websrvs  remote_user: root  tasks    - name: <span class="token function">install</span> some packages      yum: <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token assign-left variable">state</span><span class="token operator">=</span>present      with_items:        - nginx        - memcached        - php-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---- hosts: websrvs  remote_user: root  tasks:    - name: copy <span class="token function">file</span>      copy: <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token assign-left variable">dest</span><span class="token operator">=</span>/tmp/<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      with_items:        - file1        - file2        - file3    - name: yum <span class="token function">install</span> httpd      yum: <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token assign-left variable">state</span><span class="token operator">=</span>present      with_items:        - apr        - apr-util        - httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>迭代嵌套子变量：</strong>在迭代中，还可以嵌套子变量，关联多个变量在一起使用</p><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---- hosts: websrvs  remote_user: root  tasks:    - name: <span class="token function">add</span> some <span class="token function">groups</span>      group: <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token assign-left variable">state</span><span class="token operator">=</span>present      with_items:        - nginx        - mysql        - apache    - name: <span class="token function">add</span> some <span class="token function">users</span>      user: <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item.name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token assign-left variable">group</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item.group <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token assign-left variable">state</span><span class="token operator">=</span>present      with_items:        - <span class="token punctuation">&#123;</span> name: <span class="token string">'nginx'</span>, group: <span class="token string">'nginx'</span> <span class="token punctuation">&#125;</span>        - <span class="token punctuation">&#123;</span> name: <span class="token string">'mysql'</span>, group: <span class="token string">'mysql'</span> <span class="token punctuation">&#125;</span>        - <span class="token punctuation">&#123;</span> name: <span class="token string">'apache'</span>, group: <span class="token string">'apache'</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> with_item2.yml---- hosts: websrvs  remote_user: root  tasks:    - name: <span class="token function">add</span> some <span class="token function">groups</span>      group: <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token assign-left variable">state</span><span class="token operator">=</span>present      with_items:        - g1        - g2        - g3    - name: <span class="token function">add</span> some <span class="token function">users</span>      user: <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item.name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token assign-left variable">group</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item.group <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token assign-left variable">home</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> item.home <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token assign-left variable">create_home</span><span class="token operator">=</span>yes <span class="token assign-left variable">state</span><span class="token operator">=</span>present      with_items:        - <span class="token punctuation">&#123;</span> name: <span class="token string">'user1'</span>, group: <span class="token string">'g1'</span>, home: <span class="token string">'/data/user1'</span> <span class="token punctuation">&#125;</span>        - <span class="token punctuation">&#123;</span> name: <span class="token string">'user2'</span>, group: <span class="token string">'g2'</span>, home: <span class="token string">'/data/user2'</span> <span class="token punctuation">&#125;</span>        - <span class="token punctuation">&#123;</span> name: <span class="token string">'user3'</span>, group: <span class="token string">'g3'</span>, home: <span class="token string">'/data/user3'</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-12-管理节点过多导致的超时问题解决方法"><a href="#3-12-管理节点过多导致的超时问题解决方法" class="headerlink" title="3.12 管理节点过多导致的超时问题解决方法"></a>3.12 管理节点过多导致的超时问题解决方法</h4><p>默认情况下，Ansible 将尝试并行管理 playbook 中所有的机器。对于滚动更新用例，可以使用 serial 关键字定义 Ansible 一次应管理多少主机，还可以将 serial 关键字指定为百分比，表示每次并行执行的主机数占总数的比例</p><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#vim test_serial.yml</span>---- hosts: all  serial: <span class="token number">2</span>  <span class="token comment">#每次只同时处理2个主机</span>  gather_facts: False  tasks:    - name: task one      comand: <span class="token function">hostname</span>    - name: task two      command: <span class="token function">hostname</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">- name: <span class="token builtin class-name">test</span> serail  hosts: all  serial: <span class="token string">"20%"</span>   <span class="token comment">#每次只同时处理20%的主机</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="四-、Roles-角色"><a href="#四-、Roles-角色" class="headerlink" title="四 、Roles 角色"></a>四 、Roles 角色</h3><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/20201027202522657.PNG"></p><p>角色是 ansible 自 1.2 版本引入的新特性，用于层次性、结构化地组织 playbook。roles 能够根据层次型结构自动装载变量文件、tasks 以及 handlers 等。要使用 roles 只需要在 playbook 中使用 include 指令即可。简单来讲，roles 就是通过分别将变量、文件、任务、模板及处理器放置于单独的目录中，并可以便捷地 include 它们的一种机制。角色一般用于基于主机构建服务的场景中，但也可以是用于构建守护进程等场景中</p><p>运维复杂的场景：建议使用 roles，代码复用度高</p><p>roles：多个角色的集合， 可以将多个的 role，分别放至 roles 目录下的独立子目录中 </p><p>roles&#x2F; </p><p>​mysql&#x2F; </p><p>​httpd&#x2F; </p><p>​nginx&#x2F; </p><p>​redis&#x2F;</p><h4 id="4-1-Ansible-Roles-目录编排"><a href="#4-1-Ansible-Roles-目录编排" class="headerlink" title="4.1 Ansible Roles 目录编排"></a>4.1 Ansible Roles 目录编排</h4><p>roles 目录结构如下所示</p><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/OIP-C.gazp9scc1C7r_HBIbM92ZgHaGT"></p><p>每个角色，以特定的层级目录结构进行组织</p><p><strong>roles 目录结构：</strong> </p><p>playbook.yml </p><p>roles&#x2F; </p><p>​project&#x2F; </p><p>​tasks&#x2F; </p><p>​files&#x2F; </p><p>​vars&#x2F;<br>templates&#x2F; </p><p>handlers&#x2F; </p><p>default&#x2F;<br>meta&#x2F;</p><p><strong>Roles 各目录作用</strong> </p><p>roles&#x2F;project&#x2F; : 项目名称, 有以下子目录</p><ul><li>files&#x2F; ：存放由 copy 或 script 模块等调用的文件</li><li>templates&#x2F;：template 模块查找所需要模板文件的目录</li><li>tasks&#x2F;：定义 task,role 的基本元素，至少应该包含一个名为 main.yml 的文件；其它的文件需要在此文件中通过 include 进行包含</li><li>handlers&#x2F;：至少应该包含一个名为 main.yml 的文件；其它的文件需要在此文件中通过 include 进行包含</li><li>vars&#x2F;：定义变量，至少应该包含一个名为 main.yml 的文件；其它的文件需要在此文件中通过 include 进行包含</li><li>meta&#x2F;：定义当前角色的特殊设定及其依赖关系, 至少应该包含一个名为 main.yml 的文件，其它文件需在此文件中通过 include 进行包含</li><li>default&#x2F;：设定默认变量时使用此目录中的 main.yml 文件，比 vars 的优先级低</li></ul><h4 id="4-2-创建-role"><a href="#4-2-创建-role" class="headerlink" title="4.2 创建 role"></a>4.2 创建 role</h4><p>创建 role 的步骤 (1) 创建以 roles 命名的目录 (2) 在 roles 目录中分别创建以各角色名称命名的目录，如 webservers 等 (3) 在每个角色命名的目录中分别创建 files、handlers、meta、tasks、templates 和 vars 目录；用不到的目录可以创建为空目录，也可以不创建 (4) 在 playbook 文件中，调用各角色</p><p>针对大型项目使用 Roles 进行编排 范例：roles 的目录结构</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx-role.ymlroles/└── nginx     ├── files     │    └── main.yml     ├── tasks     │    ├── groupadd.yml     │    ├── install.yml     │    ├── main.yml     │    ├── restart.yml     │    └── useradd.yml     └── vars          └── main.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-playbook-调用角色"><a href="#4-3-playbook-调用角色" class="headerlink" title="4.3 playbook 调用角色"></a>4.3 playbook 调用角色</h4><p><strong>调用角色方法 1：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---- hosts: websrvs  remote_user: root  roles:    - mysql    - memcached    - nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>调用角色方法 2：</strong></p><p>键 role 用于指定角色名称，后续的 k&#x2F;v 用于传递变量给角色</p><pre class="line-numbers language-none"><code class="language-none">---- hosts: all  remote_user: root  roles:    - mysql    - &#123; role: nginx, username: nginx &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>调用角色方法 3：</strong></p><p>还可基于条件测试实现角色调用</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> all  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">roles</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> nginx<span class="token punctuation">,</span> <span class="token key atrule">username</span><span class="token punctuation">:</span> nginx<span class="token punctuation">,</span> <span class="token key atrule">when</span><span class="token punctuation">:</span> ansible_distribution_major_version == ‘7’  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-roles-中-tags-使用"><a href="#4-4-roles-中-tags-使用" class="headerlink" title="4.4 roles 中 tags 使用"></a>4.4 roles 中 tags 使用</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#nginx-role.yml</span><span class="token punctuation">---</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> websrvs  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">roles</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> nginx <span class="token punctuation">,</span><span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'nginx'</span><span class="token punctuation">,</span> <span class="token string">'web'</span> <span class="token punctuation">]</span> <span class="token punctuation">,</span><span class="token key atrule">when</span><span class="token punctuation">:</span> ansible_distribution_major_version == "6“ <span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> httpd <span class="token punctuation">,</span><span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'httpd'</span><span class="token punctuation">,</span> <span class="token string">'web'</span> <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> mysql <span class="token punctuation">,</span><span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span> <span class="token string">'db'</span> <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">-</span> <span class="token punctuation">&#123;</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> mariadb <span class="token punctuation">,</span><span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'mariadb'</span><span class="token punctuation">,</span> <span class="token string">'db'</span> <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>ansible<span class="token punctuation">-</span>playbook <span class="token punctuation">-</span><span class="token punctuation">-</span>tags="nginx<span class="token punctuation">,</span>httpd<span class="token punctuation">,</span>mysql" nginx<span class="token punctuation">-</span>role.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-实战案例"><a href="#4-5-实战案例" class="headerlink" title="4.5 实战案例"></a>4.5 实战案例</h4><h5 id="4-5-1-案例-1：实现-httpd-角色"><a href="#4-5-1-案例-1：实现-httpd-角色" class="headerlink" title="4.5.1 案例 1：实现 httpd 角色"></a>4.5.1 案例 1：实现 httpd 角色</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#创建角色相关的目录</span>mkdir <span class="token punctuation">-</span>pv /data/ansible/roles/httpd/<span class="token punctuation">&#123;</span>tasks<span class="token punctuation">,</span>handlers<span class="token punctuation">,</span>files<span class="token punctuation">&#125;</span><span class="token comment">#创建角色相关的文件</span>cd /data/ansible/roles/httpd/vim tasks/main.yml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> group.yml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> user.yml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> install.yml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> config.yml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> index.yml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> service.ymlvim  tasks/user.yml<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create apache user  <span class="token key atrule">user</span><span class="token punctuation">:</span> name=apache system=yes shell=/sbin/nologin home=/var/www/ uid=80 group=apachevim  tasks/group.yml<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> create apache group  <span class="token key atrule">group</span><span class="token punctuation">:</span> name=apache system=yes gid=80vim tasks/install.yml<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install httpd package  <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=httpdvim tasks/config.yml<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config file  <span class="token key atrule">copy</span><span class="token punctuation">:</span> src=httpd.conf dest=/etc/httpd/conf/ backup=yes  <span class="token key atrule">notify</span><span class="token punctuation">:</span> restartvim tasks/index.yml<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> index.html  <span class="token key atrule">copy</span><span class="token punctuation">:</span> src=index.html dest=/var/www/html/vim tasks/service.yml<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> start service  <span class="token key atrule">service</span><span class="token punctuation">:</span> name=httpd state=started enabled=yesvim handlers/main.yml<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> restart  <span class="token key atrule">service</span><span class="token punctuation">:</span> name=httpd state=restarted<span class="token comment">#在files目录下准备两个文件</span>ls files/httpd.conf index.htmltree /data/ansible/roles/httpd//data/ansible/roles/httpd/├── files│   ├── httpd.conf│   └── index.html├── handlers│   └── main.yml└── tasks    ├── config.yml    ├── group.yml    ├── index.yml    ├── install.yml    ├── main.yml    ├── service.yml    └── user.yml3 directories<span class="token punctuation">,</span> 10 files<span class="token comment">#在playbook中调用角色，与role平级</span>vim  /data/ansible/role_httpd.yml<span class="token punctuation">---</span><span class="token comment"># httpd role</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> websrvs  <span class="token key atrule">remote_user</span><span class="token punctuation">:</span> root  <span class="token key atrule">roles</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> httpd<span class="token comment">#运行playbook</span>ansible<span class="token punctuation">-</span>playbook  /data/ansible/role_httpd.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-5-2-案例-2：实现-nginx-角色"><a href="#4-5-2-案例-2：实现-nginx-角色" class="headerlink" title="4.5.2 案例 2：实现 nginx 角色"></a>4.5.2 案例 2：实现 nginx 角色</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">mkdir <span class="token punctuation">-</span>pv  /data/ansible/roles/nginx/<span class="token punctuation">&#123;</span>tasks<span class="token punctuation">,</span>handlers<span class="token punctuation">,</span>templates<span class="token punctuation">,</span>vars<span class="token punctuation">&#125;</span><span class="token comment">#创建task文件</span>cd /data/ansible/roles/nginx/vim tasks/main.yml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> install.yml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> config.yml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> index.yml<span class="token punctuation">-</span> <span class="token key atrule">include</span><span class="token punctuation">:</span> service.ymlvim  tasks/install.yml<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install  <span class="token key atrule">yum</span><span class="token punctuation">:</span> name=nginxvim tasks/config.yml<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config file for centos7  <span class="token key atrule">template</span><span class="token punctuation">:</span> src=nginx7.conf.j2 dest=/etc/nginx/nginx.conf  <span class="token key atrule">when</span><span class="token punctuation">:</span> ansible_distribution_major_version=="7"  <span class="token key atrule">notify</span><span class="token punctuation">:</span> restart<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config file for centos8  <span class="token key atrule">template</span><span class="token punctuation">:</span> src=nginx8.conf.j2 dest=/etc/nginx/nginx.conf  <span class="token key atrule">when</span><span class="token punctuation">:</span> ansible_distribution_major_version=="8"  <span class="token key atrule">notify</span><span class="token punctuation">:</span> restartvim  tasks/index.yml<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> index.html  <span class="token key atrule">copy</span><span class="token punctuation">:</span> src=roles/httpd/files/index.html dest=/usr/share/nginx/html/vim tasks/service.yml<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> start service  <span class="token key atrule">service</span><span class="token punctuation">:</span> name=nginx state=started enabled=yes<span class="token comment">#创建handler文件</span>cat handlers/main.yml<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> restart  <span class="token key atrule">service</span><span class="token punctuation">:</span> name=nginx state=restarted<span class="token comment">#创建两个template文件</span>cat templates/nginx7.conf.j2<span class="token punctuation">...</span>省略<span class="token punctuation">...</span>user <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>user<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>;worker_processes <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>ansible_processor_vcpus+3<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>;   <span class="token comment">#修改此行</span>error_log /var/log/nginx/error.log;pid /run/nginx.pid;<span class="token punctuation">...</span>省略<span class="token punctuation">...</span>cat templates/nginx8.conf.j2<span class="token punctuation">...</span>省略<span class="token punctuation">...</span>user nginx;worker_processes <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>ansible_processor_vcpus<span class="token important">**3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>;  <span class="token comment">#修改此行</span>error_log /var/log/nginx/error.log;pid /run/nginx.pid;<span class="token punctuation">...</span>省略<span class="token punctuation">...</span><span class="token comment">#创建变量文件</span>vim vars/main.yml<span class="token key atrule">user</span><span class="token punctuation">:</span> daemon<span class="token comment">#目录结构如下</span>tree /data/ansible/roles/nginx//data/ansible/roles/nginx/├── handlers│   └── main.yml├── tasks│   ├── config.yml│   ├── file.yml│   ├── install.yml│   ├── main.yml│   └── service.yml├── templates│   ├── nginx7.conf.j2│   └── nginx8.conf.j2└── vars    └── main.yml4 directories<span class="token punctuation">,</span> 9 files<span class="token comment">#在playbook中调用角色</span>vim /data/ansible/role_nginx.yml<span class="token punctuation">---</span><span class="token comment">#nginx role</span><span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span> websrvs  <span class="token key atrule">roles</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> nginx<span class="token comment">#运行playbook</span>ansible<span class="token punctuation">-</span>playbook  /data/ansible/role_nginx.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-5-3-案例-3：实现-memcached-角色"><a href="#4-5-3-案例-3：实现-memcached-角色" class="headerlink" title="4.5.3 案例 3：实现 memcached 角色"></a>4.5.3 案例 3：实现 memcached 角色</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-pv</span>  /data/ansible/roles/memcached/<span class="token punctuation">&#123;</span>tasks,templates<span class="token punctuation">&#125;</span><span class="token builtin class-name">cd</span> /data/ansible/roles/memcached<span class="token function">vim</span> tasks/main.yml- include: install.yml- include: config.yml- include: service.yml<span class="token function">vim</span> tasks/install.yml- name: <span class="token function">install</span>  yum: <span class="token assign-left variable">name</span><span class="token operator">=</span>memcached<span class="token function">vim</span> tasks/config.yml- name: config <span class="token function">file</span>  template: <span class="token assign-left variable">src</span><span class="token operator">=</span>memcached.j2  <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/sysconfig/memcached<span class="token function">vim</span> tasks/service.yml- name: <span class="token function">service</span>  service: <span class="token assign-left variable">name</span><span class="token operator">=</span>memcached <span class="token assign-left variable">state</span><span class="token operator">=</span>started <span class="token assign-left variable">enabled</span><span class="token operator">=</span>yes<span class="token function">vim</span> templates/memcached.j2<span class="token assign-left variable">PORT</span><span class="token operator">=</span><span class="token string">"11211"</span><span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span><span class="token string">"memcached"</span><span class="token assign-left variable">MAXCONN</span><span class="token operator">=</span><span class="token string">"1024"</span><span class="token assign-left variable">CACHESIZE</span><span class="token operator">=</span><span class="token string">"&#123;&#123;ansible_memtotal_mb//4&#125;&#125;"</span><span class="token assign-left variable">OPTIONS</span><span class="token operator">=</span><span class="token string">""</span>tree /data/ansible/roles/memcached//data/ansible/roles/memcached/├── tasks│   ├── config.yml│   ├── install.yml│   ├── main.yml│   └── service.yml└── templates    └── memcached.j2<span class="token number">2</span> directories, <span class="token number">5</span> files<span class="token function">vim</span> /data/ansible/role_memcached.yml---- hosts: appsrvs  roles:    - role: memcachedansible-play /data/ansible/role_memcached.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-5-4-案例-4：实现-mysql-5-6-的角色"><a href="#4-5-4-案例-4：实现-mysql-5-6-的角色" class="headerlink" title="4.5.4 案例 4：实现 mysql 5.6 的角色"></a>4.5.4 案例 4：实现 mysql 5.6 的角色</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#cat /data/ansible/roles/mysql/files/my.cnf</span><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token assign-left variable">socket</span><span class="token operator">=</span>/tmp/mysql.sock<span class="token assign-left variable">user</span><span class="token operator">=</span>mysqlsymbolic-links<span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">datadir</span><span class="token operator">=</span>/data/mysql<span class="token assign-left variable">innodb_file_per_table</span><span class="token operator">=</span><span class="token number">1</span>log-binpid-file<span class="token operator">=</span>/data/mysql/mysqld.pid<span class="token punctuation">[</span>client<span class="token punctuation">]</span><span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">3306</span><span class="token assign-left variable">socket</span><span class="token operator">=</span>/tmp/mysql.sock<span class="token punctuation">[</span>mysqld_safe<span class="token punctuation">]</span>log-error<span class="token operator">=</span>/var/log/mysqld.log<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#cat /data/ansible/roles/mysql/files/secure_mysql.sh</span><span class="token comment">#!/bin/bash</span>/usr/local/mysql/bin/mysql_secure_installation <span class="token operator">&lt;&lt;</span><span class="token string">EOFymagedumageduyyyyEOF</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#chmod +x  /data/ansible/roles/mysql/files/secure_mysql.sh</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#ls /data/ansible/roles/mysql/files/</span>my.cnf  mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz  secure_mysql.sh<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#cat /data/ansible/roles/mysql/tasks/main.yml</span>- include: install.yml- include: group.yml- include: user.yml- include: unarchive.yml- include: link.yml- include: data.yml- include: config.yml- include: service.yml- include: path.yml- include: secure.yml<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#cat /data/ansible/roles/mysql/tasks/install.yml</span>- name: <span class="token function">install</span> packages  yum: <span class="token assign-left variable">name</span><span class="token operator">=</span>libaio,perl-Data-Dumper,perl-Getopt-Long<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#cat /data/ansible/roles/mysql/tasks/group.yml</span>- name: create mysql group  group: <span class="token assign-left variable">name</span><span class="token operator">=</span>mysql <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">306</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#cat /data/ansible/roles/mysql/tasks/user.yml</span>- name: create mysql user  user: <span class="token assign-left variable">name</span><span class="token operator">=</span>mysql <span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">306</span> <span class="token assign-left variable">group</span><span class="token operator">=</span>mysql <span class="token assign-left variable">shell</span><span class="token operator">=</span>/sbin/nologin <span class="token assign-left variable">system</span><span class="token operator">=</span>yes <span class="token assign-left variable">create_home</span><span class="token operator">=</span>no <span class="token assign-left variable">home</span><span class="token operator">=</span>/data/mysql<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#cat /data/ansible/roles/mysql/tasks/unarchive.yml</span>- name: copy <span class="token function">tar</span> to remote <span class="token function">host</span> and <span class="token function">file</span> mode  unarchive: <span class="token assign-left variable">src</span><span class="token operator">=</span>mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz <span class="token assign-left variable">dest</span><span class="token operator">=</span>/usr/local/ <span class="token assign-left variable">owner</span><span class="token operator">=</span>root <span class="token assign-left variable">group</span><span class="token operator">=</span>root<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#cat /data/ansible/roles/mysql/tasks/link.yml</span>- name: <span class="token function">mkdir</span> /usr/local/mysql  file: <span class="token assign-left variable">src</span><span class="token operator">=</span>/usr/local/mysql-5.6.46-linux-glibc2.12-x86_64 <span class="token assign-left variable">dest</span><span class="token operator">=</span>/usr/local/mysql <span class="token assign-left variable">state</span><span class="token operator">=</span>link<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#cat /data/ansible/roles/mysql/tasks/data.yml</span>- name: data <span class="token function">dir</span>  shell: <span class="token assign-left variable">chdir</span><span class="token operator">=</span>/usr/local/mysql/  ./scripts/mysql_install_db <span class="token parameter variable">--datadir</span><span class="token operator">=</span>/data/mysql <span class="token parameter variable">--user</span><span class="token operator">=</span>mysql<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#cat /data/ansible/roles/mysql/tasks/config.yml</span>- name: config my.cnf  copy: <span class="token assign-left variable">src</span><span class="token operator">=</span>my.cnf  <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/my.cnf<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#cat /data/ansible/roles/mysql/tasks/service.yml</span>- name: <span class="token function">service</span> script  shell: /bin/cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld<span class="token punctuation">;</span><span class="token function">chkconfig</span> <span class="token parameter variable">--add</span> mysqld<span class="token punctuation">;</span><span class="token function">chkconfig</span> mysqld on<span class="token punctuation">;</span>/etc/init.d/mysqld start<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#cat /data/ansible/roles/mysql/tasks/path.yml</span>- name: <span class="token environment constant">PATH</span> variable  copy: <span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token string">'PATH=/usr/local/mysql/bin:$PATH'</span> <span class="token assign-left variable">dest</span><span class="token operator">=</span>/etc/profile.d/mysql.sh<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#cat /data/ansible/roles/mysql/tasks/secure.yml</span>- name: secure script  script: secure_mysql.sh<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#tree /data/ansible/roles/mysql/</span>/data/ansible/roles/mysql/├── files│   ├── my.cnf│   ├── mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz│   └── secure_mysql.sh└── tasks    ├── config.yml    ├── data.yml    ├── group.yml    ├── install.yml    ├── link.yml    ├── main.yml    ├── path.yml    ├── secure.yml    ├── service.yml    ├── unarchive.yml    └── user.yml<span class="token number">2</span> directories, <span class="token number">14</span> files<span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#cat /data/ansible/mysql_roles.yml</span>- hosts: dbsrvs  remote_user: root  roles:    - <span class="token punctuation">&#123;</span>role: mysql,tags: <span class="token punctuation">[</span><span class="token string">"mysql"</span>,<span class="token string">"db"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>    - <span class="token punctuation">&#123;</span>role: nginx,tage: <span class="token punctuation">[</span><span class="token string">"nginx"</span>,<span class="token string">"web"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>root@ansible ~<span class="token punctuation">]</span><span class="token comment">#ansible-playbook -t mysql /data/ansible/mysql_roles.yml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-5-5-案例-5-：实现多角色的选择"><a href="#4-5-5-案例-5-：实现多角色的选择" class="headerlink" title="4.5.5 案例 5 ：实现多角色的选择"></a>4.5.5 案例 5 ：实现多角色的选择</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /data/ansible/role_httpd_nginx.yml---- hosts: websrvs  roles:    - <span class="token punctuation">&#123;</span>role: httpd,tags: <span class="token punctuation">[</span>httpd,web<span class="token punctuation">]</span>, when: <span class="token assign-left variable">ansible_distribution_major_version</span><span class="token operator">==</span><span class="token string">"7"</span> <span class="token punctuation">&#125;</span>    - <span class="token punctuation">&#123;</span>role: nginx,tags: <span class="token punctuation">[</span>nginx,web<span class="token punctuation">]</span>, when: <span class="token assign-left variable">ansible_distribution_major_version</span><span class="token operator">==</span><span class="token string">"8"</span> <span class="token punctuation">&#125;</span>ansible-playbook <span class="token parameter variable">-t</span> nginx /data/ansible/role_httpd_nginx.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Ansible </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux相关scsi命令</title>
      <link href="/2023/02/12/linux/linux-xiang-guan-scsi-ming-ling/"/>
      <url>/2023/02/12/linux/linux-xiang-guan-scsi-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>由于前段时间存储扩容，对存储操作较多，下面记录了常用的操作；</p><p><strong>lsscsi</strong> <strong>命令：显示 scsi</strong> <strong>设备信息</strong></p><p>#lsscsi</p><pre class="line-numbers language-none"><code class="language-none">[0:0:0:2]    disk    IBM      1726-4xx  FAStT  0617  &#x2F;dev&#x2F;sdb[0:0:0:3]    disk    IBM      1726-4xx  FAStT  0617  &#x2F;dev&#x2F;sdc[0:0:0:4]    disk    IBM      1726-4xx  FAStT  0617  &#x2F;dev&#x2F;sdd[0:0:0:5]    disk    IBM      1726-4xx  FAStT  0617  &#x2F;dev&#x2F;sde<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解释：[H(hba):C(hba_channel):T(target):L(LUN ID)]</p><p><strong>scsi_id</strong> <strong>命令：查询 scsi</strong> <strong>设备 id</strong> <strong>号；</strong></p><p>#scsi_id –g –u –s &#x2F;dev&#x2F;sda</p><pre class="line-numbers language-none"><code class="language-none">3600a0b80000b174b000000d63efc5c8c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><p>#&#x2F;lib&#x2F;udev&#x2F;scsi_id –page&#x3D;0x83 –whitelisted –device&#x3D;&#x2F;dev&#x2F;sda</p><pre class="line-numbers language-none"><code class="language-none">3600a0b80000b174b000000d63efc5c8c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>HBA WWWN:</strong>  <code>cat /sys/class/fc_host/host*/node_name</code></p><p><strong>DISK wwwn:</strong>  <code>ls -l /dev/disk/by_id|grep -v part</code></p><p><strong>手动删除 path:</strong></p><p>  先 offlne</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> offline <span class="token operator">></span>/sys/block/device-name/device/state<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 然后 remove</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span>/sys/block/device-name/device/delete<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>手动增加 path:</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"c t l"</span> <span class="token operator">></span> /sys/class/scsi_host/hostn/scan<span class="token builtin class-name">echo</span> “scsi add-single-device <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>” <span class="token operator">></span> /proc/scsi/scsi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux-scsi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible入门</title>
      <link href="/2023/02/12/gong-zuo-bi-ji/aix-xi-tong-ming-ling/"/>
      <url>/2023/02/12/gong-zuo-bi-ji/aix-xi-tong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h4 id="1、启停服务器"><a href="#1、启停服务器" class="headerlink" title="1、启停服务器"></a><strong>1、启停服务器</strong></h4><p>重启：<br><code>shutdown -Fr</code><br>关闭：<br><code>shutdown -F</code></p><h4 id="2、新增用户"><a href="#2、新增用户" class="headerlink" title="2、新增用户"></a><strong>2、新增用户</strong></h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">mkgroup <span class="token operator">-</span><span class="token string">'A'</span> id=<span class="token string">'3001'</span> osquerymkuser id=<span class="token string">'3001'</span> admin=<span class="token string">'false'</span> pgrp=<span class="token string">'osquery'</span> home=<span class="token string">'/home/osquery'</span> osquery<span class="token function">echo</span> osquery:Query168 <span class="token punctuation">|</span> chpasswd <span class="token operator">-</span>c <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3、修改主机名"><a href="#3、修改主机名" class="headerlink" title="3、修改主机名"></a><strong>3、修改主机名</strong></h4><p>修改主机名暂时生效：<br><code>hostname YZH-SC-GRWY-DB1</code><br>永久生效<br><code>smit hostname</code></p><h4 id="4、解压缩"><a href="#4、解压缩" class="headerlink" title="4、解压缩"></a><strong>4、解压缩</strong></h4><p>压缩<br><code>tar -cvf new.tar new</code><br><code>tar -cvf new.tar /new</code> 绝对路径压缩，解压后，直接绝对路径解压。<br><code>tar -cvf /app/nc63/nc63_20140217.tar  -X /app/nc63/exclude   /app/nc63</code><br>exclude里的内容是你要排除的目录。比如要排除&#x2F;app&#x2F;nc63&#x2F;index这个目录，在exclude文件里添加&#x2F;app&#x2F;nc63&#x2F;index。</p><p>解压</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gunzip <span class="token parameter variable">-df</span> <span class="token number">7.0</span>.0.13-WS-UPDI-AixPPC64.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> <span class="token number">7.0</span>.0.13-WS-UPDI-AixPPC64.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5、查看网络信息"><a href="#5、查看网络信息" class="headerlink" title="5、查看网络信息"></a><strong>5、查看网络信息</strong></h4><p><code>netstat -rn</code> 查看路由情况<br><code>netstat -ni </code>查看网口，对应IP，对应mac地址。<br><code>smit route</code> 添加路由信息，可以在线添加</p><h4 id="6、查看机器信息"><a href="#6、查看机器信息" class="headerlink" title="6、查看机器信息"></a><strong>6、查看机器信息</strong></h4><p>查看aix硬件信息：<br><code>prtconf |more </code><br>序列号：<br><code>prtconf |grep &quot;Machine Serial Number&quot;</code><br>查看机器型号：<br><code>prtconf |grep &quot;System Model&quot;</code></p><p>上面两个写在一起：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">YZHCM3DB/<span class="token comment">#prtconf | egrep "Machine|^System"</span>System Model: IBM,8202-E4DMachine Serial Number: 849663V<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>CPU个数：<br><code>lsdev -Cc processor</code></p><h4 id="7、hdisk相关操作"><a href="#7、hdisk相关操作" class="headerlink" title="7、hdisk相关操作"></a><strong>7、hdisk相关操作</strong></h4><p>设置pv的id号<br><code>chdev -l hdisk6 -a pv=yes</code><br>查看磁盘详细信息</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">lscfg <span class="token operator">-</span>vpl hdisk6 lsattr <span class="token operator">-</span>El hdisk6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看网卡MAC地址<br><code>lscfg -vpl en* </code><br>查看磁盘大小<br><code>bootinfo -s hdisk6</code></p><h4 id="8、增加空间"><a href="#8、增加空间" class="headerlink" title="8、增加空间"></a><strong>8、增加空间</strong></h4><p>只针对本地文件系统。<br><code>chfs -a size=+2G /home</code></p><h4 id="9、操作系统基本信息"><a href="#9、操作系统基本信息" class="headerlink" title="9、操作系统基本信息"></a><strong>9、操作系统基本信息</strong></h4><p>查看系统启动项<br><code>bootlist -m normal -o</code></p><p>添加一个启动项</p><p><code>bosboot -ad  /dev/hdisk1</code></p><p>查看操作系统位数<br><code>bootinfo -K</code></p><p>【vi整体替换字符串】<br>文件中某个字符集体替换，old为你要替换的字符串，new为你要替换成的字符串<br><strong>vi test.sh</strong></p><pre class="line-numbers language-none"><code class="language-none">:1,$s&#x2F;old&#x2F;new&#x2F;g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>【pv、vg、lvm、fs操作】<br><code>smit vg </code>可以添加，删除一个vg 添加删除pv盘，<br><code>smit cl_vg</code> 如果HA集群，则加cl_ ，后面的命令也是一样需要增加cl。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">smit lvm smit cl_lvmsmit fssmit cl_fs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其它一些常见命令</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">lsvg  <span class="token comment"># 显示所有vg</span>lspv  <span class="token comment"># 显示所有pv</span>varyoffvg vgname  <span class="token comment"># 给一个vgvaryoff掉</span>varyonvg vgname  <span class="token comment"># 给一个vg varyon上</span>lvlstmajor  <span class="token comment"># 查看没有使用的marjor number</span><span class="token function">ls</span> <span class="token operator">-</span>al <span class="token operator">/</span>dev/sharevg  <span class="token comment"># 查看sharevg的majornumber</span>lslv lvname  <span class="token comment"># 查看一个lv的详细信息。</span>lsvg sharevg  <span class="token comment"># 查看sharevg详细信息</span>lsvg <span class="token operator">-</span>p edp3vg  <span class="token comment"># 查看vg的pv空间使用情况。</span>lsvg <span class="token operator">-</span>l rootvg  <span class="token comment"># 可以查看rootvg的所有lvm信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10、VG信息查看"><a href="#10、VG信息查看" class="headerlink" title="10、VG信息查看"></a><strong>10、VG信息查看</strong></h4><p>HA集群中，rootvg、datavg通常为本地磁盘，涉及到sharexxvg的，通常都是HA双机的共享vg。</p><p>vg类型：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">Add an Original Volume <span class="token function">Group</span>Add a Big Volume <span class="token function">Group</span>Add a Scalable Volume <span class="token function">Group</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不同类型的vg 磁盘属性信息占用的pp数量不一样  <code>Scalable &gt; Big &gt; Original</code><br>正常建立vg，选择Big类型就可以</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">VOLUME <span class="token function">GROUP</span>:       rootvg                   VG IDENTIFIER:  00f91d9e00004c0000000169a6804cd3VG STATE:           active                   PP SIZE:        512 megabyte<span class="token punctuation">(</span>s<span class="token punctuation">)</span>VG PERMISSION:      read/<span class="token function">write</span>               TOTAL PPs:      1114 <span class="token punctuation">(</span>570368 megabytes<span class="token punctuation">)</span>MAX LVs:            256                      FREE PPs:       597 <span class="token punctuation">(</span>305664 megabytes<span class="token punctuation">)</span>LVs:                16                       USED PPs:       517 <span class="token punctuation">(</span>264704 megabytes<span class="token punctuation">)</span>OPEN LVs:           15                       QUORUM:         1 <span class="token punctuation">(</span>Disabled<span class="token punctuation">)</span>TOTAL PVs:          2                        VG DESCRIPTORS: 3STALE PVs:          0                        STALE PPs:      0ACTIVE PVs:         2                        AUTO ON:        noMAX PPs per VG:     32512                                     MAX PPs per PV:     1016                     MAX PVs:        32LTG size <span class="token punctuation">(</span>Dynamic<span class="token punctuation">)</span>: 256 kilobyte<span class="token punctuation">(</span>s<span class="token punctuation">)</span>          AUTO SYNC:      noHOT SPARE:          no                       BB POLICY:      relocatable PV RESTRICTION:     none                     INFINITE RETRY: noDISK BLOCK SIZE:    512                      CRITICAL VG:    noFS SYNC OPTION:     no                                        rootvg:LV NAME             <span class="token function">TYPE</span>       LPs     PPs     PVs  LV STATE      <span class="token function">MOUNT</span> POINTwaslv               jfs2       20      20      1    open/syncd    <span class="token operator">/</span>wasissdblv             jfs2       200     200     1    open/syncd    <span class="token operator">/</span>issdbdb2loglv            jfs2       40      40      1    open/syncd    <span class="token operator">/</span>db2log <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11、修复目录"><a href="#11、修复目录" class="headerlink" title="11、修复目录"></a><strong>11、修复目录</strong></h4><p><code>fuser -kxuc /aaa</code>  目录 杀掉所有使用到&#x2F;aaa的目录 进程。<br><code>umount /aaa</code> 卸载一下<br><code>fsck /aaa</code> 修复该目录。</p><h4 id="12、查看某个服务"><a href="#12、查看某个服务" class="headerlink" title="12、查看某个服务"></a><strong>12、查看某个服务</strong></h4><p>l<code>ssrc -s sshd </code>查看sshd服务<br>启停</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">stopsrc <span class="token operator">-</span>s sshdstartsrc <span class="token operator">-</span>s sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="13、删除当前用户下所有进程"><a href="#13、删除当前用户下所有进程" class="headerlink" title="13、删除当前用户下所有进程"></a><strong>13、删除当前用户下所有进程</strong></h4><p>例如was<br><code>su - was</code><br>当前用户下  注意：一定是当前用户<br><code>kill -9 -1</code></p><h4 id="14、删除网卡及其它"><a href="#14、删除网卡及其它" class="headerlink" title="14、删除网卡及其它"></a><strong>14、删除网卡及其它</strong></h4><p><code>smit  inet</code> 删除一个tcpip，选择需要删除的网卡。<br><code>cfgmgr </code>重新扫描网卡</p><p>【其他系统命令】<br>格式化磁盘<br><code>dd if=/dev/zero of=/dev/hdisk3  bs=1M count=2000</code><br><code>ls -lrt</code>  按时间排序<br><code>ls -lS </code>按文件大小排序</p><p>mount的时候出现 </p><pre class="line-numbers language-none"><code class="language-none">Connot mount guarded filesystem.The filesystem is potentially mounted on another node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以通过<br><code>mount -o noguard  xxx</code> 对文件系统进行<code>mount</code></p><h4 id="15、更换AIX本地镜像硬盘"><a href="#15、更换AIX本地镜像硬盘" class="headerlink" title="15、更换AIX本地镜像硬盘"></a><strong>15、更换AIX本地镜像硬盘</strong></h4><p>以rootvg为例，如需要更换rootvg中的hdisk1硬盘，以下操作均用root用户进行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. 去除rootvg的镜像<span class="token punctuation">(</span>均用root用户<span class="token punctuation">)</span>：unmirrorvg rootvg hdisk1<span class="token number">2</span>. 把磁盘在rootvg卷组剔除：reducevg rootvg hdisk1<span class="token number">3</span>. 把磁盘删除：rmdev –Rdl hdisk1<span class="token number">4</span>. 拔掉故障磁盘，并插入新磁盘<span class="token number">5</span>. 扫描硬件变动情况，查找磁盘：cfgmgr<span class="token number">6</span>. 把hdisk0加入到rootvg：extendvg rootvg hdisk1,chvg <span class="token parameter variable">-Qn</span> rootvg<span class="token number">7</span>. 做rootvg镜像，mirrorvg <span class="token parameter variable">-S</span> rootvg<span class="token number">8</span>. 添加启动信息boot image到新加磁盘hdisk0，bosboot –ad /dev/hdisk1<span class="token number">9</span>. 修改启动顺序：bootlist –m normal hdisk0 hdisk1<span class="token number">10</span>. 检查启动顺序：bootlist <span class="token parameter variable">-m</span> normal <span class="token parameter variable">-o</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="16、xmanager图形化界面打不开"><a href="#16、xmanager图形化界面打不开" class="headerlink" title="16、xmanager图形化界面打不开"></a><strong>16、xmanager图形化界面打不开</strong></h4><p>安装X11<br>lslpp -l|grep X11|wc -l 142 个表示安装全了。如果没有，安装一下。<br>找一个对应操作系统的安装介质，在ppc中smit installp 选择dt这个包，回车安装即可。<br>执行&#x2F;etc&#x2F;rc.dt &amp;完成即可。<br>修改配置信息 </p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token operator">/</span>etc/ssh/ssh_configForwardX11 yes <span class="token operator">/</span>etc/ssh/sshd_configX11Forwarding yes <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>重启sshd</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">stopsrc <span class="token operator">-</span>s sshdstartsrc <span class="token operator">-</span>s sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后用xmanage 或者xstart连接。<br>如果出现 <strong>X11TransSocketINETConnect() can’t get address for localhost</strong> 则<br>在<code> /etc/hosts</code>中把localhost加上 </p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1 loopback localhost # loopback (lo0) name&#x2F;address ::1 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="17、消除操作系统亮灯详细步骤"><a href="#17、消除操作系统亮灯详细步骤" class="headerlink" title="17、消除操作系统亮灯详细步骤"></a><strong>17、消除操作系统亮灯详细步骤</strong></h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">1<span class="token punctuation">.</span>以root用户身份登录进入系统； 2<span class="token punctuation">.</span>在命令行输入“diag”命令，进入下一级菜单<span class="token punctuation">;</span> 3<span class="token punctuation">.</span>选择<span class="token string">"Task Selection(Diagnostics,Advanced Diagnostics,Service Aids,etc.)"</span>进入下一级菜单<span class="token punctuation">;</span> 4<span class="token punctuation">.</span>回车选择 Identify and Attention Indicators5<span class="token punctuation">.</span>回车选择 <span class="token string">"Set System Attention Indicator to NORMAL"</span>，前面出现加号 6<span class="token punctuation">.</span>按F7或者ESC+7 提交，告警灯应该可以消除 7<span class="token punctuation">.</span>执行完毕退出诊断<span class="token punctuation">,</span>新出现的界面最上面会出现“REPAIR ACTION COMPLETED”的字样，报警灯将熄灭<span class="token punctuation">,</span>恢复正常<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="18、小机硬盘报修收集snap日志"><a href="#18、小机硬盘报修收集snap日志" class="headerlink" title="18、小机硬盘报修收集snap日志"></a><strong>18、小机硬盘报修收集snap日志</strong></h4><ol><li><code>snap -r </code><br>A)如果以前未做过snap,系统会报错说明没有可清理的内容,显示<strong>“nothing to clean up”</strong><br>B)如果以前做过snap，显示Do you want me to remove these directories (y&#x2F;n)?回答<strong>“y”</strong></li><li><code> snap -gc</code><br>完成后,通过ftp取得**&#x2F;tmp&#x2F;ibmsupt&#x2F;snap.pax.*** 文件 <strong>(snap.pax.Z</strong> 或者<strong>snap.tar.Z</strong>)</li></ol><h4 id="19、AIX分析IO高"><a href="#19、AIX分析IO高" class="headerlink" title="19、AIX分析IO高"></a><strong>19、AIX分析IO高</strong></h4><p>如果topas中看到系统的IO资源很高，可以利用iostat命令确认哪个文件系统io高。<br><code>iostat -F 2 </code></p><h4 id="20、小机切换VG信息不同步问题处理–在线"><a href="#20、小机切换VG信息不同步问题处理–在线" class="headerlink" title="20、小机切换VG信息不同步问题处理–在线"></a><strong>20、小机切换VG信息不同步问题处理–在线</strong></h4><p>在小机HA切换过程中，切换至备机出现备机的vg信息与主机信息不一致，则稳妥的操作步骤：<br>1、将备机的HA给停掉，smit clstop ，选择bring resource offline选项。<br>2、在主机这边将vg信息备份</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token operator">/</span>usr/lib/objrepos<span class="token operator">/</span>usr/share/lib/objrepos<span class="token operator">/</span>etc/objrepos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、启动主机的HA<br>4、将vg varyoff掉<br><code>varyoffvg  sharevg</code><br>5、主机这边vg以 -b -u模式varyon<br><code>varyonvg -b -u sharevg</code><br>6、备机操作 importvg信息，其中hdisk3是sharevg中的一块盘<br><code>importvg -L sharevg hdisk3</code><br>7、主机这边正常varyon。<br><code>varyonvg sharevg</code><br>8、信息同步完成，重新切换一下即可。</p><h4 id="21、小机切换VG信息不同步问题处理–离线"><a href="#21、小机切换VG信息不同步问题处理–离线" class="headerlink" title="21、小机切换VG信息不同步问题处理–离线"></a><strong>21、小机切换VG信息不同步问题处理–离线</strong></h4><p>1、将两个节点的HA服务全部停止</p><p>2、检查两个节点卷组信息</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">CMHOUDU_P720_APP：lspv <span class="token punctuation">|</span>grep shareapp10vg <span class="token punctuation">|</span>wc <span class="token operator">-</span>lCMHOUDU_P720_DB： lspv <span class="token punctuation">|</span>grep shareapp10vg <span class="token punctuation">|</span>wc <span class="token operator">-</span>l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、确认两个节点上磁盘PVID一致性<br>    <code>lspv |grep shareapp10vg</code></p><p>4、在DB节点上：<br>重新导入卷组： <code>SHAREAPP10VG </code></p><p><code>IMPORTVG -Y SHAREAPP10VG HDDISKxx</code> ( 指定一块磁盘，根据实际情况）     </p><p>5、再次检查卷组信息：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">CMHOUDU_P720_APP：lspv <span class="token punctuation">|</span>grep shareapp10vg <span class="token punctuation">|</span>wc <span class="token operator">-</span>lCMHOUDU_P720_DB：lspv <span class="token punctuation">|</span>grep shareapp10vg <span class="token punctuation">|</span>wc <span class="token operator">-</span>l lspv <span class="token punctuation">|</span>grep shareapp10vg lspv <span class="token punctuation">|</span>grep shareapp10vg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、在DB节点上去激活卷组：<br><code>VARYOFFVG SHAREAPPP10VG </code></p><p>7、在两个节点上启动HA服务。</p><h4 id="22、AIX系统集成标准配置"><a href="#22、AIX系统集成标准配置" class="headerlink" title="22、AIX系统集成标准配置"></a><strong>22、AIX系统集成标准配置</strong></h4><p>1、pageingspace设置为16G，一个rootvg的pageingspace 8G，一个datavg的pageingspace 8G<br>lsps -a  查看所有，如果只有rootvg的hd6，请新增加一个<br>smit pgsp 根据需求增加。<br>2、<code>1smitty chgsys,Maximum number of PROCESSES allowed per user改为2000</code><br>3、vi &#x2F;etc&#x2F;security&#x2F;limits修改default:</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">fsize = <span class="token operator">-</span>1core = <span class="token operator">-</span>1cpu = <span class="token operator">-</span>1<span class="token keyword">data</span> = <span class="token operator">-</span>1rss = <span class="token operator">-</span>1stack = <span class="token operator">-</span>1stack_hard = <span class="token operator">-</span>1nofiles = <span class="token operator">-</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、改时区smitty chtz_date,Change Time Zone Using System Defined Values设置为aisa&#x2F;shanghai<br>5、将lg_dumplv改为16G。&#x2F;usr&#x2F;sbin&#x2F;extendlv lg_dumplv 120(120为需要增加的PP数量)<br>6、修改crontab允许的作业数。vi &#x2F;var&#x2F;adm&#x2F;cron&#x2F;queuedefs，在周后一行添加c.200j2n60w<br>7、安装中文包</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">smitty lang  Add Additional Language Environments  CULTURAL convention to install选择IBM-eucCN Chinese <span class="token punctuation">(</span>Simplified EUC<span class="token punctuation">)</span> <span class="token namespace">[zh_CN]</span>、UTF-8 Chinese                                            <span class="token punctuation">(</span>Simplified UTF<span class="token punctuation">)</span> <span class="token namespace">[ZH_CN]</span>、GB18030 S-Chinese <span class="token punctuation">(</span>GB18030<span class="token punctuation">)</span> <span class="token namespace">[Zh_CN]</span>  LANGUAGE translation to install  选择IBM-eucCN Chinese <span class="token punctuation">(</span>Simplified EUC<span class="token punctuation">)</span> <span class="token namespace">[zh_CN]</span>、UTF-8 Chinese                                             <span class="token punctuation">(</span>Simplified UTF<span class="token punctuation">)</span> <span class="token namespace">[ZH_CN]</span>、GB18030 S-Chinese <span class="token punctuation">(</span>GB18030<span class="token punctuation">)</span> <span class="token namespace">[Zh_CN]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8、安装lsof<br>9、安装openssh和openssl<br>10、停止ftp和telnet服务。stopsrc -t ftp,stopsrc -t telnet<br>11、安装AIX必要的补丁包：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">bos<span class="token punctuation">.</span>adt bos<span class="token punctuation">.</span>acct bos<span class="token punctuation">.</span>alt_disk_installbos<span class="token punctuation">.</span>cifs_fs bos<span class="token punctuation">.</span>content_list bos<span class="token punctuation">.</span>compatbos<span class="token punctuation">.</span><span class="token keyword">data</span> bos<span class="token punctuation">.</span>dlc  bos<span class="token punctuation">.</span>dosutil        bos<span class="token punctuation">.</span>lrn        bos<span class="token punctuation">.</span>mh      bos<span class="token punctuation">.</span>net        bos<span class="token punctuation">.</span>perf  bos<span class="token punctuation">.</span>sysmgt    bos<span class="token punctuation">.</span>rte      X11<span class="token punctuation">.</span>dt X11<span class="token punctuation">.</span>compat perl<span class="token punctuation">.</span>rte   perfagent<span class="token punctuation">.</span>tools  rsct<span class="token punctuation">.</span>basic   rsct<span class="token punctuation">.</span>compat<span class="token punctuation">.</span>basic  rsct<span class="token punctuation">.</span>compat<span class="token punctuation">.</span>clients  rsct<span class="token punctuation">.</span>opt<span class="token punctuation">.</span>storagerm                openssh<span class="token punctuation">.</span>base        openssl<span class="token punctuation">.</span>base        openssl<span class="token punctuation">.</span>license        openssl<span class="token punctuation">.</span>man<span class="token punctuation">.</span>en_US    openssh<span class="token punctuation">.</span>man<span class="token punctuation">.</span>en_US    bos<span class="token punctuation">.</span>ahafs            bos<span class="token punctuation">.</span>clvm<span class="token punctuation">.</span>enh    bos<span class="token punctuation">.</span>cluster       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将对应的操作系统iso文件放置服务器例如&#x2F;backup&#x2F;soft目录下。iso文件在11.156.178.8上 D:\APP目录下，<br>挂载iso文件  loopmount在AIX6.1以后的版本才有。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">cd <span class="token operator">/</span>backup/softloopmount <span class="token operator">-</span>i AIX7104SP3-1<span class="token punctuation">.</span>iso <span class="token operator">-</span>o <span class="token string">"-V cdrfs -o ro"</span> <span class="token operator">-</span>m <span class="token operator">/</span>mnt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>df -g 可以查看mnt文件系统了。<br>cd &#x2F;mnt&#x2F;installp&#x2F;ppc<br>smit installp  选择当前目录，选择你要安装的补丁包，有些包可能安装过，有些包可能安装了一部分，<br>卸载执行<br><code>loopumount -i AIX7104SP3-1.iso -m /mnt</code></p><h4 id="23、根据端口查看进程ID号"><a href="#23、根据端口查看进程ID号" class="headerlink" title="23、根据端口查看进程ID号"></a><strong>23、根据端口查看进程ID号</strong></h4><p>AIX:<br>root用户执行<br>netstat -Aan|grep 9010<br>查看占用端口的sock号，第一列。<br>rmsock  第一列 tcpcb    （tcp是这个）<br>rmsock  第一列 inpcb    （udp是这个）<br>可以看到进程ID号。</p><p>Linux:<br>netstat -lnp|grep 80</p><h4 id="24、HA双击切换演练"><a href="#24、HA双击切换演练" class="headerlink" title="24、HA双击切换演练"></a><strong>24、HA双击切换演练</strong></h4><p>HA主备&#x2F;HA互备<br>查看双机状态：<br>lssrc -ls clstrmgrES<br>以下状态为正常Current state: ST_STABLE</p><p>停掉本机HA<br>smit cl_stop<br>选择停止的节点，例如：dbnode， （在当前机器上执行，默认选择当前节点，不用选择）<br>BROADCAST 选择true，<br>Select An Action on Resource Groups 选择Move Resource Groups。<br>查看切换日志：<br>tail -f &#x2F;var&#x2F;hacmp&#x2F;log&#x2F;hacmp.out<br>lssrc -ls clstrmgrES 查看状态为ST_INIT<br>在B机可以看到所有资源信息，以及启动的应用程序<br>应用程序脚本在&#x2F;etc&#x2F;hascripts 下，或者&#x2F;etc&#x2F;hascript</p><p>执行# smit cl_start<br>选择需要启动的节点。（在当前机器上执行，默认选择当前节点，不用选择）<br>BROADCAST message at stargup 选择true<br>Startup Cluster Information Daemon选择true<br>执行大约10分钟。<br>lssrc -ls clstrmgrES 查看状态为ST_STABLE</p><h4 id="25、HA相关信息查看"><a href="#25、HA相关信息查看" class="headerlink" title="25、HA相关信息查看"></a><strong>25、HA相关信息查看</strong></h4><p>查看资源组信息</p><pre class="line-numbers language-none"><code class="language-none">root@CMAPP_P55A_MAIN:&#x2F;&gt; &#x2F;usr&#x2F;es&#x2F;sbin&#x2F;cluster&#x2F;utilities&#x2F;clRGinfoGroup Name     State                        Node            cmapp_res     ONLINE                       node1                         OFFLINE                      node2  cmdb_res       ONLINE                       node2                         OFFLINE                      node1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看节点定义的资源组信息</p><pre class="line-numbers language-none"><code class="language-none">CMCONSOLE_P55A_STBY&#x2F;#&#x2F;usr&#x2F;es&#x2F;sbin&#x2F;cluster&#x2F;utilities&#x2F;clshowresResource Group Name                                 cmconsole_res Participating Node Name(s)                          node1 node2 Startup Policy                                      Online Using Distribution Policy Fallover Policy                                     Fallover To Next Priority Node In The List Fallback Policy                                     Never Fallback Site Relationship                                   ignore Dynamic Node Priority                               Service IP Label                                    cmconsole_svr Filesystems                                         ALL Filesystems Consistency Check                       fsckFilesystems Recovery Method                         sequentialFilesystems&#x2F;Directories to be exported (NFSv2&#x2F;NFSv3)Filesystems&#x2F;Directories to be exported (NFSv4)      Filesystems to be NFS mounted                       Network For NFS Mount                               Filesystem&#x2F;Directory for NFSv4 Stable Storage       Volume Groups                                       dmvg Concurrent Volume Groups                            Use forced varyon for volume groups, if necessary   false Disks                                               GMVG Replicated Resources                           GMD Replicated Resources                            PPRC Replicated Resources                           ERCMF Replicated Resources                          SVC PPRC Replicated Resources                       Connections Services                                Fast Connect Services                               Shared Tape Resources                               Application Servers                                 cmconsole_app Highly Available Communication Links                Primary Workload Manager Class                      Secondary Workload Manager Class                    Delayed Fallback Timer                              Miscellaneous Data                                  Automatically Import Volume Groups                  false Inactive Takeover                                   SSA Disk Fencing                                    false Filesystems mounted before IP configured            falseWPAR Name                                           Run Time Parameters:Node Name                                           node1Debug Level                                         high Format for hacmp.out                                Standard Node Name                                           node2Debug Level                                         high Format for hacmp.out                                Standard<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列出集群的拓朴信息</p><pre class="line-numbers language-none"><code class="language-none">CMCONSOLE_P55A_STBY&#x2F;#&#x2F;usr&#x2F;es&#x2F;sbin&#x2F;cluster&#x2F;utilities&#x2F;cltopinfo Cluster Name: cmconsole_clusterCluster Connection Authentication Mode: StandardCluster Message Authentication Mode: NoneCluster Message Encryption: NoneUse Persistent Labels for Communication: NoThere are 2 node(s) and 2 network(s) definedNODE node1:        Network net_ether_01                cmconsole_svr   11.156.33.105                node1_boot1     11.156.33.106                node1_boot2     1.1.33.105        Network net_rs232_01                node1_tty       &#x2F;dev&#x2F;tty0NODE node2:        Network net_ether_01                cmconsole_svr   11.156.33.105                node2_boot1     11.156.33.108                node2_boot2     1.1.33.107        Network net_rs232_01                node2_tty       &#x2F;dev&#x2F;tty0Resource Group cmconsole_res        Startup Policy   Online Using Distribution Policy        Fallover Policy  Fallover To Next Priority Node In The List        Fallback Policy  Never Fallback        Participating Nodes      node1 node2        Service IP Label                 cmconsole_svrTotal Heartbeats Missed:        0Cluster Topology Start Time:    10&#x2F;16&#x2F;2019 23:16:46<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列出每个资源的集群资源设置</p><pre class="line-numbers language-none"><code class="language-none">CMCONSOLE_P55A_STBY&#x2F;#&#x2F;usr&#x2F;es&#x2F;sbin&#x2F;cluster&#x2F;utilities&#x2F;cllsresAPPLICATIONS&#x3D;&quot;cmconsole_app&quot;FILESYSTEM&#x3D;&quot;&quot;FORCED_VARYON&#x3D;&quot;false&quot;FSCHECK_TOOL&#x3D;&quot;fsck&quot;FS_BEFORE_IPADDR&#x3D;&quot;false&quot;RECOVERY_METHOD&#x3D;&quot;sequential&quot;SERVICE_LABEL&#x3D;&quot;cmconsole_svr&quot;SSA_DISK_FENCING&#x3D;&quot;false&quot;VG_AUTO_IMPORT&#x3D;&quot;false&quot;VOLUME_GROUP&#x3D;&quot;dmvg&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据资源显示启动和停止脚本</p><pre class="line-numbers language-none"><code class="language-none">CMCONSOLE_P55A_STBY&#x2F;#&#x2F;usr&#x2F;es&#x2F;sbin&#x2F;cluster&#x2F;utilities&#x2F;cllsserv#Name:Start_script:Stop_scriptcmconsole_app:&#x2F;etc&#x2F;hascript&#x2F;ha_start.sh:&#x2F;etc&#x2F;hascript&#x2F;ha_stop.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>集群停止后无法查看，下面这个命令是集群状态监视器           </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@CMAPP_P55A_MAIN:/<span class="token operator">></span> /usr/sbin/cluster/clstat <span class="token parameter variable">-o</span>clstat - HACMP Cluster Status MonitorCluster: cm_cluster     <span class="token punctuation">(</span><span class="token number">1388163864</span><span class="token punctuation">)</span>Fri Oct <span class="token number">11</span> <span class="token number">21</span>:22:27 BEIST <span class="token number">2019</span>State: UP           Nodes: <span class="token number">2</span>SubState: STABLE             Node: node1             State: UP                    Interface: node1_boot2 <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>           Address: <span class="token number">1.1</span>.33.101                                                         State:   UP                    Interface: node1_boot1 <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>           Address: <span class="token number">11.156</span>.33.102                                                         State:   DOWN                    Interface: node1_tty0 <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            Address: <span class="token number">0.0</span>.0.0                                                         State:   UP                    Interface: cmapp_svr <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>             Address: <span class="token number">11.156</span>.33.101                                                         State:   UP                    Resource Group: cmapp_res                    State:  On line                          Node: node2             State: UP                    Interface: node2_boot2 <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>           Address: <span class="token number">1.1</span>.33.103                                                         State:   UP                    Interface: node2_boot1 <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>           Address: <span class="token number">11.156</span>.33.104                                                         State:   DOWN                    Interface: node2_tty0 <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            Address: <span class="token number">0.0</span>.0.0                                                         State:   UP                    Interface: cmdb_svr <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>              Address: <span class="token number">11.156</span>.33.103                                                         State:   UP                    Resource Group: cmdb_res                     State:  On line<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>lssrc -ls clstrmgrES 显示集群是否稳定，集群版本，动态节点优先级(pgspace可用，磁盘繁忙，cpu空闲)，</p><p>下面就几个状态做一下说明：<br>    ST_STABLE: 表示运行带有资源在线的集群服务<br>    NOT_CONFIGURED: 未配置集群或未同步节点(20191011 CM3停止时出现这个状态，多了一个资源组不在HA里面，无法正常停止)<br>    ST_INIT: 集群已在该节点上配置但未激活<br>    ST_JOINING: 集群节点正在加入群集<br>    ST_VOTING: 集群节点正在投票决定事件执行<br>    ST_PR_RUNNING: 集群正在运行恢复程序<br>    ST_PR_FAILED: 恢复程序事件脚本失败或启动集群失败<br>    ST_BARRIER: clstrmgr在事件等待之间存在障碍<br>    ST_CBARRIER: clstrmgr退出恢复程序<br>    ST_UNSTABLE: 集群通常由于事件错误而不稳定</p><p>lssrc -ls topsvcs 显示单个diskhb设备的状态，心跳间隔，故障周期(丢失的心跳)<br>lssrc -ls grpsvcs 提供有关已连接客户端的信息，组数<br>lssrc -ls emsvcs  显示事件管理子系统已知的资源监视器<br>lssrc -ls snmpd   显示有关snmpd<br>lslpp -l | grep cluster.es.server.rte 查看双机版本</p><h4 id="26、删除重复路由"><a href="#26、删除重复路由" class="headerlink" title="26、删除重复路由"></a><strong>26、删除重复路由</strong></h4><p>YZH-SC-NPOS-M&#x2F;#route delete -if en3 default 11.156.33.254</p><h4 id="27、文件系统扩容（HA）"><a href="#27、文件系统扩容（HA）" class="headerlink" title="27、文件系统扩容（HA）"></a>27、文件系统扩容（HA）</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>、生成PVIDchdev <span class="token parameter variable">-l</span> hdisk26 <span class="token parameter variable">-a</span> <span class="token assign-left variable">pv</span><span class="token operator">=</span>yeschdev <span class="token parameter variable">-l</span> hdisk27 <span class="token parameter variable">-a</span> <span class="token assign-left variable">pv</span><span class="token operator">=</span>yeschdev <span class="token parameter variable">-l</span> hdisk28 <span class="token parameter variable">-a</span> <span class="token assign-left variable">pv</span><span class="token operator">=</span>yeschdev <span class="token parameter variable">-l</span> hdisk29 <span class="token parameter variable">-a</span> <span class="token assign-left variable">pv</span><span class="token operator">=</span>yes<span class="token number">2</span>、查看同VG所属磁盘属性<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span>lspv<span class="token operator">|</span><span class="token function">grep</span> sharedbvg<span class="token operator">|</span><span class="token function">awk</span> '<span class="token punctuation">&#123;</span>print $1<span class="token punctuation">&#125;</span><span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">\</span><span class="token assign-left variable">INFO</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>lsattr <span class="token parameter variable">-El</span> $i<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'reserve_policy'</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;print $1" --> "$2&#125;'</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token punctuation">\</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$i</span>: <span class="token variable">$INFO</span>"</span><span class="token punctuation">;</span> <span class="token punctuation">\</span><span class="token keyword">done</span><span class="token number">3</span>、更改新盘属性chdev <span class="token parameter variable">-l</span> hdisk26 <span class="token parameter variable">-a</span> <span class="token assign-left variable">reserve_policy</span><span class="token operator">=</span>no_reservechdev <span class="token parameter variable">-l</span> hdisk27 <span class="token parameter variable">-a</span> <span class="token assign-left variable">reserve_policy</span><span class="token operator">=</span>no_reservechdev <span class="token parameter variable">-l</span> hdisk28 <span class="token parameter variable">-a</span> <span class="token assign-left variable">reserve_policy</span><span class="token operator">=</span>no_reservechdev <span class="token parameter variable">-l</span> hdisk29 <span class="token parameter variable">-a</span> <span class="token assign-left variable">reserve_policy</span><span class="token operator">=</span>no_reserve<span class="token number">4</span>、将新盘加入VG共享组smitty hacmp--<span class="token operator">></span>System Management <span class="token punctuation">(</span>C-SPOC<span class="token punctuation">)</span>--<span class="token operator">></span>HACMP Logical Volume Management--<span class="token operator">></span>Shared Volume Groups  --<span class="token operator">></span>Set Characteristics of a Shared Volume Group    --<span class="token operator">></span> Add a Volume to a Shared Volume Group      <span class="token comment">#第一个弹出界面显示的是所有VG，选择要加盘的VG然后确认</span>    <span class="token comment">#第二个弹出界面显示的是要加新盘，选择需要加入VG的盘确认</span>    <span class="token comment">#最后出现如下图的界面，确认没问题后回车</span>    Resource Group Name                                 zcfzres                     VOLUME GROUP name                                   sharevg                    Reference <span class="token function">node</span>                                      node1                            VOLUME names                                        hdisk26 hdisk28 hdisk27<span class="token number">5</span>、查看新加盘是否加入VGZCFZ_P720_MAIN/<span class="token comment">#lspv                                                                         </span>hdisk0          00f683e8fa182e08          rootvg          active   hdisk1          00f683e822a86333          rootvg          active   hdisk2          00f683e80bcb3bb6          datavg          active   hdisk3          00f683e836066cc5          datavg          active   hdisk4          00f683e836e9cb71          sharevg         active   hdisk5          00f683e836ec4c73          sharevg         active   hdisk6          00f683e836ec4e1f          sharevg         active   hdisk7          00f683e836ec4fd7          sharevg         active   hdisk8          00f683e836ec516f          sharevg         active   hdisk9          00f683e836ec5320          sharevg         active   hdisk10         00f683e836ec54b9          sharevg         active   hdisk11         00f683e836ec566a          sharevg         active   hdisk12         00f683e836ec5814          sharevg         active   hdisk13         00f683e836ec59ca          sharevg         active   hdisk14         00f683e836ec5b6d          sharevg         active   <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.         <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>          <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.         <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>hdisk26         00f683e836ec5d23          sharevg         active   hdisk27         00f683e836ec5ed1          sharevg         active   hdisk28         00f683e836ec6083          sharevg         active   hdisk29         00f683e836ec628d          sharevg         active                   ZCFZ_P720_MAIN/<span class="token comment">#lsvg sharevg                                                                 </span>VOLUME GROUP:       sharevg                  VG IDENTIFIER:  00f683e800004c000000013836ed7f09VG STATE:           active                   PP SIZE:        <span class="token number">1024</span> megabyte<span class="token punctuation">(</span>s<span class="token punctuation">)</span>                VG PERMISSION:      read/write               TOTAL PPs:      <span class="token number">1577</span> <span class="token punctuation">(</span><span class="token number">1614848</span> megabytes<span class="token punctuation">)</span>        MAX LVs:            <span class="token number">256</span>                      FREE PPs:       <span class="token number">597</span> <span class="token punctuation">(</span><span class="token number">611328</span> megabytes<span class="token punctuation">)</span>          LVs:                <span class="token number">4</span>                        USED PPs:       <span class="token number">980</span> <span class="token punctuation">(</span><span class="token number">1003520</span> megabytes<span class="token punctuation">)</span>         OPEN LVs:           <span class="token number">4</span>                        QUORUM:         <span class="token number">12</span> <span class="token punctuation">(</span>Enabled<span class="token punctuation">)</span>                    TOTAL PVs:          <span class="token number">23</span>                       VG DESCRIPTORS: <span class="token number">23</span>                              STALE PVs:          <span class="token number">0</span>                        STALE PPs:      <span class="token number">0</span>                               ACTIVE PVs:         <span class="token number">23</span>                       AUTO ON:        no                              MAX PPs per VG:     <span class="token number">32512</span>                                                                    MAX PPs per PV:     <span class="token number">1016</span>                     MAX PVs:        <span class="token number">32</span>                              LTG size <span class="token punctuation">(</span>Dynamic<span class="token punctuation">)</span>: <span class="token number">256</span> kilobyte<span class="token punctuation">(</span>s<span class="token punctuation">)</span>          AUTO SYNC:      no                              HOT SPARE:          no                       BB POLICY:      relocatable <span class="token number">6</span>、对文件系统进行扩容smitty hacmp                                                --<span class="token operator">></span>System Management <span class="token punctuation">(</span>C-SPOC<span class="token punctuation">)</span>         --<span class="token operator">></span>HACMP Logical Volume Management  --<span class="token operator">></span>Shared File Systems  --<span class="token operator">></span>Enhanced Journaled File Systems    --<span class="token operator">></span>Change / Show Characteristics of a Shared Enhanced Journaled File System             <span class="token comment">#回车后会弹出对话框，里面会列出目录，选择需要扩的目录挂载点，然后确认</span>Resource Group Name                  zcfzres                                File system name                     /ora_data                                 NEW <span class="token function">mount</span> point                      <span class="token punctuation">[</span>/ora_data<span class="token punctuation">]</span>                               SIZE of <span class="token function">file</span> system                  <span class="token punctuation">[</span><span class="token number">3198156800</span><span class="token punctuation">]</span>                               Mount GROUP                           <span class="token punctuation">[</span><span class="token punctuation">]</span>                                       Mount AUTOMATICALLY at system restart?   no                                +            PERMISSIONS                                         read/write                        +            Mount OPTIONS                                      <span class="token punctuation">[</span><span class="token punctuation">]</span>                                 +            Start Disk Accounting?                              no                                +            Block Size <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>                                  <span class="token number">4096</span>                                           Inline Log?                                         no                                             Inline Log size <span class="token punctuation">(</span>MBytes<span class="token punctuation">)</span>                            <span class="token number">0</span>             <span class="token comment">#确认没问题后回车</span><span class="token number">7</span>、确认文件系统是否扩容成功<span class="token function">df</span> <span class="token parameter variable">-g</span> /ora_data                                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="28、确定磁带是本地盘还是存储盘"><a href="#28、确定磁带是本地盘还是存储盘" class="headerlink" title="28、确定磁带是本地盘还是存储盘"></a>28、确定磁带是本地盘还是存储盘</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">YZH-NRGLHC-1<span class="token comment">#lsdev -Cc disk</span>hdisk0  Available 01-00-00 SAS Disk Drive   <span class="token comment">#SAS是本地盘</span>hdisk1  Available 01-00-00 SAS Disk Drivehdisk2  Available 01-00-00 SAS Disk Drivehdisk3  Available 01-00-00 SAS Disk Drivehdisk4  Available 05-00-02 Hitachi Disk Array <span class="token punctuation">(</span>Fibre<span class="token punctuation">)</span>  <span class="token comment">#Hitachi存储盘</span>hdisk5  Available 05-00-02 Hitachi Disk Array <span class="token punctuation">(</span>Fibre<span class="token punctuation">)</span>hdisk6  Available 05-00-02 Hitachi Disk Array <span class="token punctuation">(</span>Fibre<span class="token punctuation">)</span>hdisk7  Available 05-00-02 Hitachi Disk Array <span class="token punctuation">(</span>Fibre<span class="token punctuation">)</span>hdisk8  Available 05-00-02 Hitachi Disk Array <span class="token punctuation">(</span>Fibre<span class="token punctuation">)</span>hdisk9  Available 05-00-02 Hitachi Disk Array <span class="token punctuation">(</span>Fibre<span class="token punctuation">)</span>hdisk10 Available 05-00-02 Hitachi Disk Array <span class="token punctuation">(</span>Fibre<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="29、修改磁盘的负载均衡模式"><a href="#29、修改磁盘的负载均衡模式" class="headerlink" title="29、修改磁盘的负载均衡模式"></a>29、修改磁盘的负载均衡模式</h4><p><code>chdev -l hdisk52  -a reserve_policy=no_reserve -a algorithm=round_robin  </code></p><h4 id="30、查看小机网卡绑定"><a href="#30、查看小机网卡绑定" class="headerlink" title="30、查看小机网卡绑定"></a>30、查看小机网卡绑定</h4><p>root@grwyapp3:&#x2F;&gt;<code> lsattr -El ent6</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adapter_names   ent0,ent2      EtherChannel Adapters                           Truealt_addr        0x000000000000 Alternate EtherChannel Address                  Trueauto_recovery   <span class="token function">yes</span>            Enable automatic recovery after failover        Truebackup_adapter  NONE           Adapter used when whole channel fails           Truehash_mode       default        Determines how outgoing adapter is chosen       Trueinterval        long           Determines interval value <span class="token keyword">for</span> IEEE <span class="token number">802</span>.3ad mode Truemode            standard       EtherChannel mode of operation                  Truenetaddr         <span class="token number">0</span>              Address to <span class="token function">ping</span>                                 Truenoloss_failover <span class="token function">yes</span>            Enable lossless failover after <span class="token function">ping</span> failure     Truenum_retries     <span class="token number">3</span>              Times to retry <span class="token function">ping</span> before failing              Trueretry_time      <span class="token number">1</span>              Wait <span class="token function">time</span> <span class="token punctuation">(</span>in seconds<span class="token punctuation">)</span> between pings            Trueuse_alt_addr    no             Enable Alternate EtherChannel Address           Trueuse_jumbo_frame no             Enable Gigabit Ethernet Jumbo Frames            True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>root@grwyapp3:&#x2F;&gt; <code>lsdev -Cc adapter</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ent0    Available 04-00 <span class="token number">2</span>-Port <span class="token number">10</span>/100/1000 Base-TX PCI-Express Adapter <span class="token punctuation">(</span><span class="token number">14104003</span><span class="token punctuation">)</span>  <span class="token comment"># 属性和其它不一样</span>ent1    Available 04-01 <span class="token number">2</span>-Port <span class="token number">10</span>/100/1000 Base-TX PCI-Express Adapter <span class="token punctuation">(</span><span class="token number">14104003</span><span class="token punctuation">)</span> <span class="token comment"># 属性和其它不一样</span>ent2    Available 03-00 <span class="token number">4</span>-Port Gigabit Ethernet PCI-Express Adapter <span class="token punctuation">(</span>e414571614102004<span class="token punctuation">)</span>ent3    Available 03-01 <span class="token number">4</span>-Port Gigabit Ethernet PCI-Express Adapter <span class="token punctuation">(</span>e414571614102004<span class="token punctuation">)</span>ent4    Available 03-02 <span class="token number">4</span>-Port Gigabit Ethernet PCI-Express Adapter <span class="token punctuation">(</span>e414571614102004<span class="token punctuation">)</span>ent5    Available 03-03 <span class="token number">4</span>-Port Gigabit Ethernet PCI-Express Adapter <span class="token punctuation">(</span>e414571614102004<span class="token punctuation">)</span>ent6    Available       EtherChannel / IEEE <span class="token number">802</span>.3ad Link Aggregationfcs0    Available 06-00 4Gb FC PCI Express Adapter <span class="token punctuation">(</span>df1000fe<span class="token punctuation">)</span>fcs1    Available 06-01 4Gb FC PCI Express Adapter <span class="token punctuation">(</span>df1000fe<span class="token punctuation">)</span>fcs2    Available 07-00 4Gb FC PCI Express Adapter <span class="token punctuation">(</span>df1000fe<span class="token punctuation">)</span>fcs3    Available 07-01 4Gb FC PCI Express Adapter <span class="token punctuation">(</span>df1000fe<span class="token punctuation">)</span>sa0     Available 09-00 <span class="token number">4</span> Port Async EIA-232 PCIe Adaptersissas0 Defined   00-00 PCIe x4 Planar 3Gb SAS Adaptersissas1 Available 02-00 PCIe x4 Internal 3Gb SAS Adapterusbhc0  Defined   08-08 USB Host Controller <span class="token punctuation">(</span><span class="token number">33103500</span><span class="token punctuation">)</span>usbhc1  Defined   08-09 USB Host Controller <span class="token punctuation">(</span><span class="token number">33103500</span><span class="token punctuation">)</span>usbhc2  Defined   08-0a USB Enhanced Host Controller <span class="token punctuation">(</span>3310e000<span class="token punctuation">)</span>vsa0    Available       LPAR Virtual Serial Adapter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>root@grwyapp3:&#x2F;&gt; <code>netstat -v en6</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>省略<span class="token punctuation">..</span><span class="token punctuation">..</span>Statistics <span class="token keyword">for</span> every adapter <span class="token keyword">in</span> the EtherChannel:-------------------------------------------------Number of adapters: <span class="token number">2</span>    <span class="token comment">#  显示几块网卡</span>Operating mode: Standard mode  <span class="token comment">#  使用什么模式</span>Hash mode: Destination IP address-------------------------------------------------------------ETHERNET STATISTICS <span class="token punctuation">(</span>ent0<span class="token punctuation">)</span> <span class="token builtin class-name">:</span>  <span class="token comment"># 关联的网卡</span>Device Type: <span class="token number">2</span>-Port <span class="token number">10</span>/100/1000 Base-TX PCI-Express Adapter <span class="token punctuation">(</span><span class="token number">14104003</span><span class="token punctuation">)</span>Hardware Address: <span class="token number">40</span>:f2:e9:14:3f:d0<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>省略<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>ETHERNET STATISTICS <span class="token punctuation">(</span>ent2<span class="token punctuation">)</span> <span class="token builtin class-name">:</span>  <span class="token comment"># 关联的网卡</span>Device Type: Gigabit Ethernet PCIe Adapter <span class="token punctuation">(</span>e4145716e4142004<span class="token punctuation">)</span>Hardware Address: <span class="token number">40</span>:f2:e9:14:3f:d0<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>省略<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="31、查看磁盘属性"><a href="#31、查看磁盘属性" class="headerlink" title="31、查看磁盘属性"></a>31、查看磁盘属性</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> a.txt<span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token keyword">do</span> lsattr <span class="token parameter variable">-El</span> <span class="token variable">$i</span> <span class="token operator">|</span> <span class="token function">grep</span> reserve_policy <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1,$2&#125;'</span><span class="token punctuation">;</span><span class="token keyword">done</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> a.txt<span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token keyword">do</span> lsattr <span class="token parameter variable">-El</span> <span class="token variable">$i</span> <span class="token operator">|</span> <span class="token function">grep</span> PR_exclusive <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-v</span> <span class="token assign-left variable">var</span><span class="token operator">=</span><span class="token variable">$i</span> <span class="token string">'&#123;print var,$1,$2&#125;'</span><span class="token punctuation">;</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="32、给历史命令添加时间"><a href="#32、给历史命令添加时间" class="headerlink" title="32、给历史命令添加时间"></a>32、给历史命令添加时间</h4><p><code>echo &quot;export EXTENDED_HISTORY=ON&quot; &gt;&gt; /etc/profile</code></p><p>查看：<code>fc -t</code></p><h4 id="33、查看VG的类型"><a href="#33、查看VG的类型" class="headerlink" title="33、查看VG的类型"></a>33、查看VG的类型</h4><p>说明：0 为普通VG（最大32个PV） 1为BIG（最大128个PV） 2为Scalable（最大1024个PV）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">YZHCM3DB/usr/sbin<span class="token comment">#lqueryvg -tp /dev/hdisk744</span>Max LVs:        <span class="token number">256</span>PP Size:        <span class="token number">30</span>Free PPs:       <span class="token number">7</span>LV count:       <span class="token number">3</span>PV count:       <span class="token number">32</span>Total VGDAs:    <span class="token number">32</span>Conc Allowed:   <span class="token number">0</span>MAX PPs per PV: <span class="token number">1016</span>MAX PVs:        <span class="token number">32</span>Quorum <span class="token punctuation">(</span>disk<span class="token punctuation">)</span>:  <span class="token number">1</span>Auto Varyon ?:  <span class="token number">0</span>Conc Autovaryon <span class="token number">0</span>Varied on Conc: <span class="token number">0</span>Total PPs:      <span class="token number">2568</span>LTG size:       <span class="token number">128</span>HOT SPARE:      <span class="token number">0</span>AUTO SYNC:      <span class="token number">0</span>VG PERMISSION:  <span class="token number">0</span>SNAPSHOT VG:    <span class="token number">0</span>IS_PRIMARY VG:  <span class="token number">0</span>PSNFSTPP:       <span class="token number">4352</span>VG Type:        <span class="token number">0</span>Max PPs:        <span class="token number">32512</span>Mirror Pool Str nPV RESTRICTION: ???????Infinite Retry: <span class="token number">2</span>Varyon State:   <span class="token number">0</span>Disk Block Size <span class="token number">512</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="34、查看端口号和进程"><a href="#34、查看端口号和进程" class="headerlink" title="34、查看端口号和进程"></a>34、查看端口号和进程</h4><p>1）查看端口信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-Aan</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">1363</span>f1000f00039343b8 tcp4       <span class="token number">0</span>      <span class="token number">0</span>  <span class="token number">192.196</span>.128.42.1363   *.*                   LISTENf1000f0003917200 udp4       <span class="token number">0</span>      <span class="token number">0</span>  *.1363                *.* <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）如果是tcp连接，则使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rmsock f1000f00039343b8 tcpcbThe socket 0xf1000f0003934008 is being held by proccess <span class="token number">12911014</span> <span class="token punctuation">(</span>cdpmgr<span class="token punctuation">)</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3）根据PID查询详细信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> <span class="token number">12911014</span>    root <span class="token number">12911014</span>        <span class="token number">1</span>   <span class="token number">0</span> 02:37:10      -  <span class="token number">0</span>:00 /cdadmin/ibmcd/ndm/bin/cdpmgr <span class="token parameter variable">-i</span> /cdadmin/ibmcd/ndm/cfg/CD_ZFLY_APP1/initparm.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么反过来，知道进程服务pid，查找其通信端口号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-Aan</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span><span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> line<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$line</span> <span class="token variable"><span class="token variable">`</span>rmsock $line tcpcb <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $(NF-1)&#125;'</span><span class="token variable">`</span></span>"</span><span class="token punctuation">;</span><span class="token keyword">done</span> <span class="token operator">>></span> myfile20210441.txt <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span class="token function">grep</span> <span class="token number">12911014</span> myfile20210441.txtf1000f00039343b8 <span class="token number">12911014</span>f1000f0003933bb8 <span class="token number">12911014</span><span class="token function">netstat</span> <span class="token parameter variable">-Aan</span> <span class="token operator">|</span> <span class="token function">grep</span> f1000f00039343b8f1000f00039343b8 tcp4       <span class="token number">0</span>      <span class="token number">0</span>  <span class="token number">192.196</span>.128.42.1363   *.*                 LISTEN<span class="token function">netstat</span> <span class="token parameter variable">-Aan</span> <span class="token operator">|</span> <span class="token function">grep</span> f1000f0003933bb8f1000f0003933bb8 tcp4       <span class="token number">0</span>      <span class="token number">0</span>  <span class="token number">192.196</span>.128.42.1364   *.*                   LISTEN<span class="token comment">#验证</span><span class="token function">netstat</span> <span class="token parameter variable">-Aan</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">1364</span>f1000f0003933bb8 tcp4       <span class="token number">0</span>      <span class="token number">0</span>  <span class="token number">192.196</span>.128.42.1364   *.*                   LISTEN<span class="token comment"># 合并到一起</span><span class="token function">netstat</span> <span class="token parameter variable">-Aan</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span><span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> line<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$line</span> <span class="token variable"><span class="token variable">`</span>rmsock $line tcpcb <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $(NF-1)&#125;'</span><span class="token variable">`</span></span>"</span><span class="token punctuation">;</span><span class="token keyword">done</span> <span class="token operator">>></span> myfile20210441.txt <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span class="token function">netstat</span> <span class="token parameter variable">-Aan</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">grep</span> `ps -ef<span class="token operator">|</span><span class="token function">grep</span> <span class="token function">rsync</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span>` myfile20210441.txt <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="35、添加定时任务"><a href="#35、添加定时任务" class="headerlink" title="35、添加定时任务"></a>35、添加定时任务</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> hwclock /var/spool/cron/crontabs/root<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">'0 3 * * * root /sbin/hwclock -w'</span> <span class="token operator">>></span> /var/spool/cron/crontabs/root<span class="token punctuation">;</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="36、AIX系统HA扩容"><a href="#36、AIX系统HA扩容" class="headerlink" title="36、AIX系统HA扩容"></a>36、AIX系统HA扩容</h4><p>一、识别硬盘</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cfgmgr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>二、生成PVID</p><pre class="line-numbers language-SH" data-language="SH"><code class="language-SH"># 两边机器都要执行chdev -l hdisk26 -a pv&#x3D;yeschdev -l hdisk27 -a pv&#x3D;yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>三、查看同VG硬盘属性</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 执行下面命令查看</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span>lspv<span class="token operator">|</span><span class="token function">grep</span> sharedbvg<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span><span class="token operator">|</span><span class="token function">head</span> <span class="token parameter variable">-3</span><span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">\</span><span class="token assign-left variable">INFO</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>lsattr <span class="token parameter variable">-El</span> $i<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'reserve_policy'</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;print $1" --> "$2&#125;'</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token punctuation">\</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$i</span>: <span class="token variable">$INFO</span>"</span><span class="token punctuation">;</span> <span class="token punctuation">\</span><span class="token keyword">done</span><span class="token comment"># 范例</span>CMHOUDU_P720_DB/<span class="token comment">#for i in `lspv|grep sharedbvg|awk '&#123;print $1&#125;'|head -3`;do \</span><span class="token assign-left variable">INFO</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>lsattr <span class="token parameter variable">-El</span> $i<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'reserve_policy'</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;print $1" --> "$2&#125;'</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token punctuation">\</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$i</span>: <span class="token variable">$INFO</span>"</span><span class="token punctuation">;</span> <span class="token punctuation">\</span>done<span class="token operator">></span> <span class="token operator">></span> <span class="token operator">></span>hdisk4: reserve_policy --<span class="token operator">></span> no_reservehdisk5: reserve_policy --<span class="token operator">></span> no_reservehdisk6: reserve_policy --<span class="token operator">></span> no_reserve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>四、更改磁盘属性</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chdev <span class="token parameter variable">-l</span> hdisk26 <span class="token parameter variable">-a</span> <span class="token assign-left variable">reserve_policy</span><span class="token operator">=</span>no_reservechdev <span class="token parameter variable">-l</span> hdisk27 <span class="token parameter variable">-a</span> <span class="token assign-left variable">reserve_policy</span><span class="token operator">=</span>no_reserve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>五、添加硬盘</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 第一种显示情况</span>smitty hacmp--- System Management <span class="token punctuation">(</span>C-SPOC<span class="token punctuation">)</span>-- Storage --- Volume Groups -- Set Characteristics of a Volume Group-- Add a Volume to a Volume Group--选择需要扩容的VG回车--然后选择添加的硬盘---确定<span class="token comment"># 第二种显示情况</span>smitty hacmp--<span class="token operator">></span>System Management <span class="token punctuation">(</span>C-SPOC<span class="token punctuation">)</span>--<span class="token operator">></span>HACMP Logical Volume Management--<span class="token operator">></span>Shared Volume Groups  --<span class="token operator">></span>Set Characteristics of a Shared Volume Group    --<span class="token operator">></span> Add a Volume to a Shared Volume Group      <span class="token comment">#第一个弹出界面显示的是所有VG，选择要加盘的VG然后确认</span>    <span class="token comment">#第二个弹出界面显示的是要加新盘，选择需要加入VG的盘确认</span>    <span class="token comment">#最后出现如下图的界面</span>    Resource Group Name                                 zcfzres                     VOLUME GROUP name                                   sharevg                    Reference <span class="token function">node</span>                                      node1                                  VOLUME names                <span class="token comment"># 确认没问题后回车</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>六、查看新盘是否加入VG，并确认VG有剩余空间</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ZCFZ_P720_MAIN/<span class="token comment">#lspv                                                                         </span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>                hdisk10         00f683e836ec54b9                    sharevg         active                   hdisk11         00f683e836ec566a                    sharevg         active                   hdisk12         00f683e836ec5814                    sharevg         active                   hdisk13         00f683e836ec59ca                    sharevg         active    ZCFZ_P720_MAIN/<span class="token comment">#lsvg sharevg                                                                 </span>VOLUME GROUP:       sharevg                  VG IDENTIFIER:  00f683e800004c000000013836ed7f09VG STATE:           active                   PP SIZE:        <span class="token number">1024</span> megabyte<span class="token punctuation">(</span>s<span class="token punctuation">)</span>                VG PERMISSION:      read/write               TOTAL PPs:      <span class="token number">1577</span> <span class="token punctuation">(</span><span class="token number">1614848</span> megabytes<span class="token punctuation">)</span>        MAX LVs:            <span class="token number">256</span>                      FREE PPs:       <span class="token number">597</span> <span class="token punctuation">(</span><span class="token number">611328</span> megabytes<span class="token punctuation">)</span>  <span class="token comment"># 剩余597G     </span>LVs:                <span class="token number">4</span>                        USED PPs:       <span class="token number">980</span> <span class="token punctuation">(</span><span class="token number">1003520</span> megabytes<span class="token punctuation">)</span>         OPEN LVs:           <span class="token number">4</span>                        QUORUM:         <span class="token number">12</span> <span class="token punctuation">(</span>Enabled<span class="token punctuation">)</span>                    TOTAL PVs:          <span class="token number">23</span>                       VG DESCRIPTORS: <span class="token number">23</span>                              STALE PVs:          <span class="token number">0</span>                        STALE PPs:      <span class="token number">0</span>                               ACTIVE PVs:         <span class="token number">23</span>                       AUTO ON:        no                              MAX PPs per VG:     <span class="token number">32512</span>                                                                    MAX PPs per PV:     <span class="token number">1016</span>                     MAX PVs:        <span class="token number">32</span>                              LTG size <span class="token punctuation">(</span>Dynamic<span class="token punctuation">)</span>: <span class="token number">256</span> kilobyte<span class="token punctuation">(</span>s<span class="token punctuation">)</span>          AUTO SYNC:      no                              HOT SPARE:          no                       BB POLICY:      relocatable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>七、文件系统扩容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 第一种显示情况</span>smitty hacmp--- System Management <span class="token punctuation">(</span>C-SPOC<span class="token punctuation">)</span>-- Storage --- File Systems --- Change / Show Characteristics of a File System --- 选择要扩容的目录，回车 --- 在Unit Size选择Gigabytes单位，在Number of Units写扩容后的总大小 --- 确定<span class="token comment"># 第二种显示情况</span>smitty hacmp                                                --<span class="token operator">></span>System Management <span class="token punctuation">(</span>C-SPOC<span class="token punctuation">)</span>         --<span class="token operator">></span>HACMP Logical Volume Management  --<span class="token operator">></span>Shared File Systems  --<span class="token operator">></span>Enhanced Journaled File Systems    --<span class="token operator">></span>Change / Show Characteristics of a Shared Enhanced Journaled File System             <span class="token comment">#回车后会弹出对话框，里面会列出目录，选择需要扩的目录挂载点，然后确认</span>    Resource Group Name                         zcfzres                                    File system name                         /ora_data                                      NEW <span class="token function">mount</span> point                                <span class="token punctuation">[</span>/ora_data<span class="token punctuation">]</span>                                     SIZE of <span class="token function">file</span> system                            <span class="token punctuation">[</span><span class="token number">3198156800</span><span class="token punctuation">]</span>  <span class="token comment"># 计算：总大小/1024/1024/2  </span>            Mount GROUP                                    <span class="token punctuation">[</span><span class="token punctuation">]</span>                                              Mount AUTOMATICALLY at system restart?         no                                +            PERMISSIONS                                    read/write                        +            Mount OPTIONS                                  <span class="token punctuation">[</span><span class="token punctuation">]</span>                                +            Start Disk Accounting?                         no                                +            Block Size <span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>                             <span class="token number">4096</span>                                           Inline Log?                                    no                                             Inline Log size <span class="token punctuation">(</span>MBytes<span class="token punctuation">)</span>                       <span class="token number">0</span>             <span class="token comment">#确认没问题后回车</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>八、如果扩容失败，可能是因为LV pps数不够</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 确认LV支持的最大的PP数</span>CMHOUDU_P720_DB/<span class="token comment">#lslv lsdata_lv</span>LOGICAL VOLUME:     lsdata_lv              VOLUME GROUP:   sharedbvgLV IDENTIFIER:      00f827d500004c0000000145022b01ba.4 PERMISSION:     read/writeVG STATE:           active/complete        LV STATE:       opened/syncdTYPE:               jfs2                   WRITE VERIFY:   offMAX LPs:            <span class="token number">2048</span> <span class="token comment"># 最大数           PP SIZE:        1024 megabyte(s)  # pp大小</span>COPIES:             <span class="token number">1</span>                      SCHED POLICY:   parallelLPs:                <span class="token number">1740</span> <span class="token comment"># 当前已使用pp数    PPs:            1740</span>STALE PPs:          <span class="token number">0</span>                      BB POLICY:      relocatableINTER-POLICY:       minimum                RELOCATABLE:    <span class="token function">yes</span>INTRA-POLICY:       middle                 UPPER BOUND:    <span class="token number">128</span>MOUNT POINT:        /lsdata                LABEL:          /lsdataDEVICE <span class="token environment constant">UID</span><span class="token builtin class-name">:</span>         <span class="token number">0</span>                      DEVICE GID:     <span class="token number">0</span>DEVICE PERMISSIONS: <span class="token number">432</span>MIRROR WRITE CONSISTENCY: on/ACTIVEEACH LP COPY ON A SEPARATE PV ?: <span class="token function">yes</span>Serialize IO ?:     NOINFINITE RETRY:     no<span class="token comment"># 说明： 如果要扩的空间超过最大PP数，如扩容3T，但当前lsdata_lv最大支持为2T，这时如果直接目录扩容，就会报错</span>Command: failed        stdout: <span class="token function">yes</span>           stderr: noBefore <span class="token builtin class-name">command</span> completion, additional instructions may appear below.cl_chfs: Error executing chfs  <span class="token parameter variable">-A</span> no <span class="token parameter variable">-a</span> <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token string">"16728981504"</span> /jzhobjdata3 on <span class="token function">node</span> appnodeError detail:    appnode: 0516-787 extendlv: Maximum allocation <span class="token keyword">for</span> logical volume jzhobjdata3_lv    appnode:    is <span class="token number">7000</span>.    appnode: <span class="token assign-left variable">RETURN_CODE</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment"># 解决方法：就是加大 MAX Lps数量</span>smitty hacmp--- System Management <span class="token punctuation">(</span>C-SPOC<span class="token punctuation">)</span>-- Storage --- Logical Volumes --- Change a Logical Volume --- 在弹出的第一个对话框中选择LV所在的VG，回车 --- 在弹出的第二个对话框中选择要扩展的LV名称，回车 --- 修改如下选项MAXIMUM NUMBER of LOGICAL PARTITIONS   <span class="token punctuation">[</span><span class="token number">5000</span><span class="token punctuation">]</span>，其它不动，然后回车<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="37、检查僵尸进程"><a href="#37、检查僵尸进程" class="headerlink" title="37、检查僵尸进程"></a>37、检查僵尸进程</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">YZH-SC-XYK-APP/<span class="token comment">#ps -efl|pg|grep "Z"</span>   F   S      <span class="token environment constant">UID</span>      PID     <span class="token environment constant">PPID</span>     C PRI NI ADDR    SZ    WCHAN    STIME    TTY  TIME CMD <span class="token number">50804</span> Z    bjnsfa  <span class="token number">13959410</span>  <span class="token number">18350246</span>  <span class="token number">0</span> <span class="token number">255</span> <span class="token number">20</span>  <span class="token number">0</span>:00                              <span class="token operator">&lt;</span>defunct<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="38、显示物理卷信息"><a href="#38、显示物理卷信息" class="headerlink" title="38、显示物理卷信息"></a>38、显示物理卷信息</h4><p>1）显示系统定义和已配置的物理卷</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ lsdev <span class="token parameter variable">-Cc</span> disk <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-8</span>hdisk0   Available 00-00-00 SAS Disk Drivehdisk1   Available 00-00-00 SAS Disk Drivehdisk2   Available 00-00-00 SAS Disk Drivehdisk3   Available 00-00-00 SAS Disk Drivehdisk4   Available 04-00-02 Hitachi Disk Array <span class="token punctuation">(</span>Fibre<span class="token punctuation">)</span>hdisk5   Available 04-00-02 Hitachi Disk Array <span class="token punctuation">(</span>Fibre<span class="token punctuation">)</span>hdisk6   Available 04-00-02 Hitachi Disk Array <span class="token punctuation">(</span>Fibre<span class="token punctuation">)</span>hdisk7   Available 04-00-02 Hitachi Disk Array <span class="token punctuation">(</span>Fibre<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）显示一个物理卷的属性</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ lspv hdisk0PHYSICAL VOLUME:    hdisk0                   VOLUME GROUP:     rootvgPV IDENTIFIER:      00f996632b2b9dc0 VG IDENTIFIER     00f9966000004c000000014b7c4bae8aPV STATE:           active                                     STALE PARTITIONS:   <span class="token number">0</span>                        ALLOCATABLE:      <span class="token function">yes</span>PP SIZE:            <span class="token number">512</span> megabyte<span class="token punctuation">(</span>s<span class="token punctuation">)</span>          LOGICAL VOLUMES:  <span class="token number">12</span>TOTAL PPs:          <span class="token number">558</span> <span class="token punctuation">(</span><span class="token number">285696</span> megabytes<span class="token punctuation">)</span>   VG DESCRIPTORS:   <span class="token number">1</span>FREE PPs:           <span class="token number">382</span> <span class="token punctuation">(</span><span class="token number">195584</span> megabytes<span class="token punctuation">)</span>   HOT SPARE:        noUSED PPs:           <span class="token number">176</span> <span class="token punctuation">(</span><span class="token number">90112</span> megabytes<span class="token punctuation">)</span>    MAX REQUEST:      <span class="token number">1</span> megabyteFREE DISTRIBUTION:  <span class="token number">111</span><span class="token punctuation">..</span><span class="token number">39</span><span class="token punctuation">..</span>09<span class="token punctuation">..</span><span class="token number">111</span><span class="token punctuation">..</span><span class="token number">112</span>                      USED DISTRIBUTION:  01<span class="token punctuation">..</span><span class="token number">73</span><span class="token punctuation">..</span><span class="token number">102</span><span class="token punctuation">..</span>00<span class="token punctuation">..</span>00                        MIRROR POOL:        None                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）显示一个物理卷上分布的逻辑卷</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">YZHCM3DB/<span class="token comment">#lspv -l hdisk761</span>hdisk761:LV NAME               LPs     PPs     DISTRIBUTION          MOUNT POINTarchivelog-lv         <span class="token number">499</span>     <span class="token number">499</span>     <span class="token number">100</span><span class="token punctuation">..</span><span class="token number">100</span><span class="token punctuation">..</span><span class="token number">99</span><span class="token punctuation">..</span><span class="token number">100</span><span class="token punctuation">..</span><span class="token number">100</span> /rmdata<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4）显示物理卷上每个逻辑卷物理分布情况，同时显示逻辑卷类型和文件mount点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">YZHCM3DB/<span class="token comment">#lspv -p hdisk761</span>hdisk761:PP RANGE  STATE   REGION        LV NAME             TYPE       MOUNT POINT  <span class="token number">1</span>-100   used    outer edge    archivelog-lv       jfs2       /rmdata<span class="token number">101</span>-200   used    outer middle  archivelog-lv       jfs2       /rmdata<span class="token number">201</span>-299   used    center        archivelog-lv       jfs2       /rmdata<span class="token number">300</span>-399   used    inner middle  archivelog-lv       jfs2       /rmdata<span class="token number">400</span>-499   used    inner edge    archivelog-lv       jfs2       /rmdata<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）显示物理分区和逻辑分区的对应情况</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ lspv <span class="token parameter variable">-M</span> hdisk761 <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-3</span>hdisk761:1      archivelog-lv:1199      hdisk761:2      archivelog-lv:1200      hdisk761:3      archivelog-lv:1201<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aix命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>躺平的人生</title>
      <link href="/2023/02/12/tang-ping-de-ren-sheng/"/>
      <url>/2023/02/12/tang-ping-de-ren-sheng/</url>
      
        <content type="html"><![CDATA[<p>普通人的一生有几个层次的追求？</p><p>第一、最低层次是生理需求，如温饱。</p><p>第二、是安全的需要，比如一个坚固的避难所。</p><p>第三、是需要爱与被爱。</p><p>第四、是需要被尊重。</p><p>第五、是自我实现。</p><p>说白了，“衣、食、住、行、暖、色”这八个字。</p><p>改革开放以后，我国的经济和军事实力都有了很大的发展。感谢老祖宗的辛勤劳动，衣食无忧有了保障。</p><p>但从第三个层面的追求来看，我们的思想被一些宣传扭曲了。</p><ul><li><p>爱情，从爱情到一个企业。</p></li><li><p>尊重，金钱和权力都是值得尊重的。</p></li><li><p>自我实现，人们的目标已成为人们最富有的人。</p></li></ul><blockquote><p>“平躺”是人的觉醒。</p></blockquote><p>老板说，你要努力工作，将来升职加薪。</p><p>你的设想实际上并没有实现，因为升职加薪都是老板请的，谁能给老板带来巨大的利益。</p><p>你每天重复一种工作996次，浪费了你的才华，成为一个需要拧在哪里的螺丝钉，你没有时间充电和提高自我能力。。</p><p>工作越快越稳定，老板会认为你现在做的工作比较简单，不应该给你这么高的工资。</p><p>当老板在压榨你996和007的时候，他还在想这个人为什么这么不上进，只知道做这种工作，看看我高薪聘请的高管，这就是人才，为什么我手下的人都是垃圾。</p><blockquote><p>“平躺”的人，放下执着。</p></blockquote><p>只有当你醒悟到自己所做工作的真值时，你才能真正放下那些无法实现的执着，放下那些在你眼前捉驴子的胡萝卜。。</p><p>社会环境是一个巨大的心理PUA。</p><p>放下执著，理智地对待一切，看清真相。</p><p>奋斗不是像驴子一样努力。</p><p>奋斗首先是找到人生的方向和行动的方法，然后才是知行合一。</p><p>娱乐、游戏、综艺、偶像、明星、明星企业家、人民富豪，无一不在舞台中央玩着资本游戏，考验着我们的志向和价值观是否坚定。</p><p>令人眼花缭乱的资本游戏总是在寻找韭葱来采摘。</p><p>相信他们说的努力工作，奋斗，买买买，有房有车，炫富，以及其他心理操纵的暗示，那是人生失败的开始。</p><p>一旦迷失于其中，生命转瞬即逝。</p><blockquote><p>“平躺”应该是一种顿悟。</p></blockquote><p>人生苦短，每个人都希望从天上再借五百年。</p><p>但生活不是戏剧，既不是翻拍，也不是续集。</p><p>用八小时工作之外的时间来思考新的人生计划，探索人生新的方向，其实更有意义。</p><p>白岩松和北大的教授们对平躺的人说，“不可能”,在他们眼里，这些人都是精神病患者，这违背了他们年轻时的常识。</p><p>但这是一个常识越来越离谱的时代。</p><p>虽然资本的力量看起来很强大，但在政策控制之下绝对可以遏制。唯一不同的是，下层想做多少菜，付多少钱。</p><p>今天的首都代言人，五十年后都是农民工，今天既没有人才库，也没有群众基础。</p><p>资本在互联网渠道之上只是处于领先地位，但并没有进入任何一个线下的民生行业。事实上，他们是随时准备逃跑的买办，设骗局，随时等着切韭菜。</p><p>是时候回归共产主义的基本精神了：按需分配，按需消费；负翁的明天并不光明。</p><p>–》转自：生而为人，苦中有乐</p>]]></content>
      
      
      
        <tags>
            
            <tag> 人生感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S-CKS模拟试题</title>
      <link href="/2023/02/12/kao-shi-ren-zheng/cks-mo-ni-kao-ti/"/>
      <url>/2023/02/12/kao-shi-ren-zheng/cks-mo-ni-kao-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="1、AppArmor"><a href="#1、AppArmor" class="headerlink" title="1、AppArmor"></a>1、AppArmor</h3><p>考核知识点：</p><p><strong>a）AppArmor简介</strong></p><p>AppArmor是一个高效和易于使用的Linux系统安全应用程序。AppArmor对操作系统和应用程序所受到的威胁进行从内到外的保护，简单的说，AppArmor是与SELinux类似的一个访问控制系统，通过它你可以指定程序可以读、写或运行哪些文件，是否可以打开网络端口等。作为对传统Unix的自主访问控制模块的补充，AppArmor提供了强制访问控制机制，它已经被整合到2.6版本的Linux内核中。目前Ubuntu自带了Apparmor。官网：<a href="https://wiki.ubuntu.com/AppArmor/">https://wiki.ubuntu.com/AppArmor/</a></p><p><strong>b）AppArmor两种工作模式</strong></p><p>enforcement、complain&#x2F;learning</p><p>Enforcement – 在这种模式下，配置文件里列出的限制条件都会得到执行，并且对于违反这些限制条件的程序会进行日志记录。</p><p>Complain – 在这种模式下，配置文件里的限制条件不会得到执行，Apparmor只是对程序的行为进行记录。例如程序可以写一个在配置文件里注明只读的文件，但Apparmor不会对程序的行为进行限制，只是进行记录</p><p><strong>c）访问控制与资源限制</strong></p><p>（1）文件系统的访问控制：</p><p>Apparmor可以对某一个文件，或者某一个目录下的文件进行访问控制，包括以下几种访问模式：<img src="https://gitee.com/miaohsukang/myblog/raw/master/img/1661240335103380.png"></p><p>在配置文件中的写法：</p><p>如 &#x2F;tmp r, (表示可对&#x2F;tmp目录下的文件进行读取)</p><p>注意：没在配置文件中列出的文件，程序是不能访问的</p><p>（2）资源限制</p><p>Apparmor可以提供类似系统调用setrlimit一样的方式来限制程序可以使用的资源。要限制资源，可在配置文件中这样写：</p><p>set rlimit [resource] &lt;&#x3D; [value],</p><p>其resource代表某一种资源，value代表某一个值，要对程序可以使用的虚拟内存做限制时，可以这样写：</p><p>set rlimit as&lt;&#x3D;1M, （可以使用的虚拟内存最大为1M）</p><p>（3）访问网络</p><p>Apparmor可以程序是否可以访问网络进行限制，在配置文件里的语法是：</p><p>network [ [domain] [type] [protocol] ]</p><p>要让程序可以进行所有的网络操作，只需在配置文件中写：</p><p>network,</p><p>要允许程序使用在IPv4下使用TCP协议，可以这样写：</p><p>network inet tcp,</p><p><strong>d）配置文件的编写</strong></p><p>编写完配置文件后，要把文件放到&#x2F;etc&#x2F;apparmor.d这个目录下</p><blockquote><p>切换集群 kubectl config use-context k8s<br>Context<br>AppArmor is enabled on the cluster’s worker node. An AppArmor profile is prepared, but not enforced yet. You may use your browser to open one additional tab to access<br>theAppArmor documentation. Task<br>On the cluster’s worker node, enforce the prepared AppArmor profile located at &#x2F;etc&#x2F;apparmor.d&#x2F;nginx_apparmor . Edit the prepared manifest file located at &#x2F;cks&#x2F;4&#x2F;pod1.yaml to apply the AppArmor profile. Finally, apply the manifest file and create the pod specified in it</p><p>任务：</p><p>在集群的工作节点上，确保准备好的AppArmor文件在&#x2F;etc&#x2F;AppArmor.d&#x2F;目录下，文件名字是nginx_apparmor。编辑位于&#x2F;cks&#x2F;1&#x2F;pod1.yaml的准备好的清单文件，以应用AppArmor配置。最后，应用清单文件并创建pod指定清单文件</p></blockquote><p>解题思路：</p><p>1）关键字： apparmor</p><p>2）切换集群，记住查看node，ssh到worker节点</p><p>3）查看对应的配置文件和名字</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在node1节点</span><span class="token builtin class-name">cd</span> /etc/apparmor.d<span class="token function">cat</span> nginx_apparmor <span class="token comment"># 查看容器名</span><span class="token comment">#include &lt;tunables/global></span>profile nginx-profile-3  <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token punctuation">(</span>attach_disconnected<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">#include &lt;abstractions/base></span>  file,  <span class="token comment"># Deny all file writes.</span>  deny /** w,<span class="token punctuation">&#125;</span><span class="token comment"># 创建一个Pod,不加载apparmor配置</span><span class="token function">cat</span> /cks/1/pod1.yamlapiVersion: v1kind: Podmetadata:  name: hello-apparmor  annotations:spec:  containers:  - name: hello    image: busybox    command: <span class="token punctuation">[</span> <span class="token string">"sh"</span>, <span class="token string">"-c"</span>, <span class="token string">"echo 'Hello AppArmor!' &amp;&amp; sleep 1h"</span> <span class="token punctuation">]</span>    <span class="token comment"># 没有grep到说明没有启动</span>root@node1:~<span class="token comment"># apparmor_status |grep nginx-profile-3</span><span class="token comment"># 加载启用这个配置文件</span>root@node1:~<span class="token comment"># apparmor_parser -q /etc/apparmor.d/nginx_apparmor </span><span class="token comment"># 再次检查，已加载</span>root@node1:~<span class="token comment"># apparmor_status |grep nginx-profile-3             </span>   nginx-profile-3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）修改对应yaml应用这个规则 ，打开官网的网址复制例子，修改容器名字和本地的配置名</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># exit work节点回到跳板机</span>vim /cks/4/pod1.yaml<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>apparmor  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">container.apparmor.security.beta.kubernetes.io/hello</span><span class="token punctuation">:</span> localhost/nginx<span class="token punctuation">-</span>profile<span class="token punctuation">-</span><span class="token number">3</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> hello    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"echo 'Hello AppArmor!' &amp;&amp; sleep 1h"</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）修改后创建出来</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl apply <span class="token parameter variable">-f</span> /cks/4/pod1.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、kube-bench对K8S进行基准测试"><a href="#2、kube-bench对K8S进行基准测试" class="headerlink" title="2、kube-bench对K8S进行基准测试"></a>2、kube-bench对K8S进行基准测试</h3><p><strong>a）Kube-bench简介</strong></p><p>kube-Bench是一款针对Kubernetes的安全检测工具，从本质上来说，Kube-Bench是一个基于Go开发的应用程序，它可以帮助研究人员对部署的Kubernetes进行安全检测，安全检测原则遵循CIS Kubernetes Benchmark。</p><blockquote><p>切换集群：kubectl config use-context KSCS00201</p><p>背景：</p><p>针对kubeadm创建的集群运行ACIS基准测试工具，发现了多个必须立即解决的问题。</p><p>任务：</p><p>通过配置修复所有问题，并重新启动受影响的组件，以确保新设置生效。</p><p>修复针对APIserver发现的以下所有问题：</p><p>确保1.2.7- -authorization-mode参数不能设置为AlwaysAllow</p><p>确保1.2.8 –authorization-mode参数包含Node</p><p>确保1.2.9–authorization-mode参数包含RBAC</p><p>确保1.2.18 –insecure-bind-address 没有被设置</p><p>确保1.2.19 –insecure-port 参数设置为0</p><p>修复针对kubelet发现的以下所有wentire：</p><p>确保4.2.1 anonymous-auth参数设置为false</p><p>确保4.2.2 -authorization-mode参数不能设置为AlwaysAllow</p><p>尽可能使用webhook authn&#x2F;authz。</p><p>修复针对etcd发现的以下所有问题：</p><p>确保4.2.–client-cert-auth 失败参数设置为true</p></blockquote><p>解题思路：</p><p>到控制节点去做题，如果不是，就ssh切换过去</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改APIServer配置文件</span>root@master1:~<span class="token comment"># vim /etc/kubernetes/manifests/kube-apiserver.yaml</span>修改项    - --authorization-mode<span class="token operator">=</span>Node,RBAC  - --insecure-port<span class="token operator">=</span><span class="token number">0</span>  <span class="token comment"># 这项没有的，把它加进去</span>  - --insecure-bind-address  删除这项<span class="token comment"># 修改Kubelet配置文件</span>root@master1:~<span class="token comment"># vim /var/lib/kubelet/config.yaml</span>修改项  authentication:  anonymous:    enabled: <span class="token boolean">false</span>  <span class="token comment"># 修改此处</span>  webhook:    enabled: <span class="token boolean">true</span>  authorization:    mode: Webhook  <span class="token comment"># 修改此处</span>  protectKernelDefaults: <span class="token boolean">true</span><span class="token comment"># kubelet修改完成后要重启服务</span>root@master1:~<span class="token comment"># systemctl daemon-reload</span>root@master1:~<span class="token comment"># systemctl restart kubelet.service</span>root@master1:~<span class="token comment"># systemctl status kubelet.service</span><span class="token comment"># 修改ETCD配置</span>root@master1:~<span class="token comment"># vim /etc/kubernetes/manifests/etcd.yaml</span>修改项  - --client-cert-auth<span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、Trivy进行镜像扫描"><a href="#3、Trivy进行镜像扫描" class="headerlink" title="3、Trivy进行镜像扫描"></a>3、Trivy进行镜像扫描</h3><p>Trivy是一种适用于CI的简单而全面的容器漏洞扫描程序。软件漏洞是指软件或操作系统中存在的故障、缺陷或弱点。Trivy检测操作系统包（Alpine、RHEL、CentOS等）和应用程序依赖（Bundler、Composer、npm、yarn等）的漏洞。Trivy很容易使用，只要安装二进制文件，就可以扫描了。扫描只需指定容器的镜像名称。与其他镜像扫描工具相比，例如Clair，Anchore Engine，Quay相比，Trivy在准确性、方便性和对CI的支持等方面都有着明显的优势。</p><p>推荐在CI中使用它，在推送到container registry之前，你可以轻松地扫描本地容器镜像，Trivy具备如下的特征：</p><p>a）检测面很全，能检测全面的漏洞，操作系统软件包（Alpine、Red Hat Universal Base Image、Red Hat Enterprise Linux、CentOS、Oracle Linux、Debian、Ubuntu、Amazon Linux、openSUSE Leap、SUSE Enterprise Linux、Photon OS 和Distrioless）、应用程序依赖项（Bundler、Composer、Pipenv、Poetry、npm、yarn和Cargo）；</p><p>b）使用简单，仅仅只需要指定镜像名称</p><p>c）扫描快且无状态，第一次扫描将在10秒内完成（取决于网络）。随后的扫描将在一秒钟内完成。与其他扫描器在第一次运行时需要很长时间（大约10分钟）来获取漏洞信息，并鼓励你维护持久的漏洞数据库不同，Trivy是无状态的，不需要维护或准备；</p><p>d）易于安装测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token parameter variable">-v</span> <span class="token environment constant">$HOME</span>/Library/Caches:/root/.cache/ aquasec/trivy:0.20.2 registry.aliyuncs.com/google_containers/coredns:v1.8.6<span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token string">"high"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>备注：registry.aliyuncs.com&#x2F;google_containers&#x2F;coredns:v1.8.6表示要扫描的镜像</p><blockquote><p>Task</p><p>Use the Trivy open-source container scanner to detect images with severe vulnerabilities used by Pods in the namespace yavin.</p><p>Look for images with High or Critical severity vulnerabilities,and delete the Pods that use those images.</p><p>Trivy is pre-installed on the cluster’s master node only; it is not available on the base system or the worker nodes. You’ll have to connect to the cluster’s master node to use Trivy.</p><p><strong>翻译</strong>：</p><p>使用Trivy开源容器扫描器检测命名空间yavin中Pod使用的具有严重漏洞的镜像。</p><p>查找具有High或Critical漏洞的镜像，并删除使用这些镜像的Pod。</p><p>Trivy仅预装在集群的主节点上；它在基本系统或工作节点上不可用。必须连接到集群的主节点才能使用Trivy</p></blockquote><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/1661397909154263.png" alt="image.png"></p><p>解题思路：</p><p>官档查找关键字–&gt; kubectl cheat sheet –&gt; custom-columns</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> root@kssc00401-master<span class="token comment"># 列举yavin名称空间中运行的所有镜像，按 Pod 分组</span>kubectl get pods <span class="token parameter variable">-n</span> yavin <span class="token parameter variable">--output</span><span class="token operator">=</span>custom-columns<span class="token operator">=</span><span class="token string">"NAME:.metadata.name,IMAGE:.spec.containers[*].image"</span>kubectl get pods <span class="token parameter variable">-n</span> yavin -owide<span class="token operator">|</span><span class="token function">grep</span> master1  <span class="token comment"># 找出在当前master节点上的image</span><span class="token comment"># 根据查出的镜像进行漏洞扫描</span>trivy image --skip-update <span class="token string">'刚刚搜到的镜像'</span><span class="token operator">|</span><span class="token function">egrep</span> <span class="token parameter variable">-i</span> <span class="token string">'high|critical'</span>  eg:    trivy image <span class="token parameter variable">-s</span> HIGH,CRITICAL amazonlinux:2    trivy image <span class="token parameter variable">-s</span> HIGH,CRITICAL amazonlinux:1<span class="token comment"># 把检测出来漏洞的镜像对应的pod删除</span>kubectl delete pods xxx<span class="token comment"># --skip-update 跳过镜像更新，考试可以直接跳过</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、sysdig-amp-falco"><a href="#4、sysdig-amp-falco" class="headerlink" title="4、sysdig &amp; falco"></a>4、sysdig &amp; falco</h3><p>Sysdig官网：<a href="http://www.sysdig.org/">www.sysdig.org</a></p><p>sysdig的定位是系统监控、分析和排障的工具，在linux平台上，已经有很多这方面的工具 tcpdump、htop、iftop、lsof、netstat，它们都能用来分析linux系统的运行情况，而且还有很多日志、监控工具。为什么还需要sysdig呢？ sysdig的优点可以归纳为三个词语：整合、强大、灵活。</p><p>Falco 是一个云原生运行时安全系统，可与容器和原始Linux主机一起使用。它由 Sysdig 开发，是 Cloud Native Computing Foundation（云原生计算基金会）的一个沙箱项目。Falco 的工作方式是查看文件更改、网络活动、进程表和其他数据是否存在可疑行为，然后通过可插拔后端发送警报。通过内核模块或扩展的 BPF 探测器在主机的系统调用级别检查事件。Falco 包含一组丰富的规则，您可以编辑这些规则以标记特定的异常行为，并为正常的计算机操作创建允许列表。</p><blockquote><p>中文翻译：</p><p>你可以使用浏览器打开另一个标签来访问sysdig的文档或Falco的文档。</p><p>任务：</p><p>使用运行时检测工具检测redis这个pod下的单个容器中反常的和频繁发生异常的进程。</p><p>有两种工具可供使用：</p><p>sysdig</p><p>falco</p><p>这些工具仅预安装在集群的工作节点上。</p><p>使用你选择的工具（包括任何未预装的工具），至少分析容器30s，使用过滤器检查最新的异常进程，</p><p>将事件文件存储在&#x2F;opt&#x2F;2&#x2F;report中，其中包含检测到的事件，每行一个事件</p><p>按照以下格式保存：</p><p>[timestamp],[uid], [processName]</p><p>保持工具的原始时间戳格式不变。</p><p>确保将事件文件存储在群集的工作节点上。</p></blockquote><p>解题思路：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">关键字：sysdig<span class="token number">0</span>. 记住使用sysdig <span class="token parameter variable">-l</span> <span class="token operator">|</span><span class="token function">grep</span> 搜索相关字段<span class="token number">1</span>. 切换集群，查询对应的pod，ssh到pod对应的node主机上<span class="token number">2</span>. 使用sysdig，注意要求格式和时间，结果重定向到对应的文件<span class="token number">3</span>. sysdig <span class="token parameter variable">-M</span> <span class="token number">30</span> <span class="token parameter variable">-p</span> <span class="token string">"*%evt.time,%user.uid,%proc.name"</span> <span class="token assign-left variable">container.id</span><span class="token operator">=</span>容器id <span class="token operator">></span>/opt/2/report如果报错，添加容器进行时参数<span class="token number">4</span>. sysdig <span class="token parameter variable">-M</span> <span class="token number">30</span> <span class="token parameter variable">-p</span> <span class="token string">"*%evt.time,%user.uid,%proc.name"</span> <span class="token parameter variable">--cri</span> /var/run/containerd/containerd.sock <span class="token assign-left variable">container.id</span><span class="token operator">=</span>容器id <span class="token operator">></span>/opt/2/report<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查找对应容器的ID</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看指定pod使用的容器名</span>root@master1:~<span class="token comment"># kubectl describe pods|grep 'Image: '</span>    Image:          nginx:1.14.2<span class="token comment"># 根据容器名查看该容器ID</span>root@node1:~<span class="token comment"># docker ps -f ancestor=nginx:1.14.2</span>CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS     NAMES6cd5f4fc021c   295c7be07902   <span class="token string">"nginx -g 'daemon of…"</span>   <span class="token number">23</span> minutes ago   Up <span class="token number">23</span> minutes             k8s_nginx_nginx_default_e89927c3-7091-4894-92e6-73b9f5967ba9_0<span class="token comment"># 1.25版本如果没有docker这个命令，可以使用crictl命令</span>crictl <span class="token function">ps</span> <span class="token operator">|</span><span class="token function">grep</span> redis<span class="token comment"># 如果连critctl也没有，可以使用 ctr -n=k8s.io c ls|g</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、serviceAccount"><a href="#5、serviceAccount" class="headerlink" title="5、serviceAccount"></a>5、serviceAccount</h3><blockquote><p>背景：</p><p>Pod无法运行，因为指定的ServiceAcccount不正确。</p><p>任务：</p><p>在现有命名空间qa中创建一个名为backend-sa的新ServiceAccount，该帐户不能访问任何secrets凭据资源。检查命名空间qa中运行的名为backend的Pod。编辑Pod使用新创建的backend-sa这个serviceAccount 。你可以在&#x2F;cks&#x2F;9&#x2F;pod9.yaml上找到Pod的清单文件。确保修改之后的Pod正在运行。最后，清理并删除未被Pod使用的serviceAccount。</p></blockquote><p>解题思路：</p><p>1）创建SA</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl create sa backend-sa <span class="token parameter variable">-n</span> qa --dry-run<span class="token operator">=</span>client <span class="token parameter variable">-o</span> yaml <span class="token operator">></span> sa.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">$ vim sa.yaml<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> backend<span class="token punctuation">-</span>sa  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> qa<span class="token key atrule">automountServiceAccountToken</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 禁止访问任何凭据</span>$ kubectl apply <span class="token punctuation">-</span>f sa.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>考试会自动有backend的pod，不需要自己创建</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">$ vim /cks/9/pod9.yaml <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">run</span><span class="token punctuation">:</span> backend  <span class="token key atrule">name</span><span class="token punctuation">:</span> backend  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> qa<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> backend<span class="token punctuation">-</span>sa  <span class="token key atrule">automountServiceAccountToken</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span><span class="token number">1.9</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> backend    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token key atrule">dnsPolicy</span><span class="token punctuation">:</span> ClusterFirst  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Always$kubectl apply <span class="token punctuation">-</span>f /cks/9/pod9.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看看qa名称空间下哪些pod，通过详细信息可以查看这些pod使用哪些sa，把除了backend-sa的sa都删除</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl delete sa sa名字 <span class="token parameter variable">-n</span> qa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6、TLS通信加强"><a href="#6、TLS通信加强" class="headerlink" title="6、TLS通信加强"></a>6、TLS通信加强</h3><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/1669970242696125.png" alt="0d0ecad840a337e554c70f5ae04feb8.png"></p><p>解题思路：</p><p>在master节点进行修改</p><p>官网关键字：kube-apiserver,搜索VersionTLS、cipher</p><p>修改apiserver配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># cd /etc/kubernetes/manifests/</span>root@master1:/etc/kubernetes/manifests<span class="token comment"># vim kube-apiserver.yaml</span>spec:  containers:  - command:    - kube-apiserver    - --tls-min-version<span class="token operator">=</span>VersionTLS13  <span class="token comment"># 添加</span>    - --tls-cipher-suites<span class="token operator">=</span>TLS_AES_128_GCM_SHA256 <span class="token comment"># 添加</span>    - --advertise-address<span class="token operator">=</span><span class="token number">10.10</span>.30.140<span class="token comment"># 保存退出后，需要重启kubelet</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改etcd配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:/etc/kubernetes/manifests<span class="token comment"># vim etcd.yaml </span>spec:  containers:  - command:    - etcd    - --cipher-suites<span class="token operator">=</span>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256  <span class="token comment"># 添加，注意！！ETCD中没有TLS这个参数</span>    - --advertise-client-urls<span class="token operator">=</span>https://10.10.30.140:2379<span class="token comment"># 保存退出后，需要重启kubelet</span>root@master1:~<span class="token comment"># systemctl restart kubelet</span>root@master1:~<span class="token comment"># kubectl get nodes</span>NAME      STATUS   ROLES                  AGE   VERSIONmaster1   Ready    control-plane,master   37d   v1.23.1node1     Ready    <span class="token operator">&lt;</span>none<span class="token operator">></span>                 37d   v1.23.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、NetworkPolicy拒绝所有入口流量"><a href="#7、NetworkPolicy拒绝所有入口流量" class="headerlink" title="7、NetworkPolicy拒绝所有入口流量"></a>7、NetworkPolicy拒绝所有入口流量</h3><blockquote><p>背景：</p><p>默认的拒绝NetworkPolicy可避免在未定义任何其他NetworkPolicy的命名空间中意外暴漏Pod。</p><p>accidentally：[ˌæksɪˈdɛntəli] ，意外的</p><p>任务</p><p>在命名空间development中为所有入口类型的流量创建一个名为denynetwork的新默认拒绝网络策略。</p><p>新的网络策略必须拒绝命名空间development中的所有ingress通信。</p><p>将新创建的默认拒绝网络策略应用于命名空间development中运行的所有Pod。</p><p>您可以在&#x2F;cks&#x2F;15&#x2F;p1.yaml中找到骨架清单文件</p></blockquote><p>解题思路：</p><p>官网搜索关键字：network-policy—&gt; 找到（默认拒绝所有入站流量）</p><p>将&#x2F;cks&#x2F;15&#x2F;p1.yaml中的内容修改成如下的模版内容</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> NetworkPolicy<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> denynetwork  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> development<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">podSelector</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment"># 表示所有pod</span>  <span class="token key atrule">policyTypes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Ingress  <span class="token comment"># 拒绝所有入栈流量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、NetworkPolicy"><a href="#8、NetworkPolicy" class="headerlink" title="8、NetworkPolicy"></a>8、NetworkPolicy</h3><blockquote><p>任务</p><p>创建名为pod-access的网络策略，用来限制development名称空间的products-service这个pod。 </p><p>仅允许以下Pod连接到products-service这个pod：</p><p>在testing这个名称空间下的pod</p><p>任何名称空间下带environment:staging这个标签的pod</p><p>确保创建网络策略。</p><p>可以在清单文件&#x2F;cks&#x2F;6&#x2F;p2.yaml中找到骨架清单文件</p></blockquote><p>解题思路：</p><p>1）首先查看testing名称空间具有的标签</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xianchaomaster1 ~<span class="token punctuation">]</span><span class="token comment"># kubectl get ns  testing  --show-labels</span>NAME      STATUS   AGE   LABELStesting   Active   12h       <span class="token assign-left variable">name</span><span class="token operator">=</span>testing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）查看products-service这个pod具有的标签</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl get pods products-service <span class="token parameter variable">-n</span> devlopment --show-lablesNAME                 READY        LABELSproducts-service       <span class="token number">1</span>/1        <span class="token assign-left variable">run</span><span class="token operator">=</span>products-service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3）编辑骨架清单文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">vim /cks/6/p2.yaml<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> NetworkPolicy<span class="token key atrule">metadata</span><span class="token punctuation">:</span><span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"pod-access"</span><span class="token key atrule">namespace</span><span class="token punctuation">:</span> <span class="token string">"development"</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">podSelector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">run</span><span class="token punctuation">:</span> products<span class="token punctuation">-</span>service   <span class="token key atrule">policyTypes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Ingress  <span class="token key atrule">ingress</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">from</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">namespaceSelector</span><span class="token punctuation">:</span>        <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> testing  <span class="token comment"># testing名称具有的标签</span>  <span class="token punctuation">-</span> <span class="token key atrule">from</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">podSelector</span><span class="token punctuation">:</span>        <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>          <span class="token key atrule">environment</span><span class="token punctuation">:</span> staging  <span class="token comment"># 具有environment=staging标签的pod</span>      <span class="token key atrule">namespaceSelector</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment"># 所有名称空间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9、rbac-x2F-clusterrole"><a href="#9、rbac-x2F-clusterrole" class="headerlink" title="9、rbac&#x2F;clusterrole"></a>9、rbac&#x2F;clusterrole</h3><blockquote><p>编辑被pod绑定的sa，sa名字是test-sa-3，这个sa绑定的role仅允许对endpoints类型的resources执行get操作。</p><p>在monitoring这个名称空间创建一个名字是role-2的role，并仅允只对namespaces类型的resources执行delete操作，创建一个名字叫做role-2-binding的rolebinding，将role-2绑定到pod绑定的test-sa-3这个sa上</p></blockquote><p>解题思路：</p><p>官网搜索关键字：rbac</p><p>1）搭建模拟环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl create ns monitoringkubectl create sa test-sa-3 <span class="token parameter variable">-n</span> monitoringkubectl create deploy nginx <span class="token parameter variable">--image</span><span class="token operator">=</span>nginx <span class="token parameter variable">-n</span> monitoring --dry-run<span class="token operator">=</span>client <span class="token parameter variable">-o</span> yaml <span class="token operator">></span> ./1.yaml <span class="token comment"># 在spec下面添加serviceAccountName: test-sa-3</span>kubectl apply <span class="token parameter variable">-f</span> <span class="token number">1</span>.yamlkubectl create role mon-role <span class="token parameter variable">--verb</span><span class="token operator">=</span>create <span class="token parameter variable">--resource</span><span class="token operator">=</span>deployment <span class="token parameter variable">-n</span> monitoringkubectl create rolebinding mon-role-binding <span class="token parameter variable">--role</span><span class="token operator">=</span>mon-role <span class="token parameter variable">--serviceaccount</span><span class="token operator">=</span>monitoring:test-sa-3 <span class="token parameter variable">-n</span> monitoring<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）切换context后进行解题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看绑定的role，如果没有下面的rolebinding，直接编辑role也可以</span>kubectl get rolebinding <span class="token parameter variable">-n</span> monitoring显示如下：NAME               ROLE           mon-role-binding   Role/web-role  $ kubectl get rolebinding mon-role-binding  <span class="token parameter variable">-n</span> monitoring <span class="token parameter variable">-oyaml</span> <span class="token operator">|</span><span class="token function">grep</span> test-sa-3 <span class="token parameter variable">-B</span> <span class="token number">5</span>显示如下：    apiGroup: rbac.authorization.k8s.io    kind: Role    name: mon-role  subjects:  - kind: ServiceAccount    name: test-sa-3<span class="token comment"># 如果没有上面的rolebinding，可以直接编辑role：</span>kubectl get role <span class="token parameter variable">-n</span> monitoring显示如下：NAME      mon-role   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$ kubectl edit role mon-role -n monitoring</p><p><img src="/./photo/1669970437737042.png" alt="b53fd915035370da611f86b289676e3.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建新的role：</span>kubectl create role role-2 <span class="token parameter variable">--verb</span><span class="token operator">=</span>delete <span class="token parameter variable">--resource</span><span class="token operator">=</span>namespaces <span class="token parameter variable">-n</span> monitoringkubectl create rolebinding role-2-binding <span class="token parameter variable">--role</span><span class="token operator">=</span>role-2 <span class="token parameter variable">--serviceaccount</span><span class="token operator">=</span>monitoring:test-sa-3 <span class="token parameter variable">-n</span> monitoring<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="10、kube-apiserver审计日志记录和采集"><a href="#10、kube-apiserver审计日志记录和采集" class="headerlink" title="10、kube-apiserver审计日志记录和采集"></a>10、kube-apiserver审计日志记录和采集</h3><p><strong>概念：</strong></p><p>Kubernetes审计（Auditing）功能提供了与安全相关的、按时间顺序排列的记录集，记录每个用户使用Kubernetes API的应用以及控制面自身引发的活动。</p><p>审计功能使得集群管理员能够回答以下问题：</p><p>1）发生了什么？</p><p>2）什么时候发生的？</p><p>3）谁触发的？</p><p>4）活动发生在哪个（些）对象上？</p><p>5）在哪观察到的？</p><p>6）它从哪触发的？</p><p>7）活动的后续处理行为是什么？</p><p>Kube-apiserver 执行审计。每个执行阶段的每个请求都会生成一个事件，然后根据特定策略对事件进行预处理并写入后端。</p><p>每个请求都可以用相关的 “stage” 记录。已知的 stage 有：</p><p>RequestReceived – 此阶段事件将在审计处理器接收到请求后，并且在委托给其余处理器之前生成。</p><p>ResponseStarted - 在响应消息的头部发送后，但是响应消息体发送前。这个 stage 仅为长时间运行的请求生成（例如 watch）。</p><p>ResponseComplete - 当响应消息体完成并且没有更多数据需要传输的时候。</p><p>Panic - 当 panic 发生时生成。</p><p>注意：审计日志记录功能会增加 API server的内存消耗，因为需要为每个请求存储审计所需的某些上下文。此外，内存消耗取决于审计日志记录的配置。</p><p>审计策略：</p><p>审计政策定义了关于应记录哪些事件以及应包含哪些数据的规则。处理事件时，将按顺序与规则列表进行比较。第一个匹配规则设置事件的 [审计级别][auditing-level]。已知的审计级别有：</p><p>**None -**符合这条规则的日志将不会记录。</p><p>**Metadata -**记录请求的 metadata（请求的用户、timestamp、resource、verb 等等），但是不记录请求或者响应的消息体。</p><p>**Request -**记录事件的 metadata 和请求的消息体，但是不记录响应的消息体。这不适用于非资源类型的请求。</p><p>**RequestResponse -**记录事件的 metadata，请求和响应的消息体。这不适用于非资源类型的请求。</p><p>可以使用 –audit-policy-file 标志将包含策略的文件传递给 kube-apiserver。如果不设置该标志，则不记录事件。注意 rules 字段必须在审计策略文件中提供。</p><blockquote><p>任务</p><p>在群集中启用审计日志。</p><p>为此，请启用日志后端，并确保：</p><p>1.日志存储在&#x2F;var&#x2F;log&#x2F;kubernetes&#x2F;audit-logs.txt中</p><p>2.日志文件保留5天</p><p>3.最多保留10个审计日志文件</p><p> 基本策略在&#x2F;etc&#x2F;kubernetes&#x2F;logpolicy&#x2F;sample-policy.yaml中提供。它只指定不记录的日志。</p><p>基本策略位于群集的主节点上。</p><p> 编辑并扩展要记录的基本策略：</p><ol><li><p>RequestResponse级别记录namespace的更改</p></li><li><p>Request级别审计只记录在名称空间front-apps中的pod更改</p></li><li><p>Metadata级别记录所有名称空间中的configMap和secret</p></li></ol><p>另外，添加一个全方位的规则来记录Metadata级别的所有其他请求。</p><p>不要忘记应用修改后的策略。</p></blockquote><p>解题思路：</p><p>官网搜索关键字：auditing</p><ol><li>编辑&#x2F;etc&#x2F;kubernetes&#x2F;logpolicy&#x2F;sample-policy.yaml</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> audit.k8s.io/v1  <span class="token comment"># This is required.</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Policy<span class="token comment"># Don't generate audit events for all requests in RequestReceived stage.</span><span class="token comment"># 不要为RequestReceived阶段中的所有请求生成审计事件。</span><span class="token key atrule">omitStages</span><span class="token punctuation">:</span> <span class="token comment">#省略阶段</span><span class="token punctuation">-</span> <span class="token string">"RequestReceived"</span><span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">level</span><span class="token punctuation">:</span> RequestResponse    <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">""</span>      <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"namespaces"</span><span class="token punctuation">]</span> <span class="token punctuation">-</span> <span class="token key atrule">level</span><span class="token punctuation">:</span> Request   <span class="token key atrule">resources</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">""</span>     <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"pods"</span><span class="token punctuation">]</span>     <span class="token key atrule">namespaces</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"front-apps"</span><span class="token punctuation">]</span> <span class="token punctuation">-</span> <span class="token key atrule">level</span><span class="token punctuation">:</span> Metadata   <span class="token key atrule">resources</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">""</span>     <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"secrets"</span><span class="token punctuation">,</span> <span class="token string">"configmaps"</span><span class="token punctuation">]</span>  <span class="token comment"># 关键字后面加个复数s</span> <span class="token punctuation">-</span> <span class="token key atrule">level</span><span class="token punctuation">:</span> Metadata   <span class="token key atrule">omitStages</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token string">"RequestReceived"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>编辑&#x2F;etc&#x2F;kubernetes&#x2F;manifests&#x2F;kube-apiserver.yaml，增加如下内容：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">- --audit-policy-file<span class="token operator">=</span>/etc/kubernetes/logpolicy/sample-policy.yaml  <span class="token comment"># 审计策略文件</span>- --audit-log-path<span class="token operator">=</span>/var/log/kubernetes/audit-logs.txt  <span class="token comment"># 审计日志文件</span>- --audit-log-maxage<span class="token operator">=</span><span class="token number">5</span>   <span class="token comment"># 日志最大保留天数</span>- --audit-log-maxbackup<span class="token operator">=</span><span class="token number">10</span>  <span class="token comment"># 审计日志文件最大保留数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>在APIServer 的 Pod上挂载策略文件和日志文件（考试可能会直接挂载好）：</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span>  <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/log/kubernetes   <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>logs<span class="token punctuation">-</span>  <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /etc/kubernetes/logpolicy   <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>policy<span class="token key atrule">volumes</span><span class="token punctuation">:</span><span class="token punctuation">-</span>  <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>   <span class="token key atrule">path</span><span class="token punctuation">:</span> /etc/kubernetes/logpolicy   <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>policy<span class="token punctuation">-</span>  <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>   <span class="token key atrule">path</span><span class="token punctuation">:</span> /var/log/kubernetes   <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>logs$ systemctl daemon<span class="token punctuation">-</span>reload$ systemctl restart kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11、创建Secret"><a href="#11、创建Secret" class="headerlink" title="11、创建Secret"></a>11、创建Secret</h3><blockquote><p>任务</p><p>检索istio-system名称空间中已经存在的Secret ，名字是db1-secret-test。将用户名字段存储在名为&#x2F;cks&#x2F;11&#x2F;old-username.txt的文件中，将密码字段存储在名为&#x2F;cks&#x2F;11&#x2F;old-pass.txt的文件中。</p><p>你必须创建这两个文件；它们还不存在。</p><p>不要使用&#x2F;modify创建的文件，按照以下步骤，如果需要，创建新的临时文件。</p><p>在istio-system名称空间中创建一个名为test的secret，如下所示，</p><p>username : thanos</p><p>password : hahahaha</p><p>最后，创建一个新的Pod，该Pod可以通过卷挂载test这个secret：</p><p>pod name | dev-pod</p><p>namespace | istio-system</p><p>container name | dev-container</p><p>image | nginx:1.9</p><p>volume name | dev-volume</p><p>mount path | &#x2F;etc&#x2F;test-secret</p></blockquote><p>解题思路：</p><p>官网搜索关键字：secret</p><p>–&gt; 先创建模拟环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建名称空间</span>kubectl create ns istio-system<span class="token comment"># 创建secret</span>kubectl create secret generic db1-secret-test --from-literal<span class="token operator">=</span>username<span class="token operator">=</span>hello --from-literal<span class="token operator">=</span>password<span class="token operator">=</span><span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>1)检索istio-system名称空间内的db1-secret-test这个Pod,保存其用户名和密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl get secrets <span class="token parameter variable">-n</span> istio-system db1-secret-test <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>.data.username<span class="token punctuation">&#125;</span><span class="token operator">|</span>base64 <span class="token parameter variable">-d</span> <span class="token operator">></span> /cks/11/old-username.txtkubectl get secrets <span class="token parameter variable">-n</span> istio-system db1-secret-test <span class="token parameter variable">-o</span> <span class="token assign-left variable">jsonpath</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>.data.password<span class="token punctuation">&#125;</span><span class="token operator">|</span>base64 <span class="token parameter variable">-d</span> <span class="token operator">></span> /cks/11/old-pass.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2)创建一个名为test的secret</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl create secret generic <span class="token builtin class-name">test</span>  <span class="token parameter variable">-n</span> istio-system --from-literal<span class="token operator">=</span>username<span class="token operator">=</span>thanos --from-literal<span class="token operator">=</span>password<span class="token operator">=</span>hahahaha<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3)根据需求创建secret的pod</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># vim k8s-secret.yaml</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> dev<span class="token punctuation">-</span>pod  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> istio<span class="token punctuation">-</span>system<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> dev<span class="token punctuation">-</span>container    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span><span class="token number">1.9</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> dev<span class="token punctuation">-</span>volume      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"/etc/test-secret"</span>      <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> dev<span class="token punctuation">-</span>volume    <span class="token key atrule">secret</span><span class="token punctuation">:</span>      <span class="token key atrule">secretName</span><span class="token punctuation">:</span> test<span class="token comment"># kubectl apply -f k8s0secret.yaml</span><span class="token comment"># kubectl get pods dev-pod</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12、dockerfile和deployment优化部分"><a href="#12、dockerfile和deployment优化部分" class="headerlink" title="12、dockerfile和deployment优化部分"></a>12、dockerfile和deployment优化部分</h3><blockquote><p>任务</p><p>分析并编辑给定的Dockerfile（基于ubuntu:16.0镜像）文件&#x2F;cks&#x2F;7&#x2F;Dockerfile，修复文件中存在的两个安全&#x2F;最佳实践指令。</p><p>分析和编辑给定清单文件&#x2F;cks&#x2F;7&#x2F;deployment.yaml，修复文件中存在的两个安全&#x2F;最佳实践问题字段。</p></blockquote><p>解题思路：</p><p>1)优化dockerfile</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> /cks/7/DockerfileFROM ubuntu:16.04  <span class="token environment constant">USER</span> nobody<span class="token comment"># 把USER ROOT变成USER nobody</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2)编辑清单文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># vim /cks/7/deployment.yaml</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> dev    <span class="token key atrule">name</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> dev  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> dev    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span><span class="token number">1.9</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>           <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>          <span class="token key atrule">readOnlyRootFilesystem</span><span class="token punctuation">:</span> <span class="token boolean important">True</span>          <span class="token key atrule">runAsUser</span><span class="token punctuation">:</span> <span class="token number">65535</span><span class="token comment"># 'privileged'变成false，readOnlyRootFilesystem’变成True，runAsUser后面的值变成65535</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13、镜像安全ImagePolicyWebhook"><a href="#13、镜像安全ImagePolicyWebhook" class="headerlink" title="13、镜像安全ImagePolicyWebhook"></a>13、镜像安全ImagePolicyWebhook</h3><blockquote><p>任务：</p><p> 必须在集群的主节点上完成整个任务，所有服务和文件都已提前准备好并放置在主节点上。</p><p>在&#x2F;etc&#x2F;kubernetes&#x2F;config目录下有不完整的配置</p><p> 扫描具有HTTPS端点的<a href="http://localhost:8081/image_policy%E9%95%9C%E5%83%8F%EF%BC%9A">http://localhost:8081/image_policy镜像：</a></p><p>1.启用必要的插件以创建镜像策略</p><p> 2.验证控制平面的配置并将其更改为拒绝</p><p>3.编辑配置以正确指向提供的HTTPS端点。</p><p> 最后，通过尝试部署易受攻击的资源&#x2F;cks&#x2F;1&#x2F;web1.yaml来测试配置是否有效</p><p>可以在以下位置找到容器镜像扫描的日志文件: &#x2F;var&#x2F;loglimagepolicyiacme.log</p></blockquote><p>解题思路：</p><p>官网搜索关键字：imagepolicywebhook–admission-controllers</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解决第一个问题</span>$ <span class="token builtin class-name">cd</span> /etc/kubernetes/config<span class="token comment"># 在此目录有如下一个不完整的文件，修改其中的defaultAllow值true为false</span>$ <span class="token function">vim</span> admission_configuration.jsondefaultAllow: <span class="token boolean">false</span><span class="token comment"># 如果没有这个字段，就加一个这个字段，把defaultAllow由true改成false，关闭默认允许</span><span class="token comment"># 解决第二个问题，在这个目录/etc/kubernetes/config下面还有一个文件，把里面的server地址改成题目中要求的</span>$ <span class="token function">vim</span> kubeconfig.yamlserver <span class="token builtin class-name">:</span> https://localhost:8081/image_policy  <span class="token comment">#要查询的远程服务的url，必须是https</span><span class="token comment">#----------------------------- </span><span class="token comment"># 修改如下配置文件</span>$ <span class="token function">vim</span> /etc/kubernetes/manifests/kube-apiserver.yaml- --enable-admission-plugins<span class="token operator">=</span>NodeRestriction,ImagePolicyWebhook  <span class="token comment"># 以逗号分隔，增加ImagePolicyWebhook</span>- --admission-control-config-file<span class="token operator">=</span>/etc/kubernetes/config/admission_configuration.json <span class="token comment"># 增加这个字段</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>  volumeMounts:  - mountPath: /etc/kubernetes/config    name: config<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>volumes:- hostPath:  path: /etc/kubernetes/config  <span class="token comment"># 把宿主机这个目录做成一个卷，挂载到容器里面指定的路径下</span>  name: config$ systemctl restart kubelet$ kubectl apply <span class="token parameter variable">-f</span> /cks/1/web1.yaml  <span class="token comment"># 更新这个yaml文件再测试一下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14、修改deployment的securityContext配置"><a href="#14、修改deployment的securityContext配置" class="headerlink" title="14、修改deployment的securityContext配置"></a>14、修改deployment的securityContext配置</h3><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/1670047256999708.png" alt="8477ee545afebf26dfcca5427536cfb.png"></p><p>解题思路：</p><p>官网搜索关键字：security-context</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 搭建模拟环境，考试不需要做：</span>kubectl create ns sec-nskubectl create deploy secdep  <span class="token parameter variable">--image</span><span class="token operator">=</span>nginx <span class="token parameter variable">-n</span> sec-ns<span class="token comment"># 解题,不要忘记切换context</span>kubectl edit deploy secdep  <span class="token parameter variable">-n</span> sec-ns    spec:      containers:      - image: nginx        imagePullPolicy: Always        name: nginx        resources: <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        securityContext: <span class="token comment"># 添加这四行</span>          allowPrivilegeEscalation: <span class="token boolean">false</span>          readOnlyRootFilesystem: True          runAsUser: <span class="token number">30000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="15、gVsior-x2F-runtimeclass"><a href="#15、gVsior-x2F-runtimeclass" class="headerlink" title="15、gVsior&#x2F;runtimeclass"></a>15、gVsior&#x2F;runtimeclass</h3><blockquote><p>背景：</p><p>此集群使用containerd作为CRl运行时。Containerd的默认运行时处理程序是runc。</p><p> Containerd已经准备好支持一个额外的运行时处理程序runsc（gVisor）。</p><p>任务</p><p> 使用已经准备好的runsc，创建一个名字是untrusted的RuntimeClass</p><p>在gvisor上更新client命名空间中的所有POD，不更新已经通过其他runc运行的pod。</p><p> 可以在&#x2F;cks&#x2F;13&#x2F;rc.yaml中找到模板清单文件</p></blockquote><p>解题思路：</p><p>官网搜索关键字：runtime-class</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建untrusted的运行时</span>$ <span class="token function">vim</span> /cks/13/rc.yamlapiVersion: node.k8s.io/v1  kind: RuntimeClassmetadata:  name: untrusted handler: runsc $ kubectl apply <span class="token parameter variable">-f</span> /cks/13/rc.yaml<span class="token comment"># 查看client名称空间pod</span>$ kubectl get pod <span class="token parameter variable">-n</span> client <span class="token comment"># 假如看到的pod有两个pod1、pod2</span><span class="token comment"># 看到的pod，可以通过</span>kubectl get pod pod1 <span class="token parameter variable">-n</span> client <span class="token parameter variable">-o</span> yaml <span class="token operator">></span> <span class="token number">1</span>.yaml <span class="token comment"># 把yaml文件输出，修改如下部分，在重新deleye，apply这个yaml文件</span>---spec:  runtimeClassName: untrusted  <span class="token comment"># 增加这个字段</span>  containers:    - image: nginx:1.9$ kubectl delete <span class="token parameter variable">-f</span> <span class="token number">1</span>.yaml$ kubectl apply <span class="token parameter variable">-f</span> <span class="token number">1</span>.yaml<span class="token comment"># 其它pod都按此操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16、重新配置cluster的Kubernetes-APl-服务器"><a href="#16、重新配置cluster的Kubernetes-APl-服务器" class="headerlink" title="16、重新配置cluster的Kubernetes APl 服务器"></a>16、重新配置cluster的Kubernetes APl 服务器</h3><blockquote><p>重新配置cluster的Kubernetes APl 服务器，以确保只允许经过身份验证和授权的 REST请求。</p><p>使用授权模式 Node,RBAC 和准入控制器 NodeRestriction。</p><p>删除用户 system:anonymous 的 ClusterRoleBinding来进行清理。注意：所有kubectl 配置环境&#x2F;文件也被配置使用未经身份验证和未经授权的访问。</p><p>你不必更改它，但请注意，一旦完成 cluster 的安全加固， kubectl 的配置将无法工作。</p><p>您可以使用位于 cluster 的 master 节点上，cluster 原本的 kubectl 配置文件</p><p>&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf ，以确保经过身份验证的授权的请求仍然被允许</p></blockquote><p>解题思路：</p><p>官网搜索关键字：api-server—&gt;找(node、admission、mous、bootstrap)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> /etc/kubernetes/manifests/kube-apiserver.yaml- --authorization-mode<span class="token operator">=</span>Node,RBAC  <span class="token comment"># 没有这个字段就添加这一行</span>- --enable-admission-plugins<span class="token operator">=</span>NodeRestriction  <span class="token comment"># 更改准入控制器</span>- --client-ca-file<span class="token operator">=</span>/etc/kubernetes/pki/ca.crt - --enable-bootstrap-token-auth<span class="token operator">=</span>true  <span class="token comment"># 没有这行就添加</span>- --anonymous-auth<span class="token operator">=</span>false  <span class="token comment"># true改为fasle,禁止匿名访问，如果这个字段没有就添加</span><span class="token comment"># 改完要重启下kubelet</span>systemctl restart kubelet<span class="token comment">##查询角色绑定并删除</span>kubectl get clusterrolebinding system:anonymouskubectl delete clusterrolebinding system:anonymous<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 考试认证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CKS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S-CKA模拟试题</title>
      <link href="/2023/02/11/kao-shi-ren-zheng/cka-mo-ni-kao-ti/"/>
      <url>/2023/02/11/kao-shi-ren-zheng/cka-mo-ni-kao-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="1、模拟RBAC"><a href="#1、模拟RBAC" class="headerlink" title="1、模拟RBAC"></a>1、模拟RBAC</h3><blockquote><p>Context</p></blockquote><p>为部署流水线创建一个新的ClusterRole并将其绑定到范围为特定的namespace的特定ServiceAccount</p><blockquote><p>Task</p></blockquote><p>设置配置环境</p><p>[student@node-1]$ <code>kubectl config use-context k8s</code></p><p>创建一个名为<strong>deployment-clusterrole</strong>的clusterrole，该clusterrole只允许对<strong>Deployment、Daemonset、Statefulset</strong>具有<strong>create</strong>权限</p><p>在现有的 namespace <strong>app-team1</strong>中创建一个名为<strong>cicd-token</strong>的新 ServiceAccount。</p><p>限于 namespace <strong>app-team1</strong>中，将新的ClusterRole <strong>deployment-clusterrole</strong> 绑定到新的 ServiceAccount <strong>cicd-token</strong></p><p>解题：</p><p>官方手册搜索关键字：dbca</p><p>1）切换集群，模拟环境不用执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl config use-context k8s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）创建集群角色deployment-clusterrole</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubectl create clusterrole deployment-clusterrole  --verb=create --resource=deployments,daemonsets,statefulsets  #注意：要写小写，每个需要添加一个s</span>clusterrole.rbac.authorization.k8s.io/deployment-clusterrole created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3）在指定的名称空间app-team1下面创建服务账号cicd-token</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看命令帮助</span>root@master1:~<span class="token comment"># kubectl create serviceaccount -h</span><span class="token comment"># 模拟环境没有app-team1这个名称空间</span>root@master1:~<span class="token comment"># kubectl create ns app-team1</span>namespace/app-team1 created<span class="token comment"># 创建SA</span>root@master1:~<span class="token comment"># kubectl create serviceaccount cicd-token -n app-team1</span>serviceaccount/icd-token created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）题目指定在现有的名称空间下绑定集群角色到指定的SA</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubectl create rolebinding cicd-token-binding -n app-team1 --clusterrole=deployment-clusterrole --serviceaccount=app-team1:cicd-token</span>rolebinding.rbac.authorization.k8s.io/cicd-token-binding created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5）检查</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubectl describe clusterrole deployment-clusterrole </span>root@master1:~<span class="token comment"># kubectl describe rolebinding -n app-team1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2、查看pod的cpu"><a href="#2、查看pod的cpu" class="headerlink" title="2、查看pod的cpu"></a>2、查看pod的cpu</h3><p>中文解释：</p><blockquote><p>设置配置环境：</p></blockquote><p>[student@node-1] $ kubectl config use-context k8s</p><blockquote><p>Task：</p></blockquote><p>找出标签是<strong>name&#x3D;cpu-user</strong>的Pod，并过滤出使用CPU最高的Pod，然后把它的名字写在已经存在的&#x2F;opt&#x2F;KUTR00401&#x2F;KUTR00401.txt文件里（注意他没有说指定namespace。所以需要使用-A指定所以namespace）</p><p><strong>解题：</strong></p><p>官方手册搜索关键字：</p><p>1）切换集群，模拟环境不用执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl config use-context k8s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）执行下面命令查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -A 表示查看所有命名空间</span><span class="token comment"># kubectl top [flags] [options]显示资源（CPU、内存、存储）的使用情况</span>root@master1:~<span class="token comment"># kubectl top pod -l name=cpu-user --sort-by=cpu -A</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3）将CPU占用最多的pod的name写入指定文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># echo "pod name" > /opt/KUTR00401/KUTR00401.txt</span><span class="token comment"># 注意：这里由于翻译问题可能文件名字不存在，可以先进去/opt下，确认这个文件具体目录在写入进去,别新建文件目录，否则没分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3、网络策略"><a href="#3、网络策略" class="headerlink" title="3、网络策略"></a>3、网络策略</h3><p>中文解释：</p><blockquote><p>设置配置环境：</p></blockquote><p>[student@node-1] $ kubectl config use-context hk8s</p><blockquote><p>Task</p></blockquote><p>在现有的namespace <strong>my-app</strong>中创建一个名为<strong>allow-port-from-namespace</strong>的新NetworkPolicy。</p><p>确保新的NetworkPolicy允许namespace <strong>echo</strong>中的Pods连接到namespace my-app中的Pods的<strong>9000</strong>端口。</p><p>进一步确保新的NetworkPolicy：</p><p>不允许对没有在监听端口9000的Pods的访问</p><p>不允许非来自 namespace echo中的Pods的访问</p><p>解题：</p><p>官方手册搜索关键字：network-policies</p><p>1）切换集群，模拟环境不用执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl config use-context hk8s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）考试时不用做这两步</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubectl create ns my-app</span>namespace/my-app createdroot@master1:~<span class="token comment"># kubectl create ns echo</span>namespace/echo created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3）查看所有ns的标签label</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果访问者的namespace没有标签labe，则需要手动打一个，如果有一个独特的标签labe，则也可以直接使用</span>root@master1:~<span class="token comment"># kubectl label ns echo project=echo</span>namespace/echo labeledroot@master1:~<span class="token comment"># kubectl get ns --show-labels </span>NAME              STATUS   AGE     LABELSapp-team1         Active   19h     kubernetes.io/metadata.name<span class="token operator">=</span>app-team1default           Active   24h     kubernetes.io/metadata.name<span class="token operator">=</span>default<span class="token builtin class-name">echo</span>              Active   3m14s   kubernetes.io/metadata.name<span class="token operator">=</span>echo,project<span class="token operator">=</span>echokube-node-lease   Active   24h     kubernetes.io/metadata.name<span class="token operator">=</span>kube-node-leasekube-public       Active   24h     kubernetes.io/metadata.name<span class="token operator">=</span>kube-publickube-system       Active   24h     kubernetes.io/metadata.name<span class="token operator">=</span>kube-systemmy-app            Active   3m27s   kubernetes.io/metadata.name<span class="token operator">=</span>my-app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）编辑yaml文件，在复制官方代码时，使用:set paste防止错行</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">root@master1<span class="token punctuation">:</span>/mnt<span class="token comment"># cat 1.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> NetworkPolicy<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> allow<span class="token punctuation">-</span>port<span class="token punctuation">-</span>from<span class="token punctuation">-</span>namespace  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>app<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">podSelector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token key atrule">policyTypes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> Ingress  <span class="token comment"># 策略影响入栈流量</span>  <span class="token key atrule">ingress</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">from</span><span class="token punctuation">:</span> <span class="token comment"># 允许流量的来源</span>        <span class="token punctuation">-</span> <span class="token key atrule">namespaceSelector</span><span class="token punctuation">:</span>            <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>              <span class="token key atrule">project</span><span class="token punctuation">:</span> echo  <span class="token comment"># 访问者的命名空间的标签label</span>      <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP          <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9000</span>  <span class="token comment"># 被访问者公开的端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）更新yaml文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:/mnt<span class="token comment"># kubectl apply -f 1.yaml </span>networkpolicy.networking.k8s.io/allow-port-from-namespace created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4、四层负载均衡service"><a href="#4、四层负载均衡service" class="headerlink" title="4、四层负载均衡service"></a>4、四层负载均衡service</h3><p>中文解释：</p><blockquote><p>设置配置环境：</p></blockquote><p>[student@node-1] $ kubectl config use-context k8s</p><blockquote><p>Task</p></blockquote><p>重新配置一个已经存在的front-end的deployment，在名字为nginx的容器里面添加一个端口配置，名字为<strong>http</strong>，暴露端口号为<strong>80&#x2F;tcp</strong>，然后创建一个<strong>service</strong>，名字为<strong>front-end-svc</strong>，暴露该deployment的http端口，并且service的类型为<strong>NodePort</strong></p><p>解题：</p><p>官方手册搜索关键字：service</p><p>1）切换集群，模拟环境不用执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl config use-context k8s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）检查deployment信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:/mnt<span class="token comment"># kubectl get deployments front-end</span>Error from server <span class="token punctuation">(</span>NotFound<span class="token punctuation">)</span>: deployments.apps <span class="token string">"front-end"</span> not found  <span class="token comment"># 模拟环境中没有这个控制器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3）参考官方文档，按照需要edit deployment，添加端口信息</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">kubectl edit deployment front<span class="token punctuation">-</span>end<span class="token comment"># 添加如下配置，主要是在name为nginx的容器下</span><span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> Always<span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">ports</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> http  <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4)创建service</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubectl expose deployment front-end --name=front-end-svc --port=80 --target-port=http --type=NodePort</span>service/front-end-svc exposed<span class="token comment"># 说明，deployment 接的是pod名字，外部端口，容器端口，type别漏了，--name=svc名字</span>root@master1:~<span class="token comment"># kubectl get deployment front-end -owide      # 查看配置</span>root@master1:~<span class="token comment"># kubectl get svc                              # 查看服务</span>root@master1:~<span class="token comment"># curl svc-ip:端口                             # 验证是否访问到nginx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、七层负载均衡Ingress"><a href="#5、七层负载均衡Ingress" class="headerlink" title="5、七层负载均衡Ingress"></a>5、七层负载均衡Ingress</h3><blockquote><p>设置配置环境</p></blockquote><p>[student@node-1] $ kubectl config use-context k8s</p><blockquote><p>Task</p></blockquote><p>如下创建一个新的nginx Ingress资源：</p><p>名称: pong</p><p>Namespace: ing-internal</p><p>使用服务端口 5678在路径 &#x2F;hello 上公开服务 hello</p><p>可以使用以下命令检查服务 hello的可用性，该命令应返回 hello：</p><p>curl -kL <INTERNAL_IP>&#x2F;hello</p><p><strong>解题：</strong></p><p>官方手册搜索关键字：ingress</p><p>1）切换集群，模拟环境不用执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl config use-context k8s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）在模拟环境创建一个ing-internal，真实环境无需操作</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:/mnt<span class="token comment"># kubectl create ns ing-internal</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3）编写ingres yaml文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">root@master1<span class="token punctuation">:</span>/mnt<span class="token comment"># cat ingress.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pong  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ing<span class="token punctuation">-</span>internal  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">nginx.ingress.kubernetes.io/rewrite-target</span><span class="token punctuation">:</span> /<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ingressClassName</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> /hello        <span class="token key atrule">pathType</span><span class="token punctuation">:</span> Prefix        <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">service</span><span class="token punctuation">:</span>            <span class="token key atrule">name</span><span class="token punctuation">:</span> hello            <span class="token key atrule">port</span><span class="token punctuation">:</span>              <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">5678</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:/mnt<span class="token comment"># kubectl get ingress -n ing-internal </span>NAME   CLASS   HOSTS   ADDRESS   PORTS   AGEpong   nginx   *                 <span class="token number">80</span>      9s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6、Deployment管理pod扩缩容"><a href="#6、Deployment管理pod扩缩容" class="headerlink" title="6、Deployment管理pod扩缩容"></a>6、Deployment管理pod扩缩容</h3><p>中文解释：</p><blockquote><p>设置配置环境：</p></blockquote><p>[student@node-1] $ kubectl config use-context k8s</p><blockquote><p>Task</p></blockquote><p>将loadbalancer的deployment管理的Pod的副本数扩容成6个</p><p><strong>解题：</strong></p><p>官方手册搜索关键字：depolyments–&gt;kubectl scale</p><p>1）切换集群，模拟环境不用执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl config use-context k8s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><h3 id="kubectl-scale"><a href="#kubectl-scale" class="headerlink" title="kubectl scale"></a>kubectl scale</h3><p>扩容或缩容 Deployment、ReplicaSet、Replication Controller或 Job 中Pod数量。</p><p>scale也可以指定多个前提条件，如：当前副本数量或 –resource-version ，进行伸缩比例设置前，系统会先验证前提条件是否成立</p></blockquote><p>2）通过命令修改replicas副本数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:/mnt<span class="token comment"># kubectl scale --replicas=6 deployment front-end</span>root@master1:/mnt<span class="token comment"># kubectl get deployments</span>NAME        READY   UP-TO-DATE   AVAILABLE   AGEfront-end   <span class="token number">6</span>/6     <span class="token number">6</span>            <span class="token number">6</span>           4h37m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、pod指定节点部署"><a href="#7、pod指定节点部署" class="headerlink" title="7、pod指定节点部署"></a>7、pod指定节点部署</h3><p>中文解释：</p><blockquote><p>设置配置环境</p></blockquote><p>[student@node-1] $ kubectl config use-context k8s</p><blockquote><p>Task</p></blockquote><p>创建一个Pod，名字为<strong>nginx-kusc00401</strong>，镜像地址是nginx，调度到具有disk&#x3D;spinning标签的节点上</p><p><strong>解题：</strong></p><p>官方手册搜索关键字：nodeselector–将Pod分配给节点</p><p>1）切换集群，模拟环境不用执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl config use-context k8s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）从官网复制创建pod的yaml进行修改</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">root@master1<span class="token punctuation">:</span>/mnt<span class="token comment"># cat pod.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>kusc00401<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">nodeSelector</span><span class="token punctuation">:</span>  <span class="token comment"># 这个字段可以通过explain查看</span>    <span class="token key atrule">disk</span><span class="token punctuation">:</span> spinning<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）执行yaml并查看pod创建成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:/mnt<span class="token comment"># kubectl get pods</span>NAME                         READY   STATUS    RESTARTS   AGEfront-end-7f64488455-6mfkc   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3h57mfront-end-7f64488455-6n62w   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          13mfront-end-7f64488455-btx9c   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          13mfront-end-7f64488455-v6ncv   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3h57mfront-end-7f64488455-xdwf9   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          3h57mnginx-kusc00401              <span class="token number">1</span>/1     Running   <span class="token number">0</span>          108s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、检查可用节点数量"><a href="#8、检查可用节点数量" class="headerlink" title="8、检查可用节点数量"></a>8、检查可用节点数量</h3><p>中文解释：</p><blockquote><p>设置配置环境：</p></blockquote><p>[student@node-1] $ kubectl config use-context k8s</p><p>检查集群中有多少节点为Ready状态（不包括被打上 <strong>Taint：NoSchedule</strong> 的节点），之后将数量写到&#x2F;opt&#x2F;KUSC00402&#x2F;kusc00402.txt</p><p><strong>解题：</strong></p><p>官方手册搜索关键字：无</p><p>1）切换集群，模拟环境不用执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl config use-context k8s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）使用grep命令查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubectl get nodes|grep -w 'Ready'|wc -l</span><span class="token number">2</span>root@master1:~<span class="token comment"># kubectl describe nodes master1 node1 |grep 'Taint'|grep 'NoSchedule'|wc -l</span><span class="token number">1</span><span class="token comment"># 上面结果相减为1，将得到的结果写入指定的目录文件</span>root@master1:~<span class="token comment"># mkdir /opt/KUSC00402</span>root@master1:~<span class="token comment"># echo 1 > /opt/KUSC00402/kusc00402.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9、一个Pod封装多个容器"><a href="#9、一个Pod封装多个容器" class="headerlink" title="9、一个Pod封装多个容器"></a>9、一个Pod封装多个容器</h3><p>中文解释：</p><blockquote><p>设置配置环境：</p></blockquote><p>[student@node-1] $ kubectl config use-context k8s </p><blockquote><p>Task</p></blockquote><p>创建一个Pod，名字为kucc1，这个Pod包含4容器，为nginx、redis、memcached、consul</p><p><strong>解题：</strong></p><p>官方手册搜索关键字：pod</p><p>1）切换集群，模拟环境不用执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl config use-context k8s <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）从官网复制创建pod的yaml进行修改</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">root@master1<span class="token punctuation">:</span>/mnt<span class="token comment"># cat pod-rucc.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> kucc1<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> redis    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> memcached    <span class="token key atrule">image</span><span class="token punctuation">:</span> memcached  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> consul    <span class="token key atrule">image</span><span class="token punctuation">:</span> consul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）执行yaml文件，并查看pod处理running状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:/mnt<span class="token comment"># kubectl get pods</span>NAME                         READY   STATUS              RESTARTS   AGEfront-end-7f64488455-6mfkc   <span class="token number">1</span>/1     Running             <span class="token number">0</span>          4h45mfront-end-7f64488455-6n62w   <span class="token number">1</span>/1     Running             <span class="token number">0</span>          61mfront-end-7f64488455-btx9c   <span class="token number">1</span>/1     Running             <span class="token number">0</span>          61mfront-end-7f64488455-v6ncv   <span class="token number">1</span>/1     Running             <span class="token number">0</span>          4h45mfront-end-7f64488455-xdwf9   <span class="token number">1</span>/1     Running             <span class="token number">0</span>          4h45mkucc1                        <span class="token number">0</span>/4     ContainerCreating   <span class="token number">0</span>          6s   <span class="token comment"># 创建</span>nginx-kusc00401              <span class="token number">1</span>/1     Running             <span class="token number">0</span>          49m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10、PersistentVolume"><a href="#10、PersistentVolume" class="headerlink" title="10、PersistentVolume"></a>10、PersistentVolume</h3><p>中文解释：</p><blockquote><p>设置配置环境</p></blockquote><p>[student@node-1] $ kubectl config use-context hk8s</p><blockquote><p>Task</p></blockquote><p>创建一个pv，名字为app-config，大小为2Gi，访问权限为ReadWriteMany。Volume的类型为hostPath，路径为&#x2F;srv&#x2F;app-config</p><p><strong>解题：</strong></p><p>官方手册搜索关键字：pod pv</p><p>1）切换集群，模拟环境不用执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl config use-context hk8s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）编写pv yaml文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">root@master1<span class="token punctuation">:</span>/mnt<span class="token comment"># cat pv.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> app<span class="token punctuation">-</span>config<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 2Gi  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteMany  <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"/srv/app-config"</span><span class="token comment"># 执行</span>root@master1<span class="token punctuation">:</span>/mnt<span class="token comment"># kubectl apply -f pv.yaml </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）检查</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:/mnt<span class="token comment"># kubectl get pv</span>NAME         CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGEapp-config   2Gi        RWX            Retain           Available                                   5s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="11、PersistentVolumeClaim"><a href="#11、PersistentVolumeClaim" class="headerlink" title="11、PersistentVolumeClaim"></a>11、PersistentVolumeClaim</h3><p>中文翻译：</p><blockquote><p>设置配置环境</p></blockquote><p>[student@node-1] $ kubectl config use-context ok8s</p><blockquote><p>Task</p></blockquote><p>创建一个名字为<strong>pv-volume</strong>的pvc，指定storageClass为<strong>csi-hostpath-sc</strong>，大小为10Mi</p><p>然后创建一个Pod，名字为<strong>web-server</strong>，镜像为nginx，并且挂载该PVC至**&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html<strong>，挂载的权限为</strong>ReadWriteOnce<strong>。之后通过kubectl edit或者kubectl path将pvc改成</strong>70Mi**，并且记录修改记录</p><p><strong>解题：</strong></p><p>官方手册搜索关键字：pod pv</p><p>1）切换集群，模拟环境不用执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl config use-context ok8s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）创建PVC</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">root@master1<span class="token punctuation">:</span>/mnt<span class="token comment"># cat pvc.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pv<span class="token punctuation">-</span>volume<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> csi<span class="token punctuation">-</span>hostpath<span class="token punctuation">-</span>sc  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteOnce  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 10Mi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）创建pod</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">root@master1<span class="token punctuation">:</span>/mnt<span class="token comment"># cat pvc-pod.yaml </span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> web<span class="token punctuation">-</span>server <span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> pv<span class="token punctuation">-</span>volume      <span class="token key atrule">persistentVolumeClaim</span><span class="token punctuation">:</span>        <span class="token key atrule">claimName</span><span class="token punctuation">:</span> pv<span class="token punctuation">-</span>volume  <span class="token key atrule">containers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx      <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx      <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"/usr/share/nginx/html"</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> pv<span class="token punctuation">-</span>volume<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）执行apply</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">oot@master1:/mnt<span class="token comment"># kubectl apply -f pvc.yaml </span>persistentvolumeclaim/pv-volume createdroot@master1:/mnt<span class="token comment"># kubectl apply -f pvc-pod.yaml </span>pod/web-server created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>5）查看创建的PVC和POD</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 注意，这里因为没有csi这个类，所以状态处于pending是正常的。考试会有csi这个类，csi这个类需要安装对应插件才能使用</span>root@master1:/mnt<span class="token comment"># kubectl get pvc </span>NAME        STATUS    VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS      AGEpv-volume   Pending                                      csi-hostpath-sc   47s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>6）修改PVC大小，并保存修改记录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 我们修改会保存不了，因为上面pvc，pending状态，记住在那里修改即可</span>root@master1:/mnt<span class="token comment"># kubectl edit pvc pv-volume --record</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="12、查看Pod日志"><a href="#12、查看Pod日志" class="headerlink" title="12、查看Pod日志"></a>12、查看Pod日志</h3><p>中文解释：</p><blockquote><p>设置配置环境：</p></blockquote><p>[student@node-1] $ kubectl config use-context k8s</p><blockquote><p>Task：</p></blockquote><p>监控名为foobar的Pod的日志，并过滤出具有unable-access-website 信息的行，然后将写入到 &#x2F;opt&#x2F;KUTR00101&#x2F;foobar</p><p><strong>解题：</strong></p><p>官方手册搜索关键字：</p><p>1）切换集群，模拟环境不用执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl config use-context k8s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）监控指定日志并保存到指定文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubectl logs foobar|grep unable-access-website > /opt/KUTR00101/foobar</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="13、Sidecar代理"><a href="#13、Sidecar代理" class="headerlink" title="13、Sidecar代理"></a>13、Sidecar代理</h3><p>中文解释：</p><blockquote><p>设置配置环境：</p></blockquote><p>[student@node-1] $ kubectl config use-context k8s</p><blockquote><p>Context</p></blockquote><p>将一个现有的 Pod 集成到 Kubernetes 的内置日志记录体系结构中（例如 kubectl logs）。</p><p>添加 streaming sidecar 容器是实现此要求的一种好方法。</p><blockquote><p>Task</p></blockquote><p>使用<strong>busybox</strong> Image来将名为<strong>sidecar</strong>的sidecar容器添加到现有的Pod <strong>legacy-app</strong>上，新的sidecar容器必须运行以下命令：</p><p> <strong>&#x2F;bin&#x2F;sh -c tail -n+1 -f &#x2F;var&#x2F;log&#x2F;legacy-app.log</strong></p><p>使用安装在&#x2F;var&#x2F;log&#x2F;的volum，使日志文件legacy-app.log文件可用于sidecar容器</p><p>注意：除了添加所需的volume mount外，请勿更改现有容器的规格。</p><p><strong>解题：</strong></p><p>官方手册搜索关键字：logging</p><p>1）切换集群，模拟环境不用执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl config use-context k8s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）导出legacy-app的YAML文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 导出旧pod修改,注意因为要求不对原有pod修改，只能新增辅助sidecar，另外要注意备份</span>root@master1:~<span class="token comment"># kubectl get pods legacy-app -o yaml > sidecar.yaml</span>root@master1:~<span class="token comment"># cp sidecar-bak.yaml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参考K8S文档–&gt; 日志架构 –&gt; 如下图例子，复制红框部分内容</p><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/image-20230101215311780.png"></p><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/image-20230101215311780.png"></p><p>编辑生成的sidecar YAML文件</p><p><img src="https://gitee.com/miaohsukang/myblog/raw/master/img/768b59b4a678cf324e923e8d80a7c2d4.png"></p><p>3）在apply这个sidecar文件时，会报错，需要先删除原先的legacy-app POD</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:/mnt<span class="token comment"># kubectl delete -f c-sidecar.yaml --force --grace-period=0</span>warning: Immediate deletion does not <span class="token function">wait</span> <span class="token keyword">for</span> confirmation that the running resource has been terminated. The resource may <span class="token builtin class-name">continue</span> to run on the cluster indefinitely.pod <span class="token string">"legacy-app"</span> force deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4）重新部署POD</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:/mnt<span class="token comment"># kubectl apply -f sidecar.yaml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5）验证</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:/mnt<span class="token comment"># kubectl exec legacy-app -c legacy-app -- tail -f /var/log/legacy-app.log    #验证</span>root@master1:/mnt<span class="token comment"># kubectl exec legacy-app -c sidecar -- tail -f /var/log/legacy-app.log       #验证是否使用同一个log</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="14、节点维护-指定node节点不可用"><a href="#14、节点维护-指定node节点不可用" class="headerlink" title="14、节点维护-指定node节点不可用"></a>14、节点维护-指定node节点不可用</h3><blockquote><p>设置配置环境</p></blockquote><p>[student@node-1] $ kubectl config use-context ek8s</p><blockquote><p>Tasks</p></blockquote><p>将ek8s-node-1节点设置为不可用，然后重新调度该节点上的所有Pod</p><p>解题：</p><p>官方手册搜索关键字：drain-node</p><p>1）切换集群,模拟环境不用执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl config use-context ek8s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）设置节点不可调度</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果标记节点为不可调度（unschedulable），将阻止新 Pod 调度到该 Node 之上， 但不会影响任何已经在其上的 Pod。 这是重启节点或者执行其他维护操作之前的一个有用的准备步骤。</span><span class="token comment"># 要标记一个 Node 为不可调度，执行以下命令</span>root@master1:~<span class="token comment"># kubectl cordon node1</span>node/node1 cordonedroot@master1:~<span class="token comment"># kubectl get nodes</span>NAME      STATUS                     ROLES                  AGE     VERSIONmaster1   Ready                      control-plane,master   6h28m   v1.23.1node1     Ready,SchedulingDisabled   <span class="token operator">&lt;</span>none<span class="token operator">></span>                 6h23m   v1.23.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）告诉 Kubernetes 清空节点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubectl drain node1 --delete-emptydir-data --ignore-daemonsets --force</span>node/node1 already cordonedWARNING: ignoring DaemonSet-managed Pods: kube-system/calico-node-qn4h5, kube-system/kube-proxy-t96gfevicting pod kube-system/calico-kube-controllers-677cd97c8d-pg85gpod/calico-kube-controllers-677cd97c8d-pg85g evictednode/node1 drained<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）检查</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubectl get pods -n kube-system -owide</span>NAME                                       READY   STATUS    RESTARTS   AGE     IP              NODE      NOMINATED NODE   READINESS GATEScalico-kube-controllers-677cd97c8d-dlwlh   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          95s     <span class="token number">10.244</span>.137.67   master1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>calico-node-2rfsn                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          6h28m   <span class="token number">10.10</span>.30.140    master1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>calico-node-qn4h5                          <span class="token number">1</span>/1     Running   <span class="token number">0</span>          6h28m   <span class="token number">10.10</span>.30.141    node1     <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>coredns-65c54cc984-hdrrj                   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          6h35m   <span class="token number">10.244</span>.137.65   master1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>coredns-65c54cc984-hf4td                   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          6h35m   <span class="token number">10.244</span>.137.66   master1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>etcd-master1                               <span class="token number">1</span>/1     Running   <span class="token number">0</span>          6h35m   <span class="token number">10.10</span>.30.140    master1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-apiserver-master1                     <span class="token number">1</span>/1     Running   <span class="token number">0</span>          6h35m   <span class="token number">10.10</span>.30.140    master1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-controller-manager-master1            <span class="token number">1</span>/1     Running   <span class="token number">0</span>          6h35m   <span class="token number">10.10</span>.30.140    master1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-proxy-q7zsx                           <span class="token number">1</span>/1     Running   <span class="token number">0</span>          6h35m   <span class="token number">10.10</span>.30.140    master1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-proxy-t96gf                           <span class="token number">1</span>/1     Running   <span class="token number">0</span>          6h29m   <span class="token number">10.10</span>.30.141    node1     <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>kube-scheduler-master1                     <span class="token number">1</span>/1     Running   <span class="token number">0</span>          6h35m   <span class="token number">10.10</span>.30.140    master1   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="15、K8S版本升级"><a href="#15、K8S版本升级" class="headerlink" title="15、K8S版本升级"></a>15、K8S版本升级</h3><blockquote><p>设置配置环境</p></blockquote><p>[student@node-1] $kubectl config use-context mk8s</p><blockquote><p>Tasks</p></blockquote><p>现有的Kubernetes 集群正在运行版本1.23.1。仅将master节点上的所有 Kubernetes 控制平面和节点组件升级到版本1.23.2。</p><p>（注意，考试时的集群可能为1.23.0，会让你从1.23.0升级为1.23.1。甚至是1.22.1升级为1.22.2。所以敲命令时，具体要升级的版本要注意，根据题目要求更改。）</p><p><strong>确保在升级之前 drain master节点，并在升级后 uncordon master节点。</strong></p><p>可以使用以下命令，通过ssh连接到master节点：</p><p>ssh master01</p><p>可以使用以下命令，在该master节点上获取更高权限：</p><p>sudo -i</p><p>另外，在主节点上升级kubelet和kubectl。</p><p>请不要升级工作节点，etcd，container管理器，CNI插件， DNS服务或任何其他插件。</p><p><strong>考点：</strong>如何离线主机，并升级控制面板和升级节点</p><p>解题：</p><p>官方手册搜索关键字：kubeadm-upgrade</p><p>1）切换集群，模拟环境不用执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl config use-context mk8s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）先把master1设置为维护</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubectl cordon master1 </span>node/master1 cordonedroot@master1:~<span class="token comment"># kubectl get nodes</span>NAME      STATUS                     ROLES                  AGE   VERSIONmaster1   Ready,SchedulingDisabled   control-plane,master   8h    v1.23.1node1     Ready                      <span class="token operator">&lt;</span>none<span class="token operator">></span>                 8h    v1.23.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）把master节点上的pod都驱逐走</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubectl drain master1 --force --delete-emptydir-data --ignore-daemonsets </span>node/master1 already cordonedWARNING: ignoring DaemonSet-managed Pods: kube-system/calico-node-2rfsn, kube-system/kube-proxy-q7zsxevicting pod kube-system/coredns-65c54cc984-hf4tdevicting pod kube-system/coredns-65c54cc984-hdrrjpod/coredns-65c54cc984-hdrrj evictedpod/coredns-65c54cc984-hf4td evictednode/master1 drained<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）从node节点ssh到master节点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">linux@node1:~$ <span class="token function">ssh</span> master1 The authenticity of <span class="token function">host</span> <span class="token string">'master1 (10.10.30.140)'</span> can<span class="token string">'t be established.ECDSA key fingerprint is SHA256:WZFL/F0FAejlM1f5W3axLC4ui93c4l6CaBtyoURh2kQ.Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added '</span>master1,10.10.30.140<span class="token string">' (ECDSA) to the list of known hosts.linux@master1'</span>s password: Welcome to Ubuntu <span class="token number">20.04</span>.3 LTS <span class="token punctuation">(</span>GNU/Linux <span class="token number">5.15</span>.0-43-generic x86_64<span class="token punctuation">)</span> * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantage<span class="token number">290</span> updates can be applied immediately.<span class="token number">139</span> of these updates are standard security updates.To see these additional updates run: <span class="token function">apt</span> list <span class="token parameter variable">--upgradable</span>New release <span class="token string">'22.04.1 LTS'</span> available.Run <span class="token string">'do-release-upgrade'</span> to upgrade to it.Your Hardware Enablement Stack <span class="token punctuation">(</span>HWE<span class="token punctuation">)</span> is supported <span class="token keyword">until</span> April <span class="token number">2025</span>.Last login: Fri Dec <span class="token number">23</span> 00:59:01 <span class="token number">2022</span> from <span class="token number">10.10</span>.30.1linux@master1:~$ <span class="token function">sudo</span> <span class="token parameter variable">-i</span><span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> password <span class="token keyword">for</span> linux: root@master1:~<span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）升级kubeadm</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看kubeadm原始版本</span>root@master1:~<span class="token comment"># kubeadm version</span>kubeadm version: <span class="token operator">&amp;</span>version.Info<span class="token punctuation">&#123;</span>Major:<span class="token string">"1"</span>, Minor:<span class="token string">"23"</span>, GitVersion:<span class="token string">"v1.23.1"</span>, GitCommit:<span class="token string">"86ec240af8cbd1b60bcc4c03c20da9b98005b92e"</span>, GitTreeState:<span class="token string">"clean"</span>, BuildDate:<span class="token string">"2021-12-16T11:39:51Z"</span>, GoVersion:<span class="token string">"go1.17.5"</span>, Compiler:<span class="token string">"gc"</span>, Platform:<span class="token string">"linux/amd64"</span><span class="token punctuation">&#125;</span><span class="token comment"># 查看仓库中最新版本</span>root@master1:~<span class="token comment"># apt-cache show kubeadm|grep 1.23.2</span>Version: <span class="token number">1.23</span>.2-00Filename: pool/kubeadm_1.23.2-00_amd64_f3593ab00d33e8c0a19e24c7a8c81e74a02e601d0f1c61559a5fb87658b53563.debroot@master1:~<span class="token comment"># apt-get update &amp;&amp; apt-get install kubeadm=1.23.2-00</span><span class="token comment"># 验证下载操作正常，并且 kubeadm 版本正确</span>root@master1:~<span class="token comment"># kubeadm version</span>kubeadm version: <span class="token operator">&amp;</span>version.Info<span class="token punctuation">&#123;</span>Major:<span class="token string">"1"</span>, Minor:<span class="token string">"23"</span>, GitVersion:<span class="token string">"v1.23.2"</span>, GitCommit:<span class="token string">"9d142434e3af351a628bffee3939e64c681afa4d"</span>, GitTreeState:<span class="token string">"clean"</span>, BuildDate:<span class="token string">"2022-01-19T17:34:34Z"</span>, GoVersion:<span class="token string">"go1.17.5"</span>, Compiler:<span class="token string">"gc"</span>, Platform:<span class="token string">"linux/amd64"</span><span class="token punctuation">&#125;</span><span class="token comment"># 验证升级计划</span>kubeadm upgrade plan<span class="token comment"># 选择要升级到的目标版本，升级其它组件但要排除etcd，输入Y继续</span>root@master1:~<span class="token comment"># kubeadm upgrade apply v1.23.2 --etcd-upgrade=false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6）升级kubelet和kubectl</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># apt-get install kubelet=1.23.2-00</span>root@master1:~<span class="token comment"># apt-get install kubectl=1.23.2-00</span><span class="token comment"># 查看</span>root@master1:~<span class="token comment"># kubectl get nodes</span>NAME      STATUS                     ROLES                  AGE   VERSIONmaster1   Ready,SchedulingDisabled   control-plane,master   9h    v1.23.2node1     Ready                      <span class="token operator">&lt;</span>none<span class="token operator">></span>                 9h    v1.23.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、查看kubelet和kubectl版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubelet --version</span>Kubernetes v1.23.2root@master1:~<span class="token comment"># kubectl version</span>Client Version: version.Info<span class="token punctuation">&#123;</span>Major:<span class="token string">"1"</span>, Minor:<span class="token string">"23"</span>, GitVersion:<span class="token string">"v1.23.2"</span>, GitCommit:<span class="token string">"9d142434e3af351a628bffee3939e64c681afa4d"</span>, GitTreeState:<span class="token string">"clean"</span>, BuildDate:<span class="token string">"2022-01-19T17:35:46Z"</span>, GoVersion:<span class="token string">"go1.17.5"</span>, Compiler:<span class="token string">"gc"</span>, Platform:<span class="token string">"linux/amd64"</span><span class="token punctuation">&#125;</span>Server Version: version.Info<span class="token punctuation">&#123;</span>Major:<span class="token string">"1"</span>, Minor:<span class="token string">"23"</span>, GitVersion:<span class="token string">"v1.23.2"</span>, GitCommit:<span class="token string">"9d142434e3af351a628bffee3939e64c681afa4d"</span>, GitTreeState:<span class="token string">"clean"</span>, BuildDate:<span class="token string">"2022-01-19T17:29:16Z"</span>, GoVersion:<span class="token string">"go1.17.5"</span>, Compiler:<span class="token string">"gc"</span>, Platform:<span class="token string">"linux/amd64"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8）退出到node节点就可以了</p><p>9）恢复master节点的调度</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># kubectl get nodes</span>NAME      STATUS                     ROLES                  AGE   VERSIONmaster1   Ready,SchedulingDisabled   control-plane,master   10h   v1.23.2node1     Ready                      <span class="token operator">&lt;</span>none<span class="token operator">></span>                 10h   v1.23.1root@master1:~<span class="token comment"># kubectl uncordon master1 </span>node/master1 uncordonedroot@master1:~<span class="token comment"># kubectl get nodes</span>NAME      STATUS   ROLES                  AGE   VERSIONmaster1   Ready    control-plane,master   10h   v1.23.2node1     Ready    <span class="token operator">&lt;</span>none<span class="token operator">></span>                 10h   v1.23.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16、ETCD数据库备份"><a href="#16、ETCD数据库备份" class="headerlink" title="16、ETCD数据库备份"></a>16、ETCD数据库备份</h3><p>中文翻译：</p><p>此项目无需更改配置环境，但是，在执行此项目之前，请确保您已返回初始节点。etcd这道题真实考试为第4题，用的集群是真实考试时的上一题的集群，即真题第3题mk8s，所以无需再切换集群了</p><blockquote><p>Task：</p></blockquote><p>首先，为运行在<a href="https://127.0.0.1:2379上的现有">https://127.0.0.1:2379上的现有</a> etcd 实例创建快照并将快照保存到 &#x2F;srv&#x2F;data&#x2F;etcd-snapshot.db文件</p><p>为给定实例创建快照预计能在几秒钟内完成。 如果该操作似乎挂起，则命令可能有问题。用 CTRL + C 来取消操作，然后重试。</p><p>然后还原位于&#x2F;var&#x2F;lib&#x2F;backup&#x2F;etcd-snapshot-previous.db的现有先前快照。</p><p>提供了以下TLS证书和密钥，以通过etcdctl连接到服务器。</p><p>CA 证书: &#x2F;opt&#x2F;KUIN00601&#x2F;ca.crt</p><p>客户端证书: &#x2F;opt&#x2F;KUIN00601&#x2F;etcd-client.crt</p><p>客户端密钥: &#x2F;opt&#x2F;KUIN00601&#x2F;etcd-client.key</p><p><strong>解题：</strong></p><p>官方手册关键字查询：upgrade-etcd</p><p>确认一下ssh终端，是在[student@node-1]$下面，否则可能找不到etcdctl命令</p><p>备份ETCD</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># mkdir /srv/data/ -p</span>root@master1:~<span class="token comment"># etcdctl --endpoints=https://127.0.0.1:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key snapshot save /srv/data/etcd-snapshot.db</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还原快照</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master1:~<span class="token comment"># etcdctl --endpoints=https://127.0.0.1:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key snapshot restore /srv/data/etcd-snapshot.db</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="17、集群故障排查-–-kubelet故障"><a href="#17、集群故障排查-–-kubelet故障" class="headerlink" title="17、集群故障排查 – kubelet故障"></a>17、集群故障排查 – kubelet故障</h3><p>中文解释：</p><blockquote><p>设置配置环境</p></blockquote><p>[student@node-1] $ kubectl config use-context wk8s</p><blockquote><p>Task</p></blockquote><p>一个名为wk8s-node-0的节点状态为NotReady，让其他恢复至正常状态，并确认所有的更改开机自动完成。 </p><p>可以使用以下命令，通过ssh连接到wk8s-node-0节点：</p><p>ssh wk8s-node-0</p><p>可以使用以下命令，在该节点上获取更高权限：</p><p>sudo -i</p><p><strong>解题：</strong></p><p>1）切换集群，模拟环境不用执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl config use-context wk8s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）执行下面命令查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>student@node-1<span class="token punctuation">]</span>$ <span class="token function">ssh</span> wk8s-node-0<span class="token punctuation">[</span>student@node-1<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token parameter variable">-i</span><span class="token punctuation">[</span>root@wk8s-node-0<span class="token punctuation">]</span><span class="token comment"># systemctl status kubelet</span><span class="token punctuation">[</span>root@wk8s-node-0<span class="token punctuation">]</span><span class="token comment"># systemctl restart kubelet</span><span class="token punctuation">[</span>root@wk8s-node-0<span class="token punctuation">]</span><span class="token comment"># systemctl enable kubelet</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>退出root，退回到student@wk8s-node-0</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@wk8s-node-0<span class="token punctuation">]</span><span class="token comment">#exit</span><span class="token punctuation">[</span>student@wk8s-node-0<span class="token punctuation">]</span><span class="token comment">#exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>退出wk8s-node-0，退回到student@node-1 </p><p>不要输入exit多了，否则会退出考试环境的</p>]]></content>
      
      
      <categories>
          
          <category> 考试认证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CKA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S-考试技巧</title>
      <link href="/2023/02/11/kao-shi-ren-zheng/da-ti-ji-qiao/"/>
      <url>/2023/02/11/kao-shi-ren-zheng/da-ti-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h4 id="1、避免手敲yaml"><a href="#1、避免手敲yaml" class="headerlink" title="1、避免手敲yaml"></a>1、避免手敲yaml</h4><p>能不手敲yaml的，就别手敲，尽量从文档上复制，手敲的效率太低了，碰上终端响应慢，那是时间的杀手！！</p><h4 id="2、使用命令补全"><a href="#2、使用命令补全" class="headerlink" title="2、使用命令补全"></a>2、使用命令补全</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /usr/share/bash-completion/bash_completion <span class="token builtin class-name">source</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>kubectl completion <span class="token function">bash</span><span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token string">"source &lt;(kubectl completion bash)"</span> <span class="token operator">>></span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3、使用别名"><a href="#3、使用别名" class="headerlink" title="3、使用别名"></a>3、使用别名</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.bashrc<span class="token comment"># 添加如下内容</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token string">'kubectl'</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">kgp</span><span class="token operator">=</span><span class="token string">'kubectl get pods'</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">kgs</span><span class="token operator">=</span><span class="token string">'kubectl get svc'</span><span class="token comment"># source ~/.bashrc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、环境检查"><a href="#4、环境检查" class="headerlink" title="4、环境检查"></a>4、环境检查</h4><p>集群版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>集群整体状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl cluster-info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更多集群信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl cluster-info dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>集群组件状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl get componentstatus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>集群主控节点判断(ROLES里是否有master信息)：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl get nodes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>集群安装方式判断(kubeadm还是二进制)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看/etc/kubernetes/manifests 里有没有etcd、kube-apiserver.yaml、kube-controller-manager.yaml、schedule.yaml</span><span class="token comment"># 如果有这4个文件，则是以kubeadm方式安装，实现方式为静态Pod方式实现</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>集群当前上下文</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl config current-context<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>集群上下文切换</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl config set-context gce <span class="token parameter variable">--user</span><span class="token operator">=</span>cluster-admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、考试环境中一定要留意<strong>k8s环境，尤其是主机名和用户</strong>，默认可以使用ssh进入nod，进入node做完题目后记得退出exit</p><p>6、养成使用–dry-run、kubectl apply -f、kubectl delete -f的习惯，同时将答案和yaml写入到文件里，方便根据命令模板修改yaml，以及后面检查答案时重做题目</p>]]></content>
      
      
      <categories>
          
          <category> 考试认证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CKA </tag>
            
            <tag> CKS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
